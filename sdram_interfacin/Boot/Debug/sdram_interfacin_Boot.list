
sdram_interfacin_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a08  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008cb8  08008cb8  00009cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d04  08008d04  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000000  08008d04  08008d04  0000a00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d04  08008d04  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00009d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d08  08008d08  00009d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  08008d0c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2400000c  08008d18  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  0000b000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175d2  00000000  00000000  0000a03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e97  00000000  00000000  0002160c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000244a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7f  00000000  00000000  000253f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a0c  00000000  00000000  00025f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b0d  00000000  00000000  0005797b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001388e9  00000000  00000000  0006c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a4d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  001a4db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  001a8c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400000c 	.word	0x2400000c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008ca0 	.word	0x08008ca0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000010 	.word	0x24000010
 80002ec:	08008ca0 	.word	0x08008ca0

080002f0 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */
  HAL_RCCEx_EnableClockProtection(RCC_CLOCKPROTECT_XSPI);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f004 fec9 	bl	800508c <HAL_RCCEx_EnableClockProtection>

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
 80002fa:	22ac      	movs	r2, #172	@ 0xac
 80002fc:	2100      	movs	r1, #0
 80002fe:	480b      	ldr	r0, [pc, #44]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000300:	f008 fc94 	bl	8008c2c <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
 800030a:	4b08      	ldr	r3, [pc, #32]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 800030c:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <MX_EXTMEM_MANAGER_Init+0x40>)
 800030e:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000312:	2203      	movs	r2, #3
 8000314:	721a      	strb	r2, [r3, #8]

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
 8000316:	2004      	movs	r0, #4
 8000318:	f003 fb78 	bl	8003a0c <HAL_RCCEx_GetPeriphCLKFreq>
 800031c:	4603      	mov	r3, r0
 800031e:	4619      	mov	r1, r3
 8000320:	2000      	movs	r0, #0
 8000322:	f006 f897 	bl	8006454 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	240000c4 	.word	0x240000c4
 8000330:	24000028 	.word	0x24000028

08000334 <FMC_WRITE>:
}




void FMC_WRITE(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	uint32_t counter;
	uint8_t testByte = 0x00;
 800033a:	2300      	movs	r3, #0
 800033c:	72fb      	strb	r3, [r7, #11]
	uint32_t fmcTestStart;
	uint32_t fmcTestStop;


	//Write SDRAM memory
	fmcTestStart = HAL_GetTick();
 800033e:	f000 fd4f 	bl	8000de0 <HAL_GetTick>
 8000342:	6078      	str	r0, [r7, #4]


	for (counter = 0x00; counter < SDRAM_SIZE; counter++){
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	e00c      	b.n	8000364 <FMC_WRITE+0x30>
		*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t)(testByte+counter);
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	b2da      	uxtb	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f103 4350 	add.w	r3, r3, #3489660928	@ 0xd0000000
 8000354:	4619      	mov	r1, r3
 8000356:	7afb      	ldrb	r3, [r7, #11]
 8000358:	4413      	add	r3, r2
 800035a:	b2db      	uxtb	r3, r3
 800035c:	700b      	strb	r3, [r1, #0]
	for (counter = 0x00; counter < SDRAM_SIZE; counter++){
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3301      	adds	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800036a:	d3ee      	bcc.n	800034a <FMC_WRITE+0x16>
	}


	fmcTestStop = HAL_GetTick() - fmcTestStart;
 800036c:	f000 fd38 	bl	8000de0 <HAL_GetTick>
 8000370:	4602      	mov	r2, r0
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	603b      	str	r3, [r7, #0]


	HAL_Delay(50);
 8000378:	2032      	movs	r0, #50	@ 0x32
 800037a:	f000 fd3d 	bl	8000df8 <HAL_Delay>


}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800038e:	f000 fa5f 	bl	8000850 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000392:	4b40      	ldr	r3, [pc, #256]	@ (8000494 <main+0x10c>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800039a:	2b00      	cmp	r3, #0
 800039c:	d11b      	bne.n	80003d6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800039e:	f3bf 8f4f 	dsb	sy
}
 80003a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003a4:	f3bf 8f6f 	isb	sy
}
 80003a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000494 <main+0x10c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003b2:	f3bf 8f4f 	dsb	sy
}
 80003b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b8:	f3bf 8f6f 	isb	sy
}
 80003bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003be:	4b35      	ldr	r3, [pc, #212]	@ (8000494 <main+0x10c>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a34      	ldr	r2, [pc, #208]	@ (8000494 <main+0x10c>)
 80003c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003ca:	f3bf 8f4f 	dsb	sy
}
 80003ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d0:	f3bf 8f6f 	isb	sy
}
 80003d4:	e000      	b.n	80003d8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <main+0x10c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d138      	bne.n	8000456 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000494 <main+0x10c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003ec:	f3bf 8f4f 	dsb	sy
}
 80003f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003f2:	4b28      	ldr	r3, [pc, #160]	@ (8000494 <main+0x10c>)
 80003f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80003f8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	0b5b      	lsrs	r3, r3, #13
 80003fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000402:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800040c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	015a      	lsls	r2, r3, #5
 8000412:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000416:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800041c:	491d      	ldr	r1, [pc, #116]	@ (8000494 <main+0x10c>)
 800041e:	4313      	orrs	r3, r2
 8000420:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	1e5a      	subs	r2, r3, #1
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1ef      	bne.n	800040e <main+0x86>
    } while(sets-- != 0U);
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	60ba      	str	r2, [r7, #8]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1e5      	bne.n	8000404 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000438:	f3bf 8f4f 	dsb	sy
}
 800043c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <main+0x10c>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <main+0x10c>)
 8000444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000448:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800044a:	f3bf 8f4f 	dsb	sy
}
 800044e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000450:	f3bf 8f6f 	isb	sy
}
 8000454:	e000      	b.n	8000458 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000456:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fc59 	bl	8000d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f81c 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 f990 	bl	8000784 <MX_GPIO_Init>
  MX_SBS_Init();
 8000464:	f000 f894 	bl	8000590 <MX_SBS_Init>
  MX_XSPI2_Init();
 8000468:	f000 f89a 	bl	80005a0 <MX_XSPI2_Init>
  MX_FMC_Init();
 800046c:	f000 f8f2 	bl	8000654 <MX_FMC_Init>
  MX_EXTMEM_MANAGER_Init();
 8000470:	f7ff ff3e 	bl	80002f0 <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */

  //FMC_ERASE();
  HAL_Delay(1050);
 8000474:	f240 401a 	movw	r0, #1050	@ 0x41a
 8000478:	f000 fcbe 	bl	8000df8 <HAL_Delay>

  FMC_WRITE();
 800047c:	f7ff ff5a 	bl	8000334 <FMC_WRITE>

  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
 8000480:	f005 ff20 	bl	80062c4 <BOOT_Application>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d002      	beq.n	8000490 <main+0x108>
  {
    Error_Handler();
 800048a:	f000 fa26 	bl	80008da <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <main+0x108>
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b0b0      	sub	sp, #192	@ 0xc0
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a2:	229c      	movs	r2, #156	@ 0x9c
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f008 fbc0 	bl	8008c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2220      	movs	r2, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f008 fbba 	bl	8008c2c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004b8:	2000      	movs	r0, #0
 80004ba:	f001 f8f1 	bl	80016a0 <HAL_PWREx_ControlVoltageScaling>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x30>
  {
    Error_Handler();
 80004c4:	f000 fa09 	bl	80008da <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c8:	2302      	movs	r3, #2
 80004ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004cc:	2301      	movs	r3, #1
 80004ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d4:	2340      	movs	r3, #64	@ 0x40
 80004d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 80004d8:	2302      	movs	r3, #2
 80004da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 80004dc:	2300      	movs	r3, #0
 80004de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 4;
 80004e0:	2304      	movs	r3, #4
 80004e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 25;
 80004e4:	2319      	movs	r3, #25
 80004e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 80004ec:	2302      	movs	r3, #2
 80004ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 80004f0:	2302      	movs	r3, #2
 80004f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 80004f4:	2302      	movs	r3, #2
 80004f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 80004f8:	2302      	movs	r3, #2
 80004fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
 8000504:	2300      	movs	r3, #0
 8000506:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLM = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLN = 41;
 800050c:	2329      	movs	r3, #41	@ 0x29
 800050e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL2.PLLP = 2;
 8000510:	2302      	movs	r3, #2
 8000512:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLQ = 2;
 8000516:	2302      	movs	r3, #2
 8000518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLR = 2;
 800051c:	2302      	movs	r3, #2
 800051e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL2.PLLS = 2;
 8000522:	2302      	movs	r3, #2
 8000524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.PLLT = 2;
 8000528:	2302      	movs	r3, #2
 800052a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL2.PLLFractional = 6144;
 800052e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000532:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f8e5 	bl	8001710 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800054c:	f000 f9c5 	bl	80008da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	233f      	movs	r3, #63	@ 0x3f
 8000552:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	2303      	movs	r3, #3
 8000556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800055c:	2308      	movs	r3, #8
 800055e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000560:	2304      	movs	r3, #4
 8000562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000564:	2340      	movs	r3, #64	@ 0x40
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 800056e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000572:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2125      	movs	r1, #37	@ 0x25
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fc03 	bl	8001d84 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000584:	f000 f9a9 	bl	80008da <Error_Handler>
  }
}
 8000588:	bf00      	nop
 800058a:	37c0      	adds	r7, #192	@ 0xc0
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <MX_SBS_Init>:
  * @brief SBS Initialization Function
  * @param None
  * @retval None
  */
static void MX_SBS_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
 80005b0:	4b26      	ldr	r3, [pc, #152]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005b2:	4a27      	ldr	r2, [pc, #156]	@ (8000650 <MX_XSPI2_Init+0xb0>)
 80005b4:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
 80005b6:	4b25      	ldr	r3, [pc, #148]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80005bc:	4b23      	ldr	r3, [pc, #140]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80005c2:	4b22      	ldr	r3, [pc, #136]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80005c8:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_32GB;
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005cc:	221f      	movs	r2, #31
 80005ce:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 2;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80005d6:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 3;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005ea:	2203      	movs	r2, #3
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_XSPI2_Init+0xac>)
 80005fe:	2200      	movs	r2, #0
 8000600:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_XSPI2_Init+0xac>)
 8000604:	2200      	movs	r2, #0
 8000606:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
 8000608:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_XSPI2_Init+0xac>)
 800060a:	2200      	movs	r2, #0
 800060c:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_XSPI2_Init+0xac>)
 8000610:	2200      	movs	r2, #0
 8000612:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <MX_XSPI2_Init+0xac>)
 8000616:	f004 fe33 	bl	8005280 <HAL_XSPI_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
 8000620:	f000 f95b 	bl	80008da <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8000624:	2310      	movs	r3, #16
 8000626:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
 8000628:	2301      	movs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_XSPI2_Init+0xac>)
 8000636:	f005 fa1f 	bl	8005a78 <HAL_XSPIM_Config>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_XSPI2_Init+0xa4>
  {
    Error_Handler();
 8000640:	f000 f94b 	bl	80008da <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	24000028 	.word	0x24000028
 8000650:	5200a000 	.word	0x5200a000

08000654 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	@ 0x30
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 800066e:	4b43      	ldr	r3, [pc, #268]	@ (800077c <MX_FMC_Init+0x128>)
 8000670:	4a43      	ldr	r2, [pc, #268]	@ (8000780 <MX_FMC_Init+0x12c>)
 8000672:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000674:	4b41      	ldr	r3, [pc, #260]	@ (800077c <MX_FMC_Init+0x128>)
 8000676:	2201      	movs	r2, #1
 8000678:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800067a:	4b40      	ldr	r3, [pc, #256]	@ (800077c <MX_FMC_Init+0x128>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000680:	4b3e      	ldr	r3, [pc, #248]	@ (800077c <MX_FMC_Init+0x128>)
 8000682:	2204      	movs	r2, #4
 8000684:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000686:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <MX_FMC_Init+0x128>)
 8000688:	2210      	movs	r2, #16
 800068a:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800068c:	4b3b      	ldr	r3, [pc, #236]	@ (800077c <MX_FMC_Init+0x128>)
 800068e:	2240      	movs	r2, #64	@ 0x40
 8000690:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000692:	4b3a      	ldr	r3, [pc, #232]	@ (800077c <MX_FMC_Init+0x128>)
 8000694:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000698:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800069a:	4b38      	ldr	r3, [pc, #224]	@ (800077c <MX_FMC_Init+0x128>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006a0:	4b36      	ldr	r3, [pc, #216]	@ (800077c <MX_FMC_Init+0x128>)
 80006a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006a6:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80006a8:	4b34      	ldr	r3, [pc, #208]	@ (800077c <MX_FMC_Init+0x128>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80006ae:	4b33      	ldr	r3, [pc, #204]	@ (800077c <MX_FMC_Init+0x128>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	617b      	str	r3, [r7, #20]
  SdramTiming.SelfRefreshTime = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RowCycleDelay = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  SdramTiming.WriteRecoveryTime = 3;
 80006c4:	2303      	movs	r3, #3
 80006c6:	623b      	str	r3, [r7, #32]
  SdramTiming.RPDelay = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.RCDDelay = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4829      	ldr	r0, [pc, #164]	@ (800077c <MX_FMC_Init+0x128>)
 80006d8:	f004 fd38 	bl	800514c <HAL_SDRAM_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80006e2:	f000 f8fa 	bl	80008da <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
     HAL_StatusTypeDef status;
     /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
     /* Step 3: Configure a clock configuration enable command */
      Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 80006e6:	2301      	movs	r3, #1
 80006e8:	603b      	str	r3, [r7, #0]
      Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 80006ea:	2308      	movs	r3, #8
 80006ec:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber      = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
      status = HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 80006f6:	463b      	mov	r3, r7
 80006f8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80006fc:	4619      	mov	r1, r3
 80006fe:	481f      	ldr	r0, [pc, #124]	@ (800077c <MX_FMC_Init+0x128>)
 8000700:	f004 fd60 	bl	80051c4 <HAL_SDRAM_SendCommand>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 800070a:	2001      	movs	r0, #1
 800070c:	f000 fb74 	bl	8000df8 <HAL_Delay>
      /* Step 5: Configure a PALL (precharge all) command */
      Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000710:	2302      	movs	r3, #2
 8000712:	603b      	str	r3, [r7, #0]
      status = HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000714:	463b      	mov	r3, r7
 8000716:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800071a:	4619      	mov	r1, r3
 800071c:	4817      	ldr	r0, [pc, #92]	@ (800077c <MX_FMC_Init+0x128>)
 800071e:	f004 fd51 	bl	80051c4 <HAL_SDRAM_SendCommand>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      /* Step 6: Configure an Auto Refresh command */
      Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000728:	2303      	movs	r3, #3
 800072a:	603b      	str	r3, [r7, #0]
      Command.AutoRefreshNumber      = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
      status =HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000730:	463b      	mov	r3, r7
 8000732:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000736:	4619      	mov	r1, r3
 8000738:	4810      	ldr	r0, [pc, #64]	@ (800077c <MX_FMC_Init+0x128>)
 800073a:	f004 fd43 	bl	80051c4 <HAL_SDRAM_SendCommand>
 800073e:	4603      	mov	r3, r0
 8000740:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      /* Step 7: Program the external memory mode register */
      Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000744:	2304      	movs	r3, #4
 8000746:	603b      	str	r3, [r7, #0]
      Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000748:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800074c:	60fb      	str	r3, [r7, #12]
      status = HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 800074e:	463b      	mov	r3, r7
 8000750:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <MX_FMC_Init+0x128>)
 8000758:	f004 fd34 	bl	80051c4 <HAL_SDRAM_SendCommand>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
      /* Set the device refresh rate
       * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
               = [(64ms/4096) * 167MHz] - 20 = 2599.375 - 20 ~ 1542 */
      status = HAL_SDRAM_ProgramRefreshRate(&hsdram2, 2599);
 8000762:	f640 2127 	movw	r1, #2599	@ 0xa27
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_FMC_Init+0x128>)
 8000768:	f004 fd61 	bl	800522e <HAL_SDRAM_ProgramRefreshRate>
 800076c:	4603      	mov	r3, r0
 800076e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE END FMC_Init 2 */
}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	@ 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	24000088 	.word	0x24000088
 8000780:	52004140 	.word	0x52004140

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	@ 0x24
 8000788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	4b30      	ldr	r3, [pc, #192]	@ (800084c <MX_GPIO_Init+0xc8>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000790:	4a2e      	ldr	r2, [pc, #184]	@ (800084c <MX_GPIO_Init+0xc8>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800079a:	4b2c      	ldr	r3, [pc, #176]	@ (800084c <MX_GPIO_Init+0xc8>)
 800079c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007aa:	4a28      	ldr	r2, [pc, #160]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007b4:	4b25      	ldr	r3, [pc, #148]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d8:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007de:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f8:	4a14      	ldr	r2, [pc, #80]	@ (800084c <MX_GPIO_Init+0xc8>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_GPIO_Init+0xc8>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPION_CLK_ENABLE();
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_GPIO_Init+0xc8>)
 800080e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000812:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <MX_GPIO_Init+0xc8>)
 8000814:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000818:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_GPIO_Init+0xc8>)
 800081e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_GPIO_Init+0xc8>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <MX_GPIO_Init+0xc8>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000836:	4b05      	ldr	r3, [pc, #20]	@ (800084c <MX_GPIO_Init+0xc8>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3724      	adds	r7, #36	@ 0x24
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	58024400 	.word	0x58024400

08000850 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000862:	f000 fc95 	bl	8001190 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000866:	2301      	movs	r3, #1
 8000868:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800086a:	2300      	movs	r3, #0
 800086c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000872:	231f      	movs	r3, #31
 8000874:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000876:	2387      	movs	r3, #135	@ 0x87
 8000878:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800087a:	2300      	movs	r3, #0
 800087c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800087e:	2300      	movs	r3, #0
 8000880:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000882:	2301      	movs	r3, #1
 8000884:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000892:	463b      	mov	r3, r7
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fc99 	bl	80011cc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800089a:	2301      	movs	r3, #1
 800089c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 800089e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80008a2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80008a4:	231a      	movs	r3, #26
 80008a6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008b0:	2303      	movs	r3, #3
 80008b2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80008bc:	2301      	movs	r3, #1
 80008be:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008c4:	463b      	mov	r3, r7
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fc80 	bl	80011cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008cc:	2004      	movs	r0, #4
 80008ce:	f000 fc3d 	bl	800114c <HAL_MPU_Enable>

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008de:	b672      	cpsid	i
}
 80008e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e2:	bf00      	nop
 80008e4:	e7fd      	b.n	80008e2 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0a8      	sub	sp, #160	@ 0xa0
 80008ec:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	229c      	movs	r2, #156	@ 0x9c
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f008 f999 	bl	8008c2c <memset>

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY) != HAL_OK)
 80008fa:	2002      	movs	r0, #2
 80008fc:	f000 fe7e 	bl	80015fc <HAL_PWREx_ConfigSupply>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_MspInit+0x22>
  {
    /* Initialization error */
    Error_Handler();
 8000906:	f7ff ffe8 	bl	80008da <Error_Handler>

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SBS_CLK_ENABLE();
 800090a:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <HAL_MspInit+0x8c>)
 800090c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000910:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <HAL_MspInit+0x8c>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_MspInit+0x8c>)
 800091c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Enable the XSPIM_P2 interface */
  HAL_PWREx_EnableXSPIM2();
 8000924:	f000 fee4 	bl	80016f0 <HAL_PWREx_EnableXSPIM2>

  /* The CSI is used by the compensation cells and must be enabled before enabling the
     compensation cells.
     For more details refer to RM0477 [SBS I/O compensation cell management] chapter.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000928:	2310      	movs	r3, #16
 800092a:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f000 feec 	bl	8001710 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_MspInit+0x5a>
  {
    Error_Handler();
 800093e:	f7ff ffcc 	bl	80008da <Error_Handler>
  }

  /* Configure the compensation cell */
  HAL_SBS_ConfigCompensationCell(SBS_IO_XSPI2_CELL, SBS_IO_CELL_CODE, 0U, 0U);
 8000942:	2300      	movs	r3, #0
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2010      	movs	r0, #16
 800094a:	f000 fab3 	bl	8000eb4 <HAL_SBS_ConfigCompensationCell>

  /* Enable compensation cell */
  HAL_SBS_EnableCompensationCell(SBS_IO_XSPI2_CELL);
 800094e:	2010      	movs	r0, #16
 8000950:	f000 fa86 	bl	8000e60 <HAL_SBS_EnableCompensationCell>

  /* wait ready before enabled IO */
  while(HAL_SBS_GetCompensationCellReadyStatus(SBS_IO_XSPI2_CELL_READY) != 1U);
 8000954:	bf00      	nop
 8000956:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800095a:	f000 fa95 	bl	8000e88 <HAL_SBS_GetCompensationCellReadyStatus>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d1f8      	bne.n	8000956 <HAL_MspInit+0x6e>

  /* high speed low voltage config */
  HAL_SBS_EnableIOSpeedOptimize(SBS_IO_XSPI2_HSLV);
 8000964:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000968:	f000 faf8 	bl	8000f5c <HAL_SBS_EnableIOSpeedOptimize>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	37a0      	adds	r7, #160	@ 0xa0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58024400 	.word	0x58024400

08000978 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ac      	sub	sp, #176	@ 0xb0
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	2284      	movs	r2, #132	@ 0x84
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f008 f947 	bl	8008c2c <memset>
  if(hxspi->Instance==XSPI2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a29      	ldr	r2, [pc, #164]	@ (8000a48 <HAL_XSPI_MspInit+0xd0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d14a      	bne.n	8000a3e <HAL_XSPI_MspInit+0xc6>

  /* USER CODE END XSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
 80009a8:	2304      	movs	r3, #4
 80009aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_PLL2S;
 80009ac:	2340      	movs	r3, #64	@ 0x40
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 f925 	bl	8002c04 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_XSPI_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ff8b 	bl	80008da <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_XSPIM_CLK_ENABLE();
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 80009c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009ca:	4a20      	ldr	r2, [pc, #128]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 80009d6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_XSPI2_CLK_ENABLE();
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 80009e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 80009e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ea:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 80009f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPION_CLK_ENABLE();
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 80009fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009fe:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 8000a00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <HAL_XSPI_MspInit+0xd4>)
 8000a0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    PN6     ------> XSPIM_P2_CLK
    PN8     ------> XSPIM_P2_IO4
    PN4     ------> XSPIM_P2_IO2
    PN5     ------> XSPIM_P2_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_11
 8000a12:	f640 737f 	movw	r3, #3967	@ 0xf7f
 8000a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
 8000a32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <HAL_XSPI_MspInit+0xd8>)
 8000a3a:	f000 fc89 	bl	8001350 <HAL_GPIO_Init>

  /* USER CODE END XSPI2_MspInit 1 */

  }

}
 8000a3e:	bf00      	nop
 8000a40:	37b0      	adds	r7, #176	@ 0xb0
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	5200a000 	.word	0x5200a000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58023400 	.word	0x58023400

08000a54 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0a8      	sub	sp, #160	@ 0xa0
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000a5a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a6a:	4b63      	ldr	r3, [pc, #396]	@ (8000bf8 <HAL_FMC_MspInit+0x1a4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f040 80bd 	bne.w	8000bee <HAL_FMC_MspInit+0x19a>
    return;
  }
  FMC_Initialized = 1;
 8000a74:	4b60      	ldr	r3, [pc, #384]	@ (8000bf8 <HAL_FMC_MspInit+0x1a4>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2284      	movs	r2, #132	@ 0x84
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f008 f8d2 	bl	8008c2c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2R;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 f8b5 	bl	8002c04 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000aa0:	f7ff ff1b 	bl	80008da <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000aa4:	4b55      	ldr	r3, [pc, #340]	@ (8000bfc <HAL_FMC_MspInit+0x1a8>)
 8000aa6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000aaa:	4a54      	ldr	r2, [pc, #336]	@ (8000bfc <HAL_FMC_MspInit+0x1a8>)
 8000aac:	f043 0310 	orr.w	r3, r3, #16
 8000ab0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000ab4:	4b51      	ldr	r3, [pc, #324]	@ (8000bfc <HAL_FMC_MspInit+0x1a8>)
 8000ab6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  PC5   ------> FMC_A5
  PE9   ------> FMC_BA0
  PD9   ------> FMC_SDCLK
  PE10   ------> FMC_BA1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_1
 8000abe:	f643 03c7 	movw	r3, #14535	@ 0x38c7
 8000ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                          |GPIO_PIN_11|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ade:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4846      	ldr	r0, [pc, #280]	@ (8000c00 <HAL_FMC_MspInit+0x1ac>)
 8000ae6:	f000 fc33 	bl	8001350 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	230f      	movs	r3, #15
 8000aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b02:	230c      	movs	r3, #12
 8000b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b08:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	483d      	ldr	r0, [pc, #244]	@ (8000c04 <HAL_FMC_MspInit+0x1b0>)
 8000b10:	f000 fc1e 	bl	8001350 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_4
 8000b14:	23f8      	movs	r3, #248	@ 0xf8
 8000b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000b36:	4619      	mov	r1, r3
 8000b38:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <HAL_FMC_MspInit+0x1b4>)
 8000b3a:	f000 fc09 	bl	8001350 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8
 8000b3e:	f240 3383 	movw	r3, #899	@ 0x383
 8000b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000b62:	4619      	mov	r1, r3
 8000b64:	4829      	ldr	r0, [pc, #164]	@ (8000c0c <HAL_FMC_MspInit+0x1b8>)
 8000b66:	f000 fbf3 	bl	8001350 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_10
 8000b6a:	f641 7307 	movw	r3, #7943	@ 0x1f07
 8000b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                          |GPIO_PIN_8|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b84:	230c      	movs	r3, #12
 8000b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481f      	ldr	r0, [pc, #124]	@ (8000c10 <HAL_FMC_MspInit+0x1bc>)
 8000b92:	f000 fbdd 	bl	8001350 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b96:	233f      	movs	r3, #63	@ 0x3f
 8000b98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4816      	ldr	r0, [pc, #88]	@ (8000c14 <HAL_FMC_MspInit+0x1c0>)
 8000bbc:	f000 fbc8 	bl	8001350 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bc0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Alternate = GPIO_AF14_FMC;
 8000bda:	230e      	movs	r3, #14
 8000bdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <HAL_FMC_MspInit+0x1ac>)
 8000be8:	f000 fbb2 	bl	8001350 <HAL_GPIO_Init>
 8000bec:	e000      	b.n	8000bf0 <HAL_FMC_MspInit+0x19c>
    return;
 8000bee:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000bf0:	37a0      	adds	r7, #160	@ 0xa0
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	240000bc 	.word	0x240000bc
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58021000 	.word	0x58021000
 8000c04:	58021400 	.word	0x58021400
 8000c08:	58020400 	.word	0x58020400
 8000c0c:	58020c00 	.word	0x58020c00
 8000c10:	58020000 	.word	0x58020000
 8000c14:	58020800 	.word	0x58020800

08000c18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000c20:	f7ff ff18 	bl	8000a54 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  FMC_WRITE();
 8000c40:	f7ff fb78 	bl	8000334 <FMC_WRITE>
  {
 8000c44:	bf00      	nop
 8000c46:	e7fb      	b.n	8000c40 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 f897 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <SystemInit+0x24>)
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <SystemInit+0x28>)
 8000c98:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SystemInit+0x24>)
 8000c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <SystemInit+0x24>)
 8000ca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	08000000 	.word	0x08000000

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff ffe6 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f007 ffa7 	bl	8008c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fb4b 	bl	8000388 <main>

08000cf2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cf8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cfc:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 8000d00:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 8000d04:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 8000d08:	240002f8 	.word	0x240002f8

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>

08000d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f9e5 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f000 f80e 	bl	8000d40 <HAL_InitTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e001      	b.n	8000d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d30:	f7ff fdda 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d4c:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d023      	beq.n	8000d9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <HAL_InitTick+0x70>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f9e1 	bl	8001132 <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10f      	bne.n	8000d96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d809      	bhi.n	8000d90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f9bb 	bl	80010fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d88:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <HAL_InitTick+0x74>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e007      	b.n	8000da0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e004      	b.n	8000da0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e001      	b.n	8000da0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000008 	.word	0x24000008
 8000db0:	24000000 	.word	0x24000000
 8000db4:	24000004 	.word	0x24000004

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000008 	.word	0x24000008
 8000ddc:	240000c0 	.word	0x240000c0

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	240000c0 	.word	0x240000c0

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000008 	.word	0x24000008

08000e40 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_SuspendTick+0x1c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_SuspendTick+0x1c>)
 8000e4a:	f023 0302 	bic.w	r3, r3, #2
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_SBS_EnableCompensationCell>:
  *            @arg SBS_IO_XSPI1_CELL Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL Compensation cell for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableCompensationCell(uint32_t Selection)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_SBS_EnableCompensationCell+0x24>)
 8000e6a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000e6e:	4905      	ldr	r1, [pc, #20]	@ (8000e84 <HAL_SBS_EnableCompensationCell+0x24>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	58000400 	.word	0x58000400

08000e88 <HAL_SBS_GetCompensationCellReadyStatus>:
  *            @arg SBS_IO_XSPI1_CELL_READY Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL_READY Compensation cell for the I/O of the XSPI2
  * @retval Ready status (1 or 0)
  */
uint32_t HAL_SBS_GetCompensationCellReadyStatus(uint32_t Selection)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL_READY(Selection));

  return (((SBS->CCCSR & Selection) == 0U) ? 0UL : 1UL);
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <HAL_SBS_GetCompensationCellReadyStatus+0x28>)
 8000e92:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	58000400 	.word	0x58000400

08000eb4 <HAL_SBS_ConfigCompensationCell>:
  * @param  PmosValue In case SBS_IO_REGISTER_CODE is selected, it  provides the Pmos value
  *                   to apply in range 0 to 15 else this parameter is not used
  * @retval None
  */
void HAL_SBS_ConfigCompensationCell(uint32_t Selection, uint32_t Code, uint32_t NmosValue, uint32_t PmosValue)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));
  assert_param(IS_SBS_IO_COMPENSATION_CODE(Code));

  if (Code == SBS_IO_REGISTER_CODE)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d121      	bne.n	8000f0c <HAL_SBS_ConfigCompensationCell+0x58>
  {
    /* Check the parameters */
    assert_param(IS_SBS_IO_COMPENSATION_CELL_NMOS_VALUE(NmosValue));
    assert_param(IS_SBS_IO_COMPENSATION_CELL_PMOS_VALUE(PmosValue));

    offset = ((Selection == SBS_IO_ANALOG_CELL) ? 0U : ((Selection == SBS_IO_XSPI1_CELL) ? 8U : 16U));
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d006      	beq.n	8000edc <HAL_SBS_ConfigCompensationCell+0x28>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d101      	bne.n	8000ed8 <HAL_SBS_ConfigCompensationCell+0x24>
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	e002      	b.n	8000ede <HAL_SBS_ConfigCompensationCell+0x2a>
 8000ed8:	2310      	movs	r3, #16
 8000eda:	e000      	b.n	8000ede <HAL_SBS_ConfigCompensationCell+0x2a>
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]

    MODIFY_REG(SBS->CCSWVALR, (0xFFU << offset), ((NmosValue << offset) | (PmosValue << (offset + 4U))));
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000ee2:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8000ee6:	21ff      	movs	r1, #255	@ 0xff
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	4099      	lsls	r1, r3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	3304      	adds	r3, #4
 8000efc:	6838      	ldr	r0, [r7, #0]
 8000efe:	fa00 f303 	lsl.w	r3, r0, r3
 8000f02:	430b      	orrs	r3, r1
 8000f04:	4914      	ldr	r1, [pc, #80]	@ (8000f58 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	f8c1 3118 	str.w	r3, [r1, #280]	@ 0x118
  }

  MODIFY_REG(SBS->CCCSR, (Selection << 1U), (Code << (POSITION_VAL(Selection) + 1U)));
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000f0e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa93 f3a3 	rbit	r3, r3
 8000f24:	613b      	str	r3, [r7, #16]
  return result;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_SBS_ConfigCompensationCell+0x80>
    return 32U;
 8000f30:	2320      	movs	r3, #32
 8000f32:	e003      	b.n	8000f3c <HAL_SBS_ConfigCompensationCell+0x88>
  return __builtin_clz(value);
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4904      	ldr	r1, [pc, #16]	@ (8000f58 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000f4c:	bf00      	nop
 8000f4e:	3724      	adds	r7, #36	@ 0x24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	58000400 	.word	0x58000400

08000f5c <HAL_SBS_EnableIOSpeedOptimize>:
  *            @arg SBS_IO_XSPI1_HSLV High speed at low voltage for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_HSLV High speed at low voltage for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableIOSpeedOptimize(uint32_t Selection)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_IOHSLV(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000f66:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000f6a:	4905      	ldr	r1, [pc, #20]	@ (8000f80 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	58000400 	.word	0x58000400

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	05fa0000 	.word	0x05fa0000

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	@ 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff47 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff5e 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff90 	bl	800103c <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5f 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffb2 	bl	80010a4 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001154:	f3bf 8f5f 	dmb	sy
}
 8001158:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 800115a:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <HAL_MPU_Enable+0x3c>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_MPU_Enable+0x40>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_MPU_Enable+0x40>)
 800116a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116e:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001170:	f3bf 8f4f 	dsb	sy
}
 8001174:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001176:	f3bf 8f6f 	isb	sy
}
 800117a:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed90 	.word	0xe000ed90
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001194:	f3bf 8f5f 	dmb	sy
}
 8001198:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_MPU_Disable+0x34>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <HAL_MPU_Disable+0x34>)
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_MPU_Disable+0x38>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ac:	f3bf 8f4f 	dsb	sy
}
 80011b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b2:	f3bf 8f6f 	isb	sy
}
 80011b6:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	e000ed90 	.word	0xe000ed90

080011cc <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	785a      	ldrb	r2, [r3, #1]
 80011d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <HAL_MPU_ConfigRegion+0x88>)
 80011da:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <HAL_MPU_ConfigRegion+0x88>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <HAL_MPU_ConfigRegion+0x88>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <HAL_MPU_ConfigRegion+0x88>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <HAL_MPU_ConfigRegion+0x88>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 80011f4:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <HAL_MPU_ConfigRegion+0x88>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7b1b      	ldrb	r3, [r3, #12]
 8001200:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7adb      	ldrb	r3, [r3, #11]
 8001206:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001208:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8001210:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b5b      	ldrb	r3, [r3, #13]
 8001216:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8001218:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7b9b      	ldrb	r3, [r3, #14]
 800121e:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8001220:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7bdb      	ldrb	r3, [r3, #15]
 8001226:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8001228:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7a5b      	ldrb	r3, [r3, #9]
 800122e:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8001230:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7a1b      	ldrb	r3, [r3, #8]
 8001236:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8001238:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8001242:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001244:	6113      	str	r3, [r2, #16]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed90 	.word	0xe000ed90

08001258 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001260:	f7ff fdbe 	bl	8000de0 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e06b      	b.n	8001348 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d008      	beq.n	800128e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2220      	movs	r2, #32
 8001280:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e05c      	b.n	8001348 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0204 	orr.w	r2, r2, #4
 800129c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012a6:	e020      	b.n	80012ea <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80012a8:	f7ff fd9a 	bl	8000de0 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d919      	bls.n	80012ea <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012da:	2201      	movs	r2, #1
 80012dc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e02e      	b.n	8001348 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0d7      	beq.n	80012a8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0202 	orr.w	r2, r2, #2
 8001306:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2204      	movs	r2, #4
 800130c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001318:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001332:	2201      	movs	r2, #1
 8001334:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e139      	b.n	80015d4 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 812b 	beq.w	80015ce <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_GPIO_Init+0x40>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	f003 0201 	and.w	r2, r3, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d017      	beq.n	800142e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d123      	bne.n	8001482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	6939      	ldr	r1, [r7, #16]
 800147e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0203 	and.w	r2, r3, #3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8085 	beq.w	80015ce <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 80014c4:	4a4b      	ldr	r2, [pc, #300]	@ (80015f4 <HAL_GPIO_Init+0x2a4>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	334c      	adds	r3, #76	@ 0x4c
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0a9a      	lsrs	r2, r3, #10
 80014ec:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <HAL_GPIO_Init+0x2a8>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8001500:	493c      	ldr	r1, [pc, #240]	@ (80015f4 <HAL_GPIO_Init+0x2a4>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	334c      	adds	r3, #76	@ 0x4c
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001534:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa22 f303 	lsr.w	r3, r2, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f47f aebe 	bne.w	8001360 <HAL_GPIO_Init+0x10>
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	58000400 	.word	0x58000400
 80015f8:	0029ff7f 	.word	0x0029ff7f

080015fc <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <HAL_PWREx_ConfigSupply+0xa0>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	2b06      	cmp	r3, #6
 800160e:	d00a      	beq.n	8001626 <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <HAL_PWREx_ConfigSupply+0xa0>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e038      	b.n	8001694 <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e036      	b.n	8001694 <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001626:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <HAL_PWREx_ConfigSupply+0xa0>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f023 021f 	bic.w	r2, r3, #31
 800162e:	491b      	ldr	r1, [pc, #108]	@ (800169c <HAL_PWREx_ConfigSupply+0xa0>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001636:	f7ff fbd3 	bl	8000de0 <HAL_GetTick>
 800163a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 800163c:	e009      	b.n	8001652 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 800163e:	f7ff fbcf 	bl	8000de0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800164c:	d901      	bls.n	8001652 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e020      	b.n	8001694 <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_PWREx_ConfigSupply+0xa0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0ef      	beq.n	800163e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b1e      	cmp	r3, #30
 8001662:	d002      	beq.n	800166a <HAL_PWREx_ConfigSupply+0x6e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b1d      	cmp	r3, #29
 8001668:	d113      	bne.n	8001692 <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 800166a:	f7ff fbb9 	bl	8000de0 <HAL_GetTick>
 800166e:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001670:	e009      	b.n	8001686 <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001672:	f7ff fbb5 	bl	8000de0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001680:	d901      	bls.n	8001686 <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e006      	b.n	8001694 <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_PWREx_ConfigSupply+0xa0>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ef      	beq.n	8001672 <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58024800 	.word	0x58024800

080016a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f023 0201 	bic.w	r2, r3, #1
 80016b0:	490e      	ldr	r1, [pc, #56]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff fb92 	bl	8000de0 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 80016be:	e009      	b.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016c0:	f7ff fb8e 	bl	8000de0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ce:	d901      	bls.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e006      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ef      	beq.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	58024800 	.word	0x58024800

080016f0 <HAL_PWREx_EnableXSPIM2>:
  * @note   The XSPIM_P2 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM2(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM2);
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_PWREx_EnableXSPIM2+0x1c>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_PWREx_EnableXSPIM2+0x1c>)
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	58024800 	.word	0x58024800

08001710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e328      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001722:	4b97      	ldr	r3, [pc, #604]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800172a:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172c:	4b94      	ldr	r3, [pc, #592]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 8001736:	4b92      	ldr	r3, [pc, #584]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 800173e:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 809c 	beq.w	8001886 <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x50>
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f040 808e 	bne.w	8001886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e302      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x76>
 8001778:	4b81      	ldr	r3, [pc, #516]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a80      	ldr	r2, [pc, #512]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800177e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e058      	b.n	8001838 <HAL_RCC_OscConfig+0x128>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d112      	bne.n	80017b4 <HAL_RCC_OscConfig+0xa4>
 800178e:	4b7c      	ldr	r3, [pc, #496]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7b      	ldr	r2, [pc, #492]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a78      	ldr	r2, [pc, #480]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017a0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b76      	ldr	r3, [pc, #472]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a75      	ldr	r2, [pc, #468]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e041      	b.n	8001838 <HAL_RCC_OscConfig+0x128>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017bc:	d112      	bne.n	80017e4 <HAL_RCC_OscConfig+0xd4>
 80017be:	4b70      	ldr	r3, [pc, #448]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a69      	ldr	r2, [pc, #420]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e029      	b.n	8001838 <HAL_RCC_OscConfig+0x128>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 80017ec:	d112      	bne.n	8001814 <HAL_RCC_OscConfig+0x104>
 80017ee:	4b64      	ldr	r3, [pc, #400]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a63      	ldr	r2, [pc, #396]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b61      	ldr	r3, [pc, #388]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a60      	ldr	r2, [pc, #384]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001800:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b5e      	ldr	r3, [pc, #376]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5d      	ldr	r2, [pc, #372]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e011      	b.n	8001838 <HAL_RCC_OscConfig+0x128>
 8001814:	4b5a      	ldr	r3, [pc, #360]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a59      	ldr	r2, [pc, #356]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800181a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b57      	ldr	r3, [pc, #348]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a56      	ldr	r2, [pc, #344]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b54      	ldr	r3, [pc, #336]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a53      	ldr	r2, [pc, #332]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001832:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fad2 	bl	8000de0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d019      	beq.n	800187a <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001848:	f7ff faca 	bl	8000de0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e28c      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	4b49      	ldr	r3, [pc, #292]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x138>
 8001866:	e00e      	b.n	8001886 <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001868:	f7ff faba 	bl	8000de0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e27c      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187a:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 809e 	beq.w	80019d0 <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x196>
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d047      	beq.n	8001930 <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d144      	bne.n	8001930 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e260      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 80018b2:	4b33      	ldr	r3, [pc, #204]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0318 	and.w	r3, r3, #24
 80018ba:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_OscConfig+0x1c6>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e24e      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0219 	bic.w	r2, r3, #25
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	4a26      	ldr	r2, [pc, #152]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	4a21      	ldr	r2, [pc, #132]	@ (8001984 <HAL_RCC_OscConfig+0x274>)
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a21      	ldr	r2, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x278>)
 8001904:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <HAL_RCC_OscConfig+0x27c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa18 	bl	8000d40 <HAL_InitTick>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e22c      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	061b      	lsls	r3, r3, #24
 8001928:	4915      	ldr	r1, [pc, #84]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
 800192e:	e04f      	b.n	80019d0 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d032      	beq.n	800199e <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 0219 	bic.w	r2, r3, #25
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68d9      	ldr	r1, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	430b      	orrs	r3, r1
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	4908      	ldr	r1, [pc, #32]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fa3c 	bl	8000de0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196a:	e011      	b.n	8001990 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800196c:	f7ff fa38 	bl	8000de0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d90a      	bls.n	8001990 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1fa      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
 800197e:	bf00      	nop
 8001980:	58024400 	.word	0x58024400
 8001984:	03d09000 	.word	0x03d09000
 8001988:	24000000 	.word	0x24000000
 800198c:	24000004 	.word	0x24000004
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001990:	4b95      	ldr	r3, [pc, #596]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0e7      	beq.n	800196c <HAL_RCC_OscConfig+0x25c>
 800199c:	e018      	b.n	80019d0 <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199e:	4b92      	ldr	r3, [pc, #584]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a91      	ldr	r2, [pc, #580]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa19 	bl	8000de0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fa15 	bl	8000de0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1d7      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c4:	4b88      	ldr	r3, [pc, #544]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d045      	beq.n	8001a68 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x2de>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d138      	bne.n	8001a68 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1bc      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a02:	4b79      	ldr	r3, [pc, #484]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a78      	ldr	r2, [pc, #480]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f9e7 	bl	8000de0 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001a16:	f7ff f9e3 	bl	8000de0 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1a5      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a28:	4b6f      	ldr	r3, [pc, #444]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x306>
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a36:	4b6c      	ldr	r3, [pc, #432]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6b      	ldr	r2, [pc, #428]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f9cd 	bl	8000de0 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f9c9 	bl	8000de0 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e18b      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001a5c:	4b62      	ldr	r3, [pc, #392]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d036      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d019      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a80:	4a59      	ldr	r2, [pc, #356]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f9aa 	bl	8000de0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a90:	f7ff f9a6 	bl	8000de0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e168      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa2:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x380>
 8001aae:	e018      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f990 	bl	8000de0 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f98c 	bl	8000de0 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e14e      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad6:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d036      	beq.n	8001b5c <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001af6:	4b3c      	ldr	r3, [pc, #240]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a3b      	ldr	r2, [pc, #236]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001afc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b02:	f7ff f96d 	bl	8000de0 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001b0a:	f7ff f969 	bl	8000de0 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e12b      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b1c:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3fa>
 8001b28:	e018      	b.n	8001b5c <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f953 	bl	8000de0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001b3e:	f7ff f94f 	bl	8000de0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e111      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b50:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 809b 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bec <HAL_RCC_OscConfig+0x4dc>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b74:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d106      	bne.n	8001b8c <HAL_RCC_OscConfig+0x47c>
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8a:	e05a      	b.n	8001c42 <HAL_RCC_OscConfig+0x532>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d112      	bne.n	8001bba <HAL_RCC_OscConfig+0x4aa>
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a13      	ldr	r2, [pc, #76]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba4:	4a10      	ldr	r2, [pc, #64]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001bb2:	f023 0304 	bic.w	r3, r3, #4
 8001bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb8:	e043      	b.n	8001c42 <HAL_RCC_OscConfig+0x532>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4e0>
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bda:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bde:	4a02      	ldr	r2, [pc, #8]	@ (8001be8 <HAL_RCC_OscConfig+0x4d8>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be6:	e02c      	b.n	8001c42 <HAL_RCC_OscConfig+0x532>
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58024800 	.word	0x58024800
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b85      	cmp	r3, #133	@ 0x85
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x50e>
 8001bf8:	4b60      	ldr	r3, [pc, #384]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	4a5f      	ldr	r2, [pc, #380]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c04:	4b5d      	ldr	r3, [pc, #372]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a5c      	ldr	r2, [pc, #368]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	4b5a      	ldr	r3, [pc, #360]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a59      	ldr	r2, [pc, #356]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1c:	e011      	b.n	8001c42 <HAL_RCC_OscConfig+0x532>
 8001c1e:	4b57      	ldr	r3, [pc, #348]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c22:	4a56      	ldr	r2, [pc, #344]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c2a:	4b54      	ldr	r3, [pc, #336]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2e:	4a53      	ldr	r2, [pc, #332]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c36:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3a:	4a50      	ldr	r2, [pc, #320]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c40:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d015      	beq.n	8001c76 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7ff f8c9 	bl	8000de0 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff f8c5 	bl	8000de0 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e085      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c68:	4b44      	ldr	r3, [pc, #272]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ee      	beq.n	8001c52 <HAL_RCC_OscConfig+0x542>
 8001c74:	e014      	b.n	8001ca0 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff f8b3 	bl	8000de0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff f8af 	bl	8000de0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e06f      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c94:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d042      	beq.n	8001d2e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b18      	cmp	r3, #24
 8001cac:	d131      	bne.n	8001d12 <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e05c      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 8001cba:	4b30      	ldr	r3, [pc, #192]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cbe:	08db      	lsrs	r3, r3, #3
 8001cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cc4:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d02e      	beq.n	8001d2e <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	4a29      	ldr	r2, [pc, #164]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cdc:	f7ff f880 	bl	8000de0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001ce2:	bf00      	nop
 8001ce4:	f7ff f87c 	bl	8000de0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d0f9      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001cf0:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_RCC_OscConfig+0x670>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	491f      	ldr	r1, [pc, #124]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_RCC_OscConfig+0x66c>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001d10:	e00d      	b.n	8001d2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3324      	adds	r3, #36	@ 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 fc88 	bl	8002634 <RCC_PLL_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e022      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	334c      	adds	r3, #76	@ 0x4c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f000 fc79 	bl	8002634 <RCC_PLL_Config>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e013      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3374      	adds	r3, #116	@ 0x74
 8001d60:	4619      	mov	r1, r3
 8001d62:	2002      	movs	r0, #2
 8001d64:	f000 fc66 	bl	8002634 <RCC_PLL_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	ffff0007 	.word	0xffff0007

08001d84 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e182      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b8a      	ldr	r3, [pc, #552]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b87      	ldr	r3, [pc, #540]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001dae:	4985      	ldr	r1, [pc, #532]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b83      	ldr	r3, [pc, #524]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e16a      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d908      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001de4:	4b78      	ldr	r3, [pc, #480]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f023 0207 	bic.w	r2, r3, #7
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	4975      	ldr	r1, [pc, #468]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	4b70      	ldr	r3, [pc, #448]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d908      	bls.n	8001e24 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e12:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	496a      	ldr	r1, [pc, #424]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	4b64      	ldr	r3, [pc, #400]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e40:	4b61      	ldr	r3, [pc, #388]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	495e      	ldr	r1, [pc, #376]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	4b59      	ldr	r3, [pc, #356]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8001e6e:	4b56      	ldr	r3, [pc, #344]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4953      	ldr	r1, [pc, #332]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f023 020f 	bic.w	r2, r3, #15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4947      	ldr	r1, [pc, #284]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d055      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001eba:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f023 020f 	bic.w	r2, r3, #15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4940      	ldr	r1, [pc, #256]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d121      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0dc      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001eec:	4b36      	ldr	r3, [pc, #216]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d115      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0d0      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f04:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0c4      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f14:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0bc      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f24:	4b28      	ldr	r3, [pc, #160]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4925      	ldr	r1, [pc, #148]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f36:	f7fe ff53 	bl	8000de0 <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3e:	f7fe ff4f 	bl	8000de0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0a4      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f54:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d1eb      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d208      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f023 020f 	bic.w	r2, r3, #15
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	490e      	ldr	r1, [pc, #56]	@ (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d214      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001faa:	4906      	ldr	r1, [pc, #24]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e06c      	b.n	800209e <HAL_RCC_ClockConfig+0x31a>
 8001fc4:	52002000 	.word	0x52002000
 8001fc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	492c      	ldr	r1, [pc, #176]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002012:	429a      	cmp	r2, r3
 8002014:	d208      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4921      	ldr	r1, [pc, #132]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8002024:	4313      	orrs	r3, r2
 8002026:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002040:	429a      	cmp	r2, r3
 8002042:	d208      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8002044:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4915      	ldr	r1, [pc, #84]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8002052:	4313      	orrs	r3, r2
 8002054:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800206e:	429a      	cmp	r2, r3
 8002070:	d208      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	490a      	ldr	r1, [pc, #40]	@ (80020a8 <HAL_RCC_ClockConfig+0x324>)
 8002080:	4313      	orrs	r3, r2
 8002082:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8002084:	f000 f816 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002088:	4603      	mov	r3, r0
 800208a:	4a08      	ldr	r2, [pc, #32]	@ (80020ac <HAL_RCC_ClockConfig+0x328>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_RCC_ClockConfig+0x32c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fe54 	bl	8000d40 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
 800209a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800209c:	7afb      	ldrb	r3, [r7, #11]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	58024400 	.word	0x58024400
 80020ac:	24000000 	.word	0x24000000
 80020b0:	24000004 	.word	0x24000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ba:	4baa      	ldr	r3, [pc, #680]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020c2:	2b18      	cmp	r3, #24
 80020c4:	f200 8136 	bhi.w	8002334 <HAL_RCC_GetSysClockFreq+0x280>
 80020c8:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	08002135 	.word	0x08002135
 80020d4:	08002335 	.word	0x08002335
 80020d8:	08002335 	.word	0x08002335
 80020dc:	08002335 	.word	0x08002335
 80020e0:	08002335 	.word	0x08002335
 80020e4:	08002335 	.word	0x08002335
 80020e8:	08002335 	.word	0x08002335
 80020ec:	08002335 	.word	0x08002335
 80020f0:	0800215b 	.word	0x0800215b
 80020f4:	08002335 	.word	0x08002335
 80020f8:	08002335 	.word	0x08002335
 80020fc:	08002335 	.word	0x08002335
 8002100:	08002335 	.word	0x08002335
 8002104:	08002335 	.word	0x08002335
 8002108:	08002335 	.word	0x08002335
 800210c:	08002335 	.word	0x08002335
 8002110:	08002161 	.word	0x08002161
 8002114:	08002335 	.word	0x08002335
 8002118:	08002335 	.word	0x08002335
 800211c:	08002335 	.word	0x08002335
 8002120:	08002335 	.word	0x08002335
 8002124:	08002335 	.word	0x08002335
 8002128:	08002335 	.word	0x08002335
 800212c:	08002335 	.word	0x08002335
 8002130:	08002167 	.word	0x08002167
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002134:	4b8b      	ldr	r3, [pc, #556]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002140:	4b88      	ldr	r3, [pc, #544]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	4a87      	ldr	r2, [pc, #540]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8002152:	e0f2      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
      break;
 8002158:	e0ef      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800215a:	4b84      	ldr	r3, [pc, #528]	@ (800236c <HAL_RCC_GetSysClockFreq+0x2b8>)
 800215c:	623b      	str	r3, [r7, #32]
      break;
 800215e:	e0ec      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002160:	4b83      	ldr	r3, [pc, #524]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x2bc>)
 8002162:	623b      	str	r3, [r7, #32]
      break;
 8002164:	e0e9      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002166:	4b7f      	ldr	r3, [pc, #508]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8002170:	4b7c      	ldr	r3, [pc, #496]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800217a:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800217c:	4b79      	ldr	r3, [pc, #484]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800217e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8002186:	4b77      	ldr	r3, [pc, #476]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219e:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80c2 	beq.w	800232e <HAL_RCC_GetSysClockFreq+0x27a>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d064      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x1c6>
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f200 8083 	bhi.w	80022be <HAL_RCC_GetSysClockFreq+0x20a>
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x112>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d038      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x182>
 80021c4:	e07b      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80021c6:	4b67      	ldr	r3, [pc, #412]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d02d      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80021d2:	4b64      	ldr	r3, [pc, #400]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	08db      	lsrs	r3, r3, #3
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	4a62      	ldr	r2, [pc, #392]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021fc:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800220c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002210:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800221c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002228:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 800222c:	e069      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002234:	e065      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002240:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002378 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002248:	4b46      	ldr	r3, [pc, #280]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002258:	ed97 6a04 	vldr	s12, [r7, #16]
 800225c:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800226c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002274:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002278:	e043      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002284:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800237c <HAL_RCC_GetSysClockFreq+0x2c8>
 8002288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228c:	4b35      	ldr	r3, [pc, #212]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229c:	ed97 6a04 	vldr	s12, [r7, #16]
 80022a0:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2c0>
 80022a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 80022bc:	e021      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002378 <HAL_RCC_GetSysClockFreq+0x2c4>
 80022cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d0:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e0:	ed97 6a04 	vldr	s12, [r7, #16]
 80022e4:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2c0>
 80022e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002300:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8002302:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	0a5b      	lsrs	r3, r3, #9
 8002308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800230c:	3301      	adds	r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800231a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800231e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002326:	ee17 3a90 	vmov	r3, s15
 800232a:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800232c:	e005      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
      break;
 8002332:	e002      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_RCC_GetSysClockFreq+0x2b8>)
 8002336:	623b      	str	r3, [r7, #32]
      break;
 8002338:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b07      	cmp	r3, #7
 8002348:	d905      	bls.n	8002356 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3b07      	subs	r3, #7
 800234e:	6a3a      	ldr	r2, [r7, #32]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002356:	6a3b      	ldr	r3, [r7, #32]
}
 8002358:	4618      	mov	r0, r3
 800235a:	372c      	adds	r7, #44	@ 0x2c
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	58024400 	.word	0x58024400
 8002368:	03d09000 	.word	0x03d09000
 800236c:	003d0900 	.word	0x003d0900
 8002370:	016e3600 	.word	0x016e3600
 8002374:	46000000 	.word	0x46000000
 8002378:	4a742400 	.word	0x4a742400
 800237c:	4bb71b00 	.word	0x4bb71b00

08002380 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8002386:	4a10      	ldr	r2, [pc, #64]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x48>)
 8002388:	463b      	mov	r3, r7
 800238a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800238e:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8002392:	f7ff fe8f 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002396:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <HAL_RCC_GetHCLKFreq+0x4c>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b07      	cmp	r3, #7
 80023a6:	d909      	bls.n	80023bc <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3b08      	subs	r3, #8
 80023ac:	3310      	adds	r3, #16
 80023ae:	443b      	add	r3, r7
 80023b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023b4:	461a      	mov	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	40d3      	lsrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08008cb8 	.word	0x08008cb8
 80023cc:	58024400 	.word	0x58024400

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80023d6:	f7ff ffd3 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023da:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_GetPCLK1Freq+0x34>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d905      	bls.n	80023f8 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	3b03      	subs	r3, #3
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	58024400 	.word	0x58024400

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 800240e:	f7ff ffb7 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8002412:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_GetPCLK2Freq+0x34>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d905      	bls.n	8002432 <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	3b03      	subs	r3, #3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002432:	687b      	ldr	r3, [r7, #4]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	58024400 	.word	0x58024400

08002440 <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002446:	f7ff ff9b 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800244a:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_RCC_GetPCLK4Freq+0x34>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d905      	bls.n	800246a <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3b03      	subs	r3, #3
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 800246a:	687b      	ldr	r3, [r7, #4]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400

08002478 <HAL_RCC_GetPLL1QFreq>:
/**
  * @brief  Return the PLL1Q frequency.
  * @retval PLL1Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1QFreq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL1Q divider */
  pllq = ((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVQ) >> RCC_PLL1DIVR1_DIVQ_Pos) + 1U;
 800247e:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_RCC_GetPLL1QFreq+0x28>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002488:	3301      	adds	r3, #1
 800248a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1Q one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllq);
 800248c:	f000 fa28 	bl	80028e0 <RCC_PLL1_GetVCOOutputFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	58024400 	.word	0x58024400

080024a4 <HAL_RCC_GetPLL2PFreq>:
/**
  * @brief  Return the PLL2P frequency.
  * @retval PLL2P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2PFreq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL2P divider */
  pllp = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVP) >> RCC_PLL2DIVR1_DIVP_Pos) + 1U;
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_RCC_GetPLL2PFreq+0x28>)
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	0a5b      	lsrs	r3, r3, #9
 80024b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b4:	3301      	adds	r3, #1
 80024b6:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2P one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllp);
 80024b8:	f000 fa98 	bl	80029ec <RCC_PLL2_GetVCOOutputFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	58024400 	.word	0x58024400

080024d0 <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 80024d6:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <HAL_RCC_GetPLL2QFreq+0x28>)
 80024d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024e0:	3301      	adds	r3, #1
 80024e2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 80024e4:	f000 fa82 	bl	80029ec <RCC_PLL2_GetVCOOutputFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024400 	.word	0x58024400

080024fc <HAL_RCC_GetPLL2RFreq>:
/**
  * @brief  Return the PLL2R frequency.
  * @retval PLL2R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2RFreq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL2R divider */
  pllr = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVR) >> RCC_PLL2DIVR1_DIVR_Pos) + 1U;
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_RCC_GetPLL2RFreq+0x28>)
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	0e1b      	lsrs	r3, r3, #24
 8002508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800250c:	3301      	adds	r3, #1
 800250e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllr);
 8002510:	f000 fa6c 	bl	80029ec <RCC_PLL2_GetVCOOutputFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	58024400 	.word	0x58024400

08002528 <HAL_RCC_GetPLL2SFreq>:
/**
  * @brief  Return the PLL2S frequency.
  * @retval PLL2S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2SFreq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL2S divider */
  plls = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVS) >> RCC_PLL2DIVR2_DIVS_Pos) + 1U;
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_RCC_GetPLL2SFreq+0x28>)
 8002530:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	3301      	adds	r3, #1
 800253a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / plls);
 800253c:	f000 fa56 	bl	80029ec <RCC_PLL2_GetVCOOutputFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	58024400 	.word	0x58024400

08002554 <HAL_RCC_GetPLL2TFreq>:
/**
  * @brief  Return the PLL2T frequency.
  * @retval PLL2T frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2TFreq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  uint32_t pllt;

  /* PLL2T divider */
  pllt = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVT) >> RCC_PLL2DIVR2_DIVT_Pos) + 1U;
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_RCC_GetPLL2TFreq+0x2c>)
 800255c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	3301      	adds	r3, #1
 8002568:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2T one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllt);
 800256a:	f000 fa3f 	bl	80029ec <RCC_PLL2_GetVCOOutputFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	58024400 	.word	0x58024400

08002584 <HAL_RCC_GetPLL3PFreq>:
/**
  * @brief  Return the PLL3P frequency.
  * @retval PLL3P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3PFreq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL3P divider */
  pllp = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVP) >> RCC_PLL3DIVR1_DIVP_Pos) + 1U;
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <HAL_RCC_GetPLL3PFreq+0x28>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	0a5b      	lsrs	r3, r3, #9
 8002590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002594:	3301      	adds	r3, #1
 8002596:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3P one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllp);
 8002598:	f000 faae 	bl	8002af8 <RCC_PLL3_GetVCOOutputFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	58024400 	.word	0x58024400

080025b0 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_RCC_GetPLL3QFreq+0x28>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025c0:	3301      	adds	r3, #1
 80025c2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 80025c4:	f000 fa98 	bl	8002af8 <RCC_PLL3_GetVCOOutputFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	58024400 	.word	0x58024400

080025dc <HAL_RCC_GetPLL3RFreq>:
/**
  * @brief  Return the PLL3R frequency.
  * @retval PLL3R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3RFreq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL3R divider */
  pllr = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVR) >> RCC_PLL3DIVR1_DIVR_Pos) + 1U;
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_RCC_GetPLL3RFreq+0x28>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	0e1b      	lsrs	r3, r3, #24
 80025e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025ec:	3301      	adds	r3, #1
 80025ee:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3R one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllr);
 80025f0:	f000 fa82 	bl	8002af8 <RCC_PLL3_GetVCOOutputFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58024400 	.word	0x58024400

08002608 <HAL_RCC_GetPLL3SFreq>:
/**
  * @brief  Return the PLL3S frequency.
  * @retval PLL3S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3SFreq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL3S divider */
  plls = ((RCC->PLL3DIVR2 & RCC_PLL3DIVR2_DIVS) >> RCC_PLL3DIVR2_DIVS_Pos) + 1U;
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <HAL_RCC_GetPLL3SFreq+0x28>)
 8002610:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	3301      	adds	r3, #1
 800261a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3S one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / plls);
 800261c:	f000 fa6c 	bl	8002af8 <RCC_PLL3_GetVCOOutputFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	58024400 	.word	0x58024400

08002634 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	00da      	lsls	r2, r3, #3
 8002648:	4b9a      	ldr	r3, [pc, #616]	@ (80028b4 <RCC_PLL_Config+0x280>)
 800264a:	4413      	add	r3, r2
 800264c:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	009a      	lsls	r2, r3, #2
 8002652:	4b99      	ldr	r3, [pc, #612]	@ (80028b8 <RCC_PLL_Config+0x284>)
 8002654:	4413      	add	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 8002658:	4b98      	ldr	r3, [pc, #608]	@ (80028bc <RCC_PLL_Config+0x288>)
 800265a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	4a92      	ldr	r2, [pc, #584]	@ (80028bc <RCC_PLL_Config+0x288>)
 8002674:	400b      	ands	r3, r1
 8002676:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002678:	4b90      	ldr	r3, [pc, #576]	@ (80028bc <RCC_PLL_Config+0x288>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	498c      	ldr	r1, [pc, #560]	@ (80028bc <RCC_PLL_Config+0x288>)
 800268c:	4013      	ands	r3, r2
 800268e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002690:	f7fe fba6 	bl	8000de0 <HAL_GetTick>
 8002694:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 8002696:	e008      	b.n	80026aa <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002698:	f7fe fba2 	bl	8000de0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b32      	cmp	r3, #50	@ 0x32
 80026a4:	d901      	bls.n	80026aa <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0ff      	b.n	80028aa <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80026aa:	4b84      	ldr	r3, [pc, #528]	@ (80028bc <RCC_PLL_Config+0x288>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1eb      	bne.n	8002698 <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	f040 80dd 	bne.w	8002884 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80026d6:	4b79      	ldr	r3, [pc, #484]	@ (80028bc <RCC_PLL_Config+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	08db      	lsrs	r3, r3, #3
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	4a77      	ldr	r2, [pc, #476]	@ (80028c0 <RCC_PLL_Config+0x28c>)
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e8:	e007      	b.n	80026fa <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d102      	bne.n	80026f6 <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 80026f0:	4b74      	ldr	r3, [pc, #464]	@ (80028c4 <RCC_PLL_Config+0x290>)
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f4:	e001      	b.n	80026fa <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 80026f6:	4b74      	ldr	r3, [pc, #464]	@ (80028c8 <RCC_PLL_Config+0x294>)
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	4a70      	ldr	r2, [pc, #448]	@ (80028cc <RCC_PLL_Config+0x298>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d302      	bcc.n	8002714 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 800270e:	2318      	movs	r3, #24
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
 8002712:	e00f      	b.n	8002734 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	4a6e      	ldr	r2, [pc, #440]	@ (80028d0 <RCC_PLL_Config+0x29c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d902      	bls.n	8002722 <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 800271c:	2310      	movs	r3, #16
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002720:	e008      	b.n	8002734 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	4a6b      	ldr	r2, [pc, #428]	@ (80028d4 <RCC_PLL_Config+0x2a0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d902      	bls.n	8002730 <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 800272a:	2308      	movs	r3, #8
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
 800272e:	e001      	b.n	8002734 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8002730:	2302      	movs	r3, #2
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 8002748:	4b5c      	ldr	r3, [pc, #368]	@ (80028bc <RCC_PLL_Config+0x288>)
 800274a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	f043 0303 	orr.w	r3, r3, #3
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	3304      	adds	r3, #4
 800276a:	4099      	lsls	r1, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	430b      	orrs	r3, r1
 8002770:	4952      	ldr	r1, [pc, #328]	@ (80028bc <RCC_PLL_Config+0x288>)
 8002772:	4313      	orrs	r3, r2
 8002774:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 8002776:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <RCC_PLL_Config+0x288>)
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e090      	b.n	80028aa <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 8002788:	4b4c      	ldr	r3, [pc, #304]	@ (80028bc <RCC_PLL_Config+0x288>)
 800278a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	221b      	movs	r2, #27
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	ea01 0203 	and.w	r2, r1, r3
 80027a4:	4945      	ldr	r1, [pc, #276]	@ (80028bc <RCC_PLL_Config+0x288>)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	4313      	orrs	r3, r2
 80027aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	431a      	orrs	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	431a      	orrs	r2, r3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	3b01      	subs	r3, #1
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	431a      	orrs	r2, r3
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 80027ee:	4b33      	ldr	r3, [pc, #204]	@ (80028bc <RCC_PLL_Config+0x288>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	4a32      	ldr	r2, [pc, #200]	@ (80028bc <RCC_PLL_Config+0x288>)
 80027f4:	f043 0320 	orr.w	r3, r3, #32
 80027f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01c      	beq.n	800283c <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	00da      	lsls	r2, r3, #3
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <RCC_PLL_Config+0x2a4>)
 8002808:	4413      	add	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <RCC_PLL_Config+0x2a8>)
 8002812:	4013      	ands	r3, r2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002818:	00d2      	lsls	r2, r2, #3
 800281a:	431a      	orrs	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 8002820:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <RCC_PLL_Config+0x288>)
 8002822:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	2201      	movs	r2, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	4a21      	ldr	r2, [pc, #132]	@ (80028bc <RCC_PLL_Config+0x288>)
 8002838:	430b      	orrs	r3, r1
 800283a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <RCC_PLL_Config+0x288>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	491b      	ldr	r1, [pc, #108]	@ (80028bc <RCC_PLL_Config+0x288>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002852:	f7fe fac5 	bl	8000de0 <HAL_GetTick>
 8002856:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002858:	e008      	b.n	800286c <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800285a:	f7fe fac1 	bl	8000de0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b32      	cmp	r3, #50	@ 0x32
 8002866:	d901      	bls.n	800286c <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e01e      	b.n	80028aa <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 800286c:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <RCC_PLL_Config+0x288>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0eb      	beq.n	800285a <RCC_PLL_Config+0x226>
 8002882:	e010      	b.n	80028a6 <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <RCC_PLL_Config+0x288>)
 8002886:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3304      	adds	r3, #4
 800288e:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	f043 0303 	orr.w	r3, r3, #3
 800289a:	43db      	mvns	r3, r3
 800289c:	4013      	ands	r3, r2
 800289e:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <RCC_PLL_Config+0x288>)
 80028a0:	f043 0303 	orr.w	r3, r3, #3
 80028a4:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 80028a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3728      	adds	r7, #40	@ 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	58024430 	.word	0x58024430
 80028b8:	580244c0 	.word	0x580244c0
 80028bc:	58024400 	.word	0x58024400
 80028c0:	03d09000 	.word	0x03d09000
 80028c4:	016e3600 	.word	0x016e3600
 80028c8:	003d0900 	.word	0x003d0900
 80028cc:	007a1200 	.word	0x007a1200
 80028d0:	003d08ff 	.word	0x003d08ff
 80028d4:	001e847f 	.word	0x001e847f
 80028d8:	58024434 	.word	0x58024434
 80028dc:	ffff0007 	.word	0xffff0007

080028e0 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static uint32_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL1 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80028e6:	4b3c      	ldr	r3, [pc, #240]	@ (80029d8 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL1DIVR1;
 80028ec:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL1 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028fa:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL1DIVR1_DIVN) + 1U;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	3301      	adds	r3, #1
 8002904:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <RCC_PLL1_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	e05c      	b.n	80029ca <RCC_PLL1_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 8002910:	4b31      	ldr	r3, [pc, #196]	@ (80029d8 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <RCC_PLL1_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos;
 800291c:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 800291e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	e001      	b.n	800292e <RCC_PLL1_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d019      	beq.n	800296c <RCC_PLL1_GetVCOOutputFreq+0x8c>
 8002938:	2b02      	cmp	r3, #2
 800293a:	d81d      	bhi.n	8002978 <RCC_PLL1_GetVCOOutputFreq+0x98>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <RCC_PLL1_GetVCOOutputFreq+0x66>
 8002940:	2b01      	cmp	r3, #1
 8002942:	d016      	beq.n	8002972 <RCC_PLL1_GetVCOOutputFreq+0x92>
 8002944:	e018      	b.n	8002978 <RCC_PLL1_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002946:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <RCC_PLL1_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002952:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	4a1f      	ldr	r2, [pc, #124]	@ (80029dc <RCC_PLL1_GetVCOOutputFreq+0xfc>)
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002964:	e00b      	b.n	800297e <RCC_PLL1_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
      break;
 800296a:	e008      	b.n	800297e <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 800296c:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <RCC_PLL1_GetVCOOutputFreq+0x100>)
 800296e:	61fb      	str	r3, [r7, #28]
      break;
 8002970:	e005      	b.n	800297e <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL1 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002972:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <RCC_PLL1_GetVCOOutputFreq+0x104>)
 8002974:	61fb      	str	r3, [r7, #28]
      break;
 8002976:	e002      	b.n	800297e <RCC_PLL1_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
      break;
 800297c:	bf00      	nop
  }
  
  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80029aa:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 80029e8 <RCC_PLL1_GetVCOOutputFreq+0x108>
 80029ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ba:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80029be:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c6:	ee17 3a90 	vmov	r3, s15
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	@ 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	03d09000 	.word	0x03d09000
 80029e0:	016e3600 	.word	0x016e3600
 80029e4:	003d0900 	.word	0x003d0900
 80029e8:	46000000 	.word	0x46000000

080029ec <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	@ 0x24
 80029f0:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80029f2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 80029f8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80029fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fc:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	0b1b      	lsrs	r3, r3, #12
 8002a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a06:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e05c      	b.n	8002ad6 <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 8002a1c:	4b31      	ldr	r3, [pc, #196]	@ (8002ae4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8002a28:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	e001      	b.n	8002a3a <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d019      	beq.n	8002a78 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d81d      	bhi.n	8002a84 <RCC_PLL2_GetVCOOutputFreq+0x98>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <RCC_PLL2_GetVCOOutputFreq+0x66>
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d016      	beq.n	8002a7e <RCC_PLL2_GetVCOOutputFreq+0x92>
 8002a50:	e018      	b.n	8002a84 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002a52:	4b24      	ldr	r3, [pc, #144]	@ (8002ae4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002a5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae8 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002a70:	e00b      	b.n	8002a8a <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
      break;
 8002a76:	e008      	b.n	8002a8a <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <RCC_PLL2_GetVCOOutputFreq+0x100>)
 8002a7a:	61fb      	str	r3, [r7, #28]
      break;
 8002a7c:	e005      	b.n	8002a8a <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <RCC_PLL2_GetVCOOutputFreq+0x104>)
 8002a80:	61fb      	str	r3, [r7, #28]
      break;
 8002a82:	e002      	b.n	8002a8a <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
      break;
 8002a88:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002ab6:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002af4 <RCC_PLL2_GetVCOOutputFreq+0x108>
 8002aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8002aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad2:	ee17 3a90 	vmov	r3, s15
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	@ 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	58024400 	.word	0x58024400
 8002ae8:	03d09000 	.word	0x03d09000
 8002aec:	016e3600 	.word	0x016e3600
 8002af0:	003d0900 	.word	0x003d0900
 8002af4:	46000000 	.word	0x46000000

08002af8 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002afe:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf0 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8002b04:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf0 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	0d1b      	lsrs	r3, r3, #20
 8002b0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b12:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e05c      	b.n	8002be2 <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8002b28:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8002b34:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e001      	b.n	8002b46 <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d019      	beq.n	8002b84 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d81d      	bhi.n	8002b90 <RCC_PLL3_GetVCOOutputFreq+0x98>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <RCC_PLL3_GetVCOOutputFreq+0x66>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d016      	beq.n	8002b8a <RCC_PLL3_GetVCOOutputFreq+0x92>
 8002b5c:	e018      	b.n	8002b90 <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002b6a:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	08db      	lsrs	r3, r3, #3
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002b7c:	e00b      	b.n	8002b96 <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
      break;
 8002b82:	e008      	b.n	8002b96 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002b84:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 8002b86:	61fb      	str	r3, [r7, #28]
      break;
 8002b88:	e005      	b.n	8002b96 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bfc <RCC_PLL3_GetVCOOutputFreq+0x104>)
 8002b8c:	61fb      	str	r3, [r7, #28]
      break;
 8002b8e:	e002      	b.n	8002b96 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
      break;
 8002b94:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002bc2:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002c00 <RCC_PLL3_GetVCOOutputFreq+0x108>
 8002bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd2:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8002bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bde:	ee17 3a90 	vmov	r3, s15
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	@ 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	03d09000 	.word	0x03d09000
 8002bf8:	016e3600 	.word	0x016e3600
 8002bfc:	003d0900 	.word	0x003d0900
 8002c00:	46000000 	.word	0x46000000

08002c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c10:	2300      	movs	r3, #0
 8002c12:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8081 	beq.w	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c22:	4b8c      	ldr	r3, [pc, #560]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d029      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d022      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b85      	ldr	r3, [pc, #532]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a84      	ldr	r2, [pc, #528]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c4c:	4b82      	ldr	r3, [pc, #520]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
 8002c5c:	e013      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c66:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c68:	4b7a      	ldr	r3, [pc, #488]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	4a79      	ldr	r2, [pc, #484]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c72:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c74:	4b77      	ldr	r3, [pc, #476]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4a76      	ldr	r2, [pc, #472]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 8002c80:	4a74      	ldr	r2, [pc, #464]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d149      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe f8a3 	bl	8000de0 <HAL_GetTick>
 8002c9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe f89f 	bl	8000de0 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d902      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8002cb4:	e005      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb6:	4b67      	ldr	r3, [pc, #412]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ed      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d128      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ccc:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce0:	0919      	lsrs	r1, r3, #4
 8002ce2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	495b      	ldr	r1, [pc, #364]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	610b      	str	r3, [r1, #16]
 8002cec:	e005      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002cee:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	4a58      	ldr	r2, [pc, #352]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cf8:	6113      	str	r3, [r2, #16]
 8002cfa:	4b56      	ldr	r3, [pc, #344]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d06:	4953      	ldr	r1, [pc, #332]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8002d0c:	4b51      	ldr	r3, [pc, #324]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	4a50      	ldr	r2, [pc, #320]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d18:	e004      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	75bb      	strb	r3, [r7, #22]
 8002d1e:	e001      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d030      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d819      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d38:	a201      	add	r2, pc, #4	@ (adr r2, 8002d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d73 	.word	0x08002d73
 8002d44:	08002d51 	.word	0x08002d51
 8002d48:	08002d5f 	.word	0x08002d5f
 8002d4c:	08002d73 	.word	0x08002d73
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002d50:	4b40      	ldr	r3, [pc, #256]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	4a3f      	ldr	r2, [pc, #252]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	4a3c      	ldr	r2, [pc, #240]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002d6a:	e003      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
        break;
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 8002d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d7a:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4933      	ldr	r1, [pc, #204]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002d8c:	e001      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d00c      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d811      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d10d      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002db2:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	4a27      	ldr	r2, [pc, #156]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002db8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002dc0:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	4a23      	ldr	r2, [pc, #140]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8002dcc:	e003      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
        break;
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 8002dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	491a      	ldr	r1, [pc, #104]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002dee:	e001      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d031      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b80      	cmp	r3, #128	@ 0x80
 8002e06:	d00c      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e08:	2b80      	cmp	r3, #128	@ 0x80
 8002e0a:	d811      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d10d      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	4a0e      	ldr	r2, [pc, #56]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8002e20:	e00a      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002e22:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e26:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8002e2e:	e003      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	75fb      	strb	r3, [r7, #23]
        break;
 8002e34:	e000      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8002e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d110      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4902      	ldr	r1, [pc, #8]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002e50:	e008      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400
 8002e58:	58024800 	.word	0x58024800
 8002e5c:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002e70:	4b93      	ldr	r3, [pc, #588]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e74:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4990      	ldr	r1, [pc, #576]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d026      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d007      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002e9a:	e00d      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002e9c:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	4a87      	ldr	r2, [pc, #540]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ea2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002ea8:	e009      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002eaa:	4b85      	ldr	r3, [pc, #532]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	4a84      	ldr	r2, [pc, #528]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002eb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
        break;
 8002ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8002ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec8:	f023 0204 	bic.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed0:	497b      	ldr	r1, [pc, #492]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002ed6:	e001      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d02e      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ef0:	d019      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8002ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ef6:	d813      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f00:	d007      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002f02:	e00d      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002f04:	4b6e      	ldr	r3, [pc, #440]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	4a6d      	ldr	r2, [pc, #436]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f10:	e00a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002f12:	4b6b      	ldr	r3, [pc, #428]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	4a6a      	ldr	r2, [pc, #424]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f1e:	e003      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
        break;
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8002f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f2e:	4b64      	ldr	r3, [pc, #400]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4961      	ldr	r1, [pc, #388]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002f40:	e001      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d03f      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002f5a:	d02a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002f5c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002f60:	d824      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f66:	d024      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6c:	d81e      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002f6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f72:	d01e      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002f74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f78:	d818      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002f7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f7e:	d00e      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002f80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f84:	d812      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d013      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002f90:	4b4b      	ldr	r3, [pc, #300]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4a4a      	ldr	r2, [pc, #296]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002f9e:	4b48      	ldr	r3, [pc, #288]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	4a47      	ldr	r2, [pc, #284]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002fa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002faa:	e003      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
        break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 8002fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8002fba:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	493e      	ldr	r1, [pc, #248]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002fcc:	e001      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
 8002fd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fde:	4b38      	ldr	r3, [pc, #224]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4935      	ldr	r1, [pc, #212]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8002ffc:	4b30      	ldr	r3, [pc, #192]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	492d      	ldr	r1, [pc, #180]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d020      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003022:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003026:	d106      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800302e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003032:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
        break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 800303c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8003044:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003048:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	491b      	ldr	r1, [pc, #108]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003056:	e001      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003070:	d00e      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003072:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003076:	d812      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003080:	d10d      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003082:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	4a0e      	ldr	r2, [pc, #56]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800308c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800308e:	e00a      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003090:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800309c:	e003      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
        break;
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 80030a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030ac:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	4901      	ldr	r1, [pc, #4]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	650b      	str	r3, [r1, #80]	@ 0x50
 80030be:	e003      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80030c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d02c      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030dc:	d017      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80030de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030e2:	d811      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e8:	d011      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ee:	d80b      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00c      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f8:	d106      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80030fa:	4b97      	ldr	r3, [pc, #604]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	4a96      	ldr	r2, [pc, #600]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003104:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8003106:	e003      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
        break;
 800310c:	e000      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800310e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8003116:	4b90      	ldr	r3, [pc, #576]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	498d      	ldr	r1, [pc, #564]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003124:	4313      	orrs	r3, r2
 8003126:	650b      	str	r3, [r1, #80]	@ 0x50
 8003128:	e001      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d02c      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003142:	d017      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003148:	d811      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800314a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800314e:	d011      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003154:	d80b      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800315a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800315e:	d106      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003160:	4b7d      	ldr	r3, [pc, #500]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	4a7c      	ldr	r2, [pc, #496]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003166:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800316a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 800316c:	e003      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
        break;
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8003174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 800317c:	4b76      	ldr	r3, [pc, #472]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800317e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	4973      	ldr	r1, [pc, #460]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800318a:	4313      	orrs	r3, r2
 800318c:	650b      	str	r3, [r1, #80]	@ 0x50
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d045      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a8:	d02a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80031aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ae:	d824      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80031b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031b4:	d026      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80031b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031ba:	d81e      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80031bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031c0:	d022      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80031c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031c6:	d818      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80031c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031cc:	d00e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80031ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d2:	d812      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d019      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d10d      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80031de:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	4a5d      	ldr	r2, [pc, #372]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031ea:	e010      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80031ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	4a59      	ldr	r2, [pc, #356]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80031f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031f8:	e009      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
        break;
 80031fe:	e006      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003200:	bf00      	nop
 8003202:	e004      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003204:	bf00      	nop
 8003206:	e002      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 800320c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003214:	4b50      	ldr	r3, [pc, #320]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003218:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003220:	494d      	ldr	r1, [pc, #308]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003222:	4313      	orrs	r3, r2
 8003224:	650b      	str	r3, [r1, #80]	@ 0x50
 8003226:	e001      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d045      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003240:	d02a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8003242:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003246:	d824      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324c:	d026      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x698>
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003252:	d81e      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003258:	d022      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800325a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800325e:	d818      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003264:	d00e      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800326a:	d812      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d019      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8003270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003274:	d10d      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003276:	4b38      	ldr	r3, [pc, #224]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	4a37      	ldr	r2, [pc, #220]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8003282:	e010      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003284:	4b34      	ldr	r3, [pc, #208]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	4a33      	ldr	r2, [pc, #204]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800328a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800328e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8003290:	e009      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
        break;
 8003296:	e006      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003298:	bf00      	nop
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 800329c:	bf00      	nop
 800329e:	e002      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 80032ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	4927      	ldr	r1, [pc, #156]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	658b      	str	r3, [r1, #88]	@ 0x58
 80032be:	e001      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d047      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032d8:	d02a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80032da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032de:	d824      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80032e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032e4:	d026      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x730>
 80032e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ea:	d81e      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80032ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032f0:	d022      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x734>
 80032f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032f6:	d818      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80032f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fc:	d00e      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x718>
 80032fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003302:	d812      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d019      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x738>
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330c:	d10d      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800330e:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003318:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 800331a:	e010      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800331c:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	4a0d      	ldr	r2, [pc, #52]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003322:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003326:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8003328:	e009      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
        break;
 800332e:	e006      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003330:	bf00      	nop
 8003332:	e004      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003334:	bf00      	nop
 8003336:	e002      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003338:	bf00      	nop
 800333a:	e000      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 800333c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003350:	4901      	ldr	r1, [pc, #4]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003352:	4313      	orrs	r3, r2
 8003354:	658b      	str	r3, [r1, #88]	@ 0x58
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8003358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d034      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b05      	cmp	r3, #5
 8003372:	d81d      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003374:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033b7 	.word	0x080033b7
 8003380:	08003395 	.word	0x08003395
 8003384:	080033a3 	.word	0x080033a3
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033b7 	.word	0x080033b7
 8003390:	080033b7 	.word	0x080033b7
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003394:	4b91      	ldr	r3, [pc, #580]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	4a90      	ldr	r2, [pc, #576]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800339a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800339e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033a0:	e00a      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80033a2:	4b8e      	ldr	r3, [pc, #568]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	4a8d      	ldr	r2, [pc, #564]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
        break;
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 80033b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033be:	4b87      	ldr	r3, [pc, #540]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f023 0207 	bic.w	r2, r3, #7
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	4984      	ldr	r1, [pc, #528]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	658b      	str	r3, [r1, #88]	@ 0x58
 80033d0:	e001      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80033e2:	4b7e      	ldr	r3, [pc, #504]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	4a7d      	ldr	r2, [pc, #500]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80033e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d021      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x806>
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003408:	e006      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800340a:	4b74      	ldr	r3, [pc, #464]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	4a73      	ldr	r2, [pc, #460]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003410:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003414:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8003416:	e003      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
        break;
 800341c:	e000      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800341e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8003426:	4b6d      	ldr	r3, [pc, #436]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003432:	496a      	ldr	r1, [pc, #424]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003434:	4313      	orrs	r3, r2
 8003436:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003438:	e001      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d043      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003452:	d02c      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003458:	d826      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800345a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800345e:	d028      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8003460:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003464:	d820      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800346a:	d016      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x896>
 800346c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003470:	d81a      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347a:	d007      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800347c:	e014      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800347e:	4b57      	ldr	r3, [pc, #348]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	4a56      	ldr	r2, [pc, #344]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003488:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800348a:	e013      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800348c:	4b53      	ldr	r3, [pc, #332]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	4a52      	ldr	r2, [pc, #328]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003496:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003498:	e00c      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800349a:	4b50      	ldr	r3, [pc, #320]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	4a4f      	ldr	r2, [pc, #316]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80034a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a6:	e005      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
        break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80034b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ba:	4b48      	ldr	r3, [pc, #288]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c6:	4945      	ldr	r1, [pc, #276]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	654b      	str	r3, [r1, #84]	@ 0x54
 80034cc:	e001      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d04b      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80034e6:	d032      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80034e8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80034ec:	d82c      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80034ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f2:	d02e      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80034f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f8:	d826      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80034fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034fe:	d02a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003500:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003504:	d820      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800350a:	d016      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x936>
 800350c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003510:	d81a      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8003516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800351a:	d007      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x928>
 800351c:	e014      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800351e:	4b2f      	ldr	r3, [pc, #188]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	4a2e      	ldr	r2, [pc, #184]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003528:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800352a:	e015      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800352c:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	4a2a      	ldr	r2, [pc, #168]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003536:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003538:	e00e      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800353a:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	4a27      	ldr	r2, [pc, #156]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003540:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003544:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003546:	e007      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	75fb      	strb	r3, [r7, #23]
        break;
 800354c:	e004      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800355e:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	491c      	ldr	r1, [pc, #112]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800356c:	4313      	orrs	r3, r2
 800356e:	654b      	str	r3, [r1, #84]	@ 0x54
 8003570:	e001      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d03e      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003586:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800358a:	d029      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800358c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003590:	d820      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003596:	d016      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003598:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800359c:	d81a      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80035a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a6:	d007      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 80035a8:	e014      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	4a0b      	ldr	r2, [pc, #44]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035b6:	e014      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 80035b8:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	4a07      	ldr	r2, [pc, #28]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035c4:	e00d      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80035c6:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035d2:	e006      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
        break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80035da:	bf00      	nop
 80035dc:	58024400 	.word	0x58024400
        break;
 80035e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f4:	498b      	ldr	r1, [pc, #556]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	650b      	str	r3, [r1, #80]	@ 0x50
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d043      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003614:	d02c      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361a:	d826      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800361c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003620:	d028      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003626:	d820      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800362c:	d016      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800362e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003632:	d81a      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8003638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800363c:	d007      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 800363e:	e014      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003640:	4b78      	ldr	r3, [pc, #480]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4a77      	ldr	r2, [pc, #476]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800364a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800364c:	e013      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800364e:	4b75      	ldr	r3, [pc, #468]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	4a74      	ldr	r2, [pc, #464]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003658:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800365a:	e00c      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800365c:	4b71      	ldr	r3, [pc, #452]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	4a70      	ldr	r2, [pc, #448]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003662:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003666:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003668:	e005      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
        break;
 800366e:	e002      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 800367c:	4b69      	ldr	r3, [pc, #420]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003688:	4966      	ldr	r1, [pc, #408]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800368a:	4313      	orrs	r3, r2
 800368c:	654b      	str	r3, [r1, #84]	@ 0x54
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03c      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	d026      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80036a8:	2b40      	cmp	r3, #64	@ 0x40
 80036aa:	d821      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80036ac:	2b30      	cmp	r3, #48	@ 0x30
 80036ae:	d024      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80036b0:	2b30      	cmp	r3, #48	@ 0x30
 80036b2:	d81d      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d014      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d819      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d007      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80036c4:	e014      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80036c6:	4b57      	ldr	r3, [pc, #348]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	4a56      	ldr	r2, [pc, #344]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80036d2:	e013      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80036d4:	4b53      	ldr	r3, [pc, #332]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	4a52      	ldr	r2, [pc, #328]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036de:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80036e0:	e00c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80036e2:	4b50      	ldr	r3, [pc, #320]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	4a4f      	ldr	r2, [pc, #316]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
        break;
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80036fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8003702:	4b48      	ldr	r3, [pc, #288]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370e:	4945      	ldr	r1, [pc, #276]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003710:	4313      	orrs	r3, r2
 8003712:	650b      	str	r3, [r1, #80]	@ 0x50
 8003714:	e001      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d03c      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	2b50      	cmp	r3, #80	@ 0x50
 800372c:	d022      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800372e:	2b50      	cmp	r3, #80	@ 0x50
 8003730:	d81d      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d020      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003736:	2b40      	cmp	r3, #64	@ 0x40
 8003738:	d819      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800373a:	2b30      	cmp	r3, #48	@ 0x30
 800373c:	d01e      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800373e:	2b30      	cmp	r3, #48	@ 0x30
 8003740:	d815      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003742:	2b20      	cmp	r3, #32
 8003744:	d00c      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003746:	2b20      	cmp	r3, #32
 8003748:	d811      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d018      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800374e:	2b10      	cmp	r3, #16
 8003750:	d10d      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003752:	4b34      	ldr	r3, [pc, #208]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	4a33      	ldr	r2, [pc, #204]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 800375e:	e010      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003760:	4b30      	ldr	r3, [pc, #192]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	4a2f      	ldr	r2, [pc, #188]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 800376c:	e009      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
        break;
 8003772:	e006      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003774:	bf00      	nop
 8003776:	e004      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003778:	bf00      	nop
 800377a:	e002      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003788:	4b26      	ldr	r3, [pc, #152]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	4923      	ldr	r1, [pc, #140]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003796:	4313      	orrs	r3, r2
 8003798:	654b      	str	r3, [r1, #84]	@ 0x54
 800379a:	e001      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d03f      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b0:	2b50      	cmp	r3, #80	@ 0x50
 80037b2:	d022      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80037b4:	2b50      	cmp	r3, #80	@ 0x50
 80037b6:	d81d      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	d020      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d819      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80037c0:	2b30      	cmp	r3, #48	@ 0x30
 80037c2:	d01e      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80037c4:	2b30      	cmp	r3, #48	@ 0x30
 80037c6:	d815      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d00c      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d811      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d018      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d10d      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80037d8:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037e4:	e010      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80037e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037f2:	e009      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
        break;
 80037f8:	e006      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80037fa:	bf00      	nop
 80037fc:	e004      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800380e:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800381a:	4902      	ldr	r1, [pc, #8]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800381c:	4313      	orrs	r3, r2
 800381e:	658b      	str	r3, [r1, #88]	@ 0x58
 8003820:	e004      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d034      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800383c:	2b05      	cmp	r3, #5
 800383e:	d81d      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003840:	a201      	add	r2, pc, #4	@ (adr r2, 8003848 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	08003883 	.word	0x08003883
 800384c:	08003861 	.word	0x08003861
 8003850:	0800386f 	.word	0x0800386f
 8003854:	08003883 	.word	0x08003883
 8003858:	08003883 	.word	0x08003883
 800385c:	08003883 	.word	0x08003883
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003860:	4b69      	ldr	r3, [pc, #420]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	4a68      	ldr	r2, [pc, #416]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 800386c:	e00a      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800386e:	4b66      	ldr	r3, [pc, #408]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003878:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 800387a:	e003      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
        break;
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800388c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388e:	f023 0207 	bic.w	r2, r3, #7
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003896:	495c      	ldr	r1, [pc, #368]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003898:	4313      	orrs	r3, r2
 800389a:	654b      	str	r3, [r1, #84]	@ 0x54
 800389c:	e001      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d033      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d81c      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80038b6:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038f7 	.word	0x080038f7
 80038c0:	080038d5 	.word	0x080038d5
 80038c4:	080038e3 	.word	0x080038e3
 80038c8:	080038f7 	.word	0x080038f7
 80038cc:	080038f7 	.word	0x080038f7
 80038d0:	080038f7 	.word	0x080038f7
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80038d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038de:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80038e0:	e00a      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80038e2:	4b49      	ldr	r3, [pc, #292]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	4a48      	ldr	r2, [pc, #288]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80038ee:	e003      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
        break;
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 80038f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038fe:	4b42      	ldr	r3, [pc, #264]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003902:	f023 0207 	bic.w	r2, r3, #7
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	493f      	ldr	r1, [pc, #252]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800390c:	4313      	orrs	r3, r2
 800390e:	650b      	str	r3, [r1, #80]	@ 0x50
 8003910:	e001      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d027      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003930:	d80c      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800393e:	4b32      	ldr	r3, [pc, #200]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003942:	4a31      	ldr	r2, [pc, #196]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003948:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 800394a:	e003      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
        break;
 8003950:	e000      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 800395a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003966:	4928      	ldr	r1, [pc, #160]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003968:	4313      	orrs	r3, r2
 800396a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800396c:	e001      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	da2c      	bge.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800397e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003982:	d017      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003984:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003988:	d811      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800398e:	d011      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003994:	d80b      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800399a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800399e:	d106      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80039a0:	4b19      	ldr	r3, [pc, #100]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	4a18      	ldr	r2, [pc, #96]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
        break;
 80039b2:	e000      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80039b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 80039bc:	4b12      	ldr	r3, [pc, #72]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80039be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c8:	490f      	ldr	r1, [pc, #60]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 80039e0:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ee:	4906      	ldr	r1, [pc, #24]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 80039f4:	7dbb      	ldrb	r3, [r7, #22]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	58024400 	.word	0x58024400

08003a0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_USART234578 : USART2/3/5/7/8 peripheral clock
  *            @arg RCC_PERIPHCLK_USBOTGFS    : USBOTGFS peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0; /* Set to 0 for returned value if no source clock */
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  uint32_t clocksource;
  uint32_t ethclocksource;
  uint32_t prescaler;

  switch (PeriphClk)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a1e:	f001 82db 	beq.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a28:	f201 8326 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a32:	f001 8298 	beq.w	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3c:	f201 831c 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a46:	f001 822a 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a50:	f201 8312 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a5a:	f001 81bb 	beq.w	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a64:	f201 8308 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a6e:	f001 8139 	beq.w	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a78:	f201 82fe 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a82:	f001 80bf 	beq.w	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a8c:	f201 82f4 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a96:	f001 8069 	beq.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aa0:	f201 82ea 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aaa:	f001 8007 	beq.w	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ab4:	f201 82e0 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003abe:	f000 87a2 	beq.w	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xffa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac8:	f201 82d6 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ad2:	f000 877a 	beq.w	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003adc:	f201 82cc 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae6:	f000 8713 	beq.w	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af0:	f201 82c2 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003afa:	f000 86ad 	beq.w	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b04:	f201 82b8 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b0e:	f000 8644 	beq.w	800479a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b18:	f201 82ae 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b22:	f000 861c 	beq.w	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2c:	f201 82a4 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b36:	f000 8606 	beq.w	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b40:	f201 829a 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4a:	f000 8592 	beq.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b54:	f201 8290 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b5e:	f000 8519 	beq.w	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b68:	f201 8286 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b72:	f000 84a3 	beq.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b7c:	f201 827c 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b86:	f000 842d 	beq.w	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b90:	f201 8272 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9a:	f000 83c5 	beq.w	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba4:	f201 8268 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bae:	f000 8365 	beq.w	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb8:	f201 825e 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc2:	f000 831d 	beq.w	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bcc:	f201 8254 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd6:	f000 82ed 	beq.w	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be0:	f201 824a 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b80      	cmp	r3, #128	@ 0x80
 8003be8:	f000 8291 	beq.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b80      	cmp	r3, #128	@ 0x80
 8003bf0:	f201 8242 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d84c      	bhi.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f001 823b 	beq.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	2b1f      	cmp	r3, #31
 8003c08:	f201 8236 	bhi.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003ca1 	.word	0x08003ca1
 8003c18:	08003d6f 	.word	0x08003d6f
 8003c1c:	08005079 	.word	0x08005079
 8003c20:	08003dff 	.word	0x08003dff
 8003c24:	08005079 	.word	0x08005079
 8003c28:	08005079 	.word	0x08005079
 8003c2c:	08005079 	.word	0x08005079
 8003c30:	08003e97 	.word	0x08003e97
 8003c34:	08005079 	.word	0x08005079
 8003c38:	08005079 	.word	0x08005079
 8003c3c:	08005079 	.word	0x08005079
 8003c40:	08005079 	.word	0x08005079
 8003c44:	08005079 	.word	0x08005079
 8003c48:	08005079 	.word	0x08005079
 8003c4c:	08005079 	.word	0x08005079
 8003c50:	08003f39 	.word	0x08003f39
 8003c54:	08005079 	.word	0x08005079
 8003c58:	08005079 	.word	0x08005079
 8003c5c:	08005079 	.word	0x08005079
 8003c60:	08005079 	.word	0x08005079
 8003c64:	08005079 	.word	0x08005079
 8003c68:	08005079 	.word	0x08005079
 8003c6c:	08005079 	.word	0x08005079
 8003c70:	08005079 	.word	0x08005079
 8003c74:	08005079 	.word	0x08005079
 8003c78:	08005079 	.word	0x08005079
 8003c7c:	08005079 	.word	0x08005079
 8003c80:	08005079 	.word	0x08005079
 8003c84:	08005079 	.word	0x08005079
 8003c88:	08005079 	.word	0x08005079
 8003c8c:	08005079 	.word	0x08005079
 8003c90:	08003fa5 	.word	0x08003fa5
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	f000 81fb 	beq.w	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      }
      break;

    default:
      /* Nothing to do, frequency is by default set to 0 */
      break;
 8003c9c:	f001 b9ec 	b.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
      clocksource = __HAL_RCC_GET_FMC_SOURCE();
 8003ca0:	4ba1      	ldr	r3, [pc, #644]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ca2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ca6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003caa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cae:	d004      	beq.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8003cb0:	4b9d      	ldr	r3, [pc, #628]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	e001      	b.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8003cba:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d80e      	bhi.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d844      	bhi.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003cef 	.word	0x08003cef
 8003cd8:	08003cf7 	.word	0x08003cf7
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d1f 	.word	0x08003d1f
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cea:	d02e      	beq.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          break;
 8003cec:	e033      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          frequency = HAL_RCC_GetHCLKFreq();
 8003cee:	f7fe fb47 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8003cf2:	6178      	str	r0, [r7, #20]
          break;
 8003cf4:	e039      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8003cf6:	4b8c      	ldr	r3, [pc, #560]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d02c      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPLL1QFreq();
 8003d02:	f7fe fbb9 	bl	8002478 <HAL_RCC_GetPLL1QFreq>
 8003d06:	6178      	str	r0, [r7, #20]
          break;
 8003d08:	e028      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003d0a:	4b87      	ldr	r3, [pc, #540]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d025      	beq.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
            frequency = HAL_RCC_GetPLL2RFreq();
 8003d16:	f7fe fbf1 	bl	80024fc <HAL_RCC_GetPLL2RFreq>
 8003d1a:	6178      	str	r0, [r7, #20]
          break;
 8003d1c:	e021      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d1e:	4b82      	ldr	r3, [pc, #520]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01e      	beq.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d018      	beq.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d36:	4b7c      	ldr	r3, [pc, #496]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	08db      	lsrs	r3, r3, #3
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	4a7a      	ldr	r2, [pc, #488]	@ (8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	617b      	str	r3, [r7, #20]
          break;
 8003d48:	e00e      	b.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8003d4a:	f7fe fb19 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	617b      	str	r3, [r7, #20]
          break;
 8003d54:	e009      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8003d56:	bf00      	nop
 8003d58:	f001 b993 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d5c:	bf00      	nop
 8003d5e:	f001 b990 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d62:	bf00      	nop
 8003d64:	f001 b98d 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003d68:	bf00      	nop
      break;
 8003d6a:	f001 b98a 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI1_SOURCE();
 8003d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003d70:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d004      	beq.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d84:	e000      	b.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003d86:	2340      	movs	r3, #64	@ 0x40
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d027      	beq.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d82a      	bhi.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d017      	beq.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d824      	bhi.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d004      	beq.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
          break;
 8003dae:	e01d      	b.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          frequency = HAL_RCC_GetHCLKFreq();
 8003db0:	f7fe fae6 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8003db4:	6178      	str	r0, [r7, #20]
          break;
 8003db6:	e020      	b.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003db8:	4b5b      	ldr	r3, [pc, #364]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d016      	beq.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = HAL_RCC_GetPLL2SFreq();
 8003dc4:	f7fe fbb0 	bl	8002528 <HAL_RCC_GetPLL2SFreq>
 8003dc8:	6178      	str	r0, [r7, #20]
          break;
 8003dca:	e012      	b.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8003dcc:	4b56      	ldr	r3, [pc, #344]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
            frequency = HAL_RCC_GetPLL2TFreq();
 8003dd8:	f7fe fbbc 	bl	8002554 <HAL_RCC_GetPLL2TFreq>
 8003ddc:	6178      	str	r0, [r7, #20]
          break;
 8003dde:	e00b      	b.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8003de0:	f7fe face 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8003de4:	4603      	mov	r3, r0
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	617b      	str	r3, [r7, #20]
          break;
 8003dea:	e006      	b.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          break;
 8003dec:	bf00      	nop
 8003dee:	f001 b948 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003df2:	bf00      	nop
 8003df4:	f001 b945 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003df8:	bf00      	nop
      break;
 8003dfa:	f001 b942 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI2_SOURCE();
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003e00:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 8003e0e:	4b46      	ldr	r3, [pc, #280]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e24:	d028      	beq.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2c:	d82a      	bhi.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b80      	cmp	r3, #128	@ 0x80
 8003e32:	d017      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b80      	cmp	r3, #128	@ 0x80
 8003e38:	d824      	bhi.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d004      	beq.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x444>
          break;
 8003e46:	e01d      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetHCLKFreq();
 8003e48:	f7fe fa9a 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8003e4c:	6178      	str	r0, [r7, #20]
          break;
 8003e4e:	e020      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8003e50:	4b35      	ldr	r3, [pc, #212]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d016      	beq.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HAL_RCC_GetPLL2SFreq();
 8003e5c:	f7fe fb64 	bl	8002528 <HAL_RCC_GetPLL2SFreq>
 8003e60:	6178      	str	r0, [r7, #20]
          break;
 8003e62:	e012      	b.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8003e64:	4b30      	ldr	r3, [pc, #192]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00f      	beq.n	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            frequency = HAL_RCC_GetPLL2TFreq();
 8003e70:	f7fe fb70 	bl	8002554 <HAL_RCC_GetPLL2TFreq>
 8003e74:	6178      	str	r0, [r7, #20]
          break;
 8003e76:	e00b      	b.n	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8003e78:	f7fe fa82 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	617b      	str	r3, [r7, #20]
          break;
 8003e82:	e006      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          break;
 8003e84:	bf00      	nop
 8003e86:	f001 b8fc 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e8a:	bf00      	nop
 8003e8c:	f001 b8f9 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003e90:	bf00      	nop
      break;
 8003e92:	f001 b8f6 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003e96:	4b24      	ldr	r3, [pc, #144]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ea6:	d02a      	beq.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eae:	d82f      	bhi.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ebc:	d016      	beq.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 8003ebe:	e027      	b.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d024      	beq.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003ecc:	4b16      	ldr	r3, [pc, #88]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01e      	beq.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
          break;
 8003eea:	e014      	b.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003eec:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d011      	beq.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
            frequency = CSI_VALUE;
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003efa:	617b      	str	r3, [r7, #20]
          break;
 8003efc:	e00e      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efe:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSE_VALUE;
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8003f0c:	617b      	str	r3, [r7, #20]
          break;
 8003f0e:	e008      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          break;
 8003f10:	bf00      	nop
 8003f12:	f001 b8b6 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f16:	bf00      	nop
 8003f18:	f001 b8b3 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f1c:	bf00      	nop
 8003f1e:	f001 b8b0 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f22:	bf00      	nop
      break;
 8003f24:	f001 b8ad 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	03d09000 	.word	0x03d09000
 8003f30:	003d0900 	.word	0x003d0900
 8003f34:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ADC_SOURCE();
 8003f38:	4b9a      	ldr	r3, [pc, #616]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f48:	d01f      	beq.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f50:	d81f      	bhi.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
          break;
 8003f60:	e017      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8003f62:	4b90      	ldr	r3, [pc, #576]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d014      	beq.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
            frequency = HAL_RCC_GetPLL2PFreq();
 8003f6e:	f7fe fa99 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 8003f72:	6178      	str	r0, [r7, #20]
          break;
 8003f74:	e010      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8003f76:	4b8b      	ldr	r3, [pc, #556]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HAL_RCC_GetPLL3RFreq();
 8003f82:	f7fe fb2b 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 8003f86:	6178      	str	r0, [r7, #20]
          break;
 8003f88:	e009      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = RCC_GetCLKPFreq();
 8003f8a:	f001 f893 	bl	80050b4 <RCC_GetCLKPFreq>
 8003f8e:	6178      	str	r0, [r7, #20]
          break;
 8003f90:	e006      	b.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
          break;
 8003f92:	bf00      	nop
 8003f94:	f001 b875 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f98:	bf00      	nop
 8003f9a:	f001 b872 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8003f9e:	bf00      	nop
      break;
 8003fa0:	f001 b86f 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ADF1_SOURCE();
 8003fa4:	4b7f      	ldr	r3, [pc, #508]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa8:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003fb4:	d048      	beq.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003fbc:	d85a      	bhi.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc4:	d037      	beq.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fcc:	d852      	bhi.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd4:	d02b      	beq.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fdc:	d84a      	bhi.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fe4:	d019      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fec:	d842      	bhi.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffa:	d004      	beq.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          break;
 8003ffc:	e03a      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = HAL_RCC_GetHCLKFreq();
 8003ffe:	f7fe f9bf 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8004002:	6178      	str	r0, [r7, #20]
          break;
 8004004:	e043      	b.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004006:	4b67      	ldr	r3, [pc, #412]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d033      	beq.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004012:	f7fe fa47 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 8004016:	6178      	str	r0, [r7, #20]
          break;
 8004018:	e02f      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800401a:	4b62      	ldr	r3, [pc, #392]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d02c      	beq.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004026:	f7fe faad 	bl	8002584 <HAL_RCC_GetPLL3PFreq>
 800402a:	6178      	str	r0, [r7, #20]
          break;
 800402c:	e028      	b.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = EXTERNAL_CLOCK_VALUE;
 800402e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004032:	617b      	str	r3, [r7, #20]
          break;
 8004034:	e02b      	b.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004036:	4b5b      	ldr	r3, [pc, #364]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d021      	beq.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
            frequency = CSI_VALUE;
 8004042:	4b59      	ldr	r3, [pc, #356]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004044:	617b      	str	r3, [r7, #20]
          break;
 8004046:	e01e      	b.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004048:	4b56      	ldr	r3, [pc, #344]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01b      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004054:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004060:	4b50      	ldr	r3, [pc, #320]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	4a50      	ldr	r2, [pc, #320]	@ (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]
          break;
 8004072:	e00b      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
          break;
 8004074:	bf00      	nop
 8004076:	f001 b804 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800407a:	bf00      	nop
 800407c:	f001 b801 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004080:	bf00      	nop
 8004082:	f000 bffe 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004086:	bf00      	nop
 8004088:	f000 bffb 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800408c:	bf00      	nop
      break;
 800408e:	f000 bff8 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CEC_SOURCE();
 8004092:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004096:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a2:	d01f      	beq.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040aa:	d824      	bhi.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
          break;
 80040ba:	e01c      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040bc:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d019      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
            frequency = LSE_VALUE;
 80040c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040cc:	617b      	str	r3, [r7, #20]
          break;
 80040ce:	e015      	b.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d0:	4b34      	ldr	r3, [pc, #208]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
            frequency = LSI_VALUE;
 80040dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80040e0:	617b      	str	r3, [r7, #20]
          break;
 80040e2:	e00e      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80040e4:	4b2f      	ldr	r3, [pc, #188]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
            frequency = CSI_VALUE;
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80040f2:	617b      	str	r3, [r7, #20]
          break;
 80040f4:	e008      	b.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          break;
 80040f6:	bf00      	nop
 80040f8:	f000 bfc3 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80040fc:	bf00      	nop
 80040fe:	f000 bfc0 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004102:	bf00      	nop
 8004104:	f000 bfbd 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004108:	bf00      	nop
      break;
 800410a:	f000 bfba 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ETH1REF_SOURCE();
 800410e:	4b25      	ldr	r3, [pc, #148]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004112:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800411e:	d013      	beq.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004126:	d833      	bhi.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d033      	beq.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004134:	d12c      	bne.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02c      	beq.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
            frequency = HSE_VALUE;
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004144:	617b      	str	r3, [r7, #20]
          break;
 8004146:	e029      	b.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          ethclocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8004148:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800415e:	d009      	beq.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
              break;
 8004160:	e015      	b.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
              if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004162:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00c      	beq.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
                frequency = HSE_VALUE;
 800416e:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004170:	617b      	str	r3, [r7, #20]
              break;
 8004172:	e009      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
              if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x780>
                frequency = HAL_RCC_GetPLL3SFreq();
 8004180:	f7fe fa42 	bl	8002608 <HAL_RCC_GetPLL3SFreq>
 8004184:	6178      	str	r0, [r7, #20]
              break;
 8004186:	e001      	b.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x780>
              break;
 8004188:	bf00      	nop
 800418a:	e008      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              break;
 800418c:	bf00      	nop
          break;
 800418e:	e006      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          break;
 8004190:	bf00      	nop
 8004192:	f000 bf76 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004196:	bf00      	nop
 8004198:	f000 bf73 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800419c:	bf00      	nop
      break;
 800419e:	f000 bf70 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	003d0900 	.word	0x003d0900
 80041ac:	03d09000 	.word	0x03d09000
 80041b0:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 80041b4:	4b87      	ldr	r3, [pc, #540]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80041b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041ca:	d009      	beq.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          break;
 80041cc:	e016      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ce:	4b81      	ldr	r3, [pc, #516]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            frequency = HSE_VALUE;
 80041da:	4b7f      	ldr	r3, [pc, #508]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 80041dc:	617b      	str	r3, [r7, #20]
          break;
 80041de:	e009      	b.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80041e0:	4b7c      	ldr	r3, [pc, #496]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = HAL_RCC_GetPLL3SFreq();
 80041ec:	f7fe fa0c 	bl	8002608 <HAL_RCC_GetPLL3SFreq>
 80041f0:	6178      	str	r0, [r7, #20]
          break;
 80041f2:	e002      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80041f4:	bf00      	nop
 80041f6:	f000 bf44 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80041fa:	bf00      	nop
      break;
 80041fc:	f000 bf41 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_FDCAN_SOURCE();
 8004200:	4b74      	ldr	r3, [pc, #464]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004204:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004210:	d01e      	beq.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004218:	d824      	bhi.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004226:	d009      	beq.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
          break;
 8004228:	e01c      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422a:	4b6a      	ldr	r3, [pc, #424]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = HSE_VALUE;
 8004236:	4b68      	ldr	r3, [pc, #416]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8004238:	617b      	str	r3, [r7, #20]
          break;
 800423a:	e016      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800423c:	4b65      	ldr	r3, [pc, #404]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004248:	f7fe f916 	bl	8002478 <HAL_RCC_GetPLL1QFreq>
 800424c:	6178      	str	r0, [r7, #20]
          break;
 800424e:	e00f      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004250:	4b60      	ldr	r3, [pc, #384]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00c      	beq.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HAL_RCC_GetPLL2PFreq();
 800425c:	f7fe f922 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 8004260:	6178      	str	r0, [r7, #20]
          break;
 8004262:	e008      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          break;
 8004264:	bf00      	nop
 8004266:	f000 bf0c 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800426a:	bf00      	nop
 800426c:	f000 bf09 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004270:	bf00      	nop
 8004272:	f000 bf06 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004276:	bf00      	nop
      break;
 8004278:	f000 bf03 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C23_SOURCE();
 800427c:	4b55      	ldr	r3, [pc, #340]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800427e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800428c:	d037      	beq.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004294:	d83c      	bhi.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800429c:	d019      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a4:	d834      	bhi.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b2:	d004      	beq.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 80042b4:	e02c      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042b6:	f7fe f88b 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 80042ba:	6178      	str	r0, [r7, #20]
          break;
 80042bc:	e032      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 80042be:	4b45      	ldr	r3, [pc, #276]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d025      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
            frequency = HAL_RCC_GetPLL3RFreq();
 80042ca:	f7fe f987 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 80042ce:	6178      	str	r0, [r7, #20]
          break;
 80042d0:	e021      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042d2:	4b40      	ldr	r3, [pc, #256]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01e      	beq.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x910>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80042de:	4b3d      	ldr	r3, [pc, #244]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d018      	beq.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x910>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042ea:	4b3a      	ldr	r3, [pc, #232]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	08db      	lsrs	r3, r3, #3
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	4a39      	ldr	r2, [pc, #228]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 80042f6:	fa22 f303 	lsr.w	r3, r2, r3
 80042fa:	617b      	str	r3, [r7, #20]
          break;
 80042fc:	e00e      	b.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80042fe:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
            frequency = CSI_VALUE;
 800430a:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 800430c:	617b      	str	r3, [r7, #20]
          break;
 800430e:	e008      	b.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004310:	bf00      	nop
 8004312:	f000 beb6 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004316:	bf00      	nop
 8004318:	f000 beb3 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800431c:	bf00      	nop
 800431e:	f000 beb0 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004322:	bf00      	nop
      break;
 8004324:	f000 bead 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C1_I3C1_SOURCE();
 8004328:	4b2a      	ldr	r3, [pc, #168]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004338:	d037      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004340:	d83c      	bhi.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004348:	d019      	beq.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004350:	d834      	bhi.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435e:	d004      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          break;
 8004360:	e02c      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004362:	f7fe f835 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8004366:	6178      	str	r0, [r7, #20]
          break;
 8004368:	e032      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800436a:	4b1a      	ldr	r3, [pc, #104]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d025      	beq.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004376:	f7fe f931 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 800437a:	6178      	str	r0, [r7, #20]
          break;
 800437c:	e021      	b.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800437e:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01e      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800438a:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004396:	4b0f      	ldr	r3, [pc, #60]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	08db      	lsrs	r3, r3, #3
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	4a0e      	ldr	r2, [pc, #56]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	617b      	str	r3, [r7, #20]
          break;
 80043a8:	e00e      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
            frequency = CSI_VALUE;
 80043b6:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 80043b8:	617b      	str	r3, [r7, #20]
          break;
 80043ba:	e008      	b.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
          break;
 80043bc:	bf00      	nop
 80043be:	f000 be60 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80043c2:	bf00      	nop
 80043c4:	f000 be5d 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80043c8:	bf00      	nop
 80043ca:	f000 be5a 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80043ce:	bf00      	nop
      break;
 80043d0:	f000 be57 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80043d4:	58024400 	.word	0x58024400
 80043d8:	016e3600 	.word	0x016e3600
 80043dc:	03d09000 	.word	0x03d09000
 80043e0:	003d0900 	.word	0x003d0900
      clocksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80043e4:	4ba0      	ldr	r3, [pc, #640]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80043e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f4:	d04f      	beq.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043fc:	d84f      	bhi.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004404:	d03d      	beq.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800440c:	d847      	bhi.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004414:	d02b      	beq.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800441c:	d83f      	bhi.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004424:	d019      	beq.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800442c:	d837      	bhi.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800443a:	d004      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
          break;
 800443c:	e02f      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = HAL_RCC_GetPCLK1Freq();
 800443e:	f7fd ffc7 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8004442:	6178      	str	r0, [r7, #20]
          break;
 8004444:	e038      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004446:	4b88      	ldr	r3, [pc, #544]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d028      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004452:	f7fe f827 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 8004456:	6178      	str	r0, [r7, #20]
          break;
 8004458:	e024      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800445a:	4b83      	ldr	r3, [pc, #524]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d021      	beq.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004466:	f7fe f8b9 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 800446a:	6178      	str	r0, [r7, #20]
          break;
 800446c:	e01d      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800446e:	4b7e      	ldr	r3, [pc, #504]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01a      	beq.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = LSE_VALUE;
 800447a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800447e:	617b      	str	r3, [r7, #20]
          break;
 8004480:	e016      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004482:	4b79      	ldr	r3, [pc, #484]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d013      	beq.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = LSI_VALUE;
 800448e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004492:	617b      	str	r3, [r7, #20]
          break;
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          frequency = RCC_GetCLKPFreq();
 8004496:	f000 fe0d 	bl	80050b4 <RCC_GetCLKPFreq>
 800449a:	6178      	str	r0, [r7, #20]
          break;
 800449c:	e00c      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          break;
 800449e:	bf00      	nop
 80044a0:	f000 bdef 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044a4:	bf00      	nop
 80044a6:	f000 bdec 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044aa:	bf00      	nop
 80044ac:	f000 bde9 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044b0:	bf00      	nop
 80044b2:	f000 bde6 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044b6:	bf00      	nop
      break;
 80044b8:	f000 bde3 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM23_SOURCE();
 80044bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80044cc:	d04f      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80044d4:	d84f      	bhi.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044dc:	d03d      	beq.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e4:	d847      	bhi.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ec:	d02b      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044f4:	d83f      	bhi.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fc:	d019      	beq.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004504:	d837      	bhi.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004512:	d004      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          break;
 8004514:	e02f      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004516:	f7fd ff93 	bl	8002440 <HAL_RCC_GetPCLK4Freq>
 800451a:	6178      	str	r0, [r7, #20]
          break;
 800451c:	e038      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800451e:	4b52      	ldr	r3, [pc, #328]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d028      	beq.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            frequency = HAL_RCC_GetPLL2PFreq();
 800452a:	f7fd ffbb 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 800452e:	6178      	str	r0, [r7, #20]
          break;
 8004530:	e024      	b.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004532:	4b4d      	ldr	r3, [pc, #308]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d021      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
            frequency = HAL_RCC_GetPLL3RFreq();
 800453e:	f7fe f84d 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 8004542:	6178      	str	r0, [r7, #20]
          break;
 8004544:	e01d      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004546:	4b48      	ldr	r3, [pc, #288]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01a      	beq.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
            frequency = LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004556:	617b      	str	r3, [r7, #20]
          break;
 8004558:	e016      	b.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800455a:	4b43      	ldr	r3, [pc, #268]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800455c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d013      	beq.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
            frequency = LSI_VALUE;
 8004566:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800456a:	617b      	str	r3, [r7, #20]
          break;
 800456c:	e00f      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
          frequency = RCC_GetCLKPFreq();
 800456e:	f000 fda1 	bl	80050b4 <RCC_GetCLKPFreq>
 8004572:	6178      	str	r0, [r7, #20]
          break;
 8004574:	e00c      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          break;
 8004576:	bf00      	nop
 8004578:	f000 bd83 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800457c:	bf00      	nop
 800457e:	f000 bd80 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004582:	bf00      	nop
 8004584:	f000 bd7d 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004588:	bf00      	nop
 800458a:	f000 bd7a 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800458e:	bf00      	nop
      break;
 8004590:	f000 bd77 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM45_SOURCE();
 8004594:	4b34      	ldr	r3, [pc, #208]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045a4:	d04f      	beq.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045ac:	d84f      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d03d      	beq.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045bc:	d847      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045c4:	d02b      	beq.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045cc:	d83f      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d4:	d019      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045dc:	d837      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ea:	d004      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 80045ec:	e02f      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          frequency = HAL_RCC_GetPCLK4Freq();
 80045ee:	f7fd ff27 	bl	8002440 <HAL_RCC_GetPCLK4Freq>
 80045f2:	6178      	str	r0, [r7, #20]
          break;
 80045f4:	e03b      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80045f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d028      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004602:	f7fd ff4f 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 8004606:	6178      	str	r0, [r7, #20]
          break;
 8004608:	e024      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800460a:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d021      	beq.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004616:	f7fd ffe1 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 800461a:	6178      	str	r0, [r7, #20]
          break;
 800461c:	e01d      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800461e:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01a      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
            frequency = LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800462e:	617b      	str	r3, [r7, #20]
          break;
 8004630:	e016      	b.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004632:	4b0d      	ldr	r3, [pc, #52]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
            frequency = LSI_VALUE;
 800463e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004642:	617b      	str	r3, [r7, #20]
          break;
 8004644:	e012      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
          frequency = RCC_GetCLKPFreq();
 8004646:	f000 fd35 	bl	80050b4 <RCC_GetCLKPFreq>
 800464a:	6178      	str	r0, [r7, #20]
          break;
 800464c:	e00f      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          break;
 800464e:	bf00      	nop
 8004650:	f000 bd17 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004654:	bf00      	nop
 8004656:	f000 bd14 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800465a:	bf00      	nop
 800465c:	f000 bd11 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004660:	bf00      	nop
 8004662:	f000 bd0e 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
          break;
 800466c:	bf00      	nop
      break;
 800466e:	f000 bd08 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPUART1_SOURCE();
 8004672:	4ba3      	ldr	r3, [pc, #652]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b05      	cmp	r3, #5
 8004680:	d84f      	bhi.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
 8004682:	a201      	add	r2, pc, #4	@ (adr r2, 8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046a1 	.word	0x080046a1
 800468c:	080046a9 	.word	0x080046a9
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046d1 	.word	0x080046d1
 8004698:	080046fd 	.word	0x080046fd
 800469c:	0800470f 	.word	0x0800470f
          frequency = HAL_RCC_GetPCLK4Freq();
 80046a0:	f7fd fece 	bl	8002440 <HAL_RCC_GetPCLK4Freq>
 80046a4:	6178      	str	r0, [r7, #20]
          break;
 80046a6:	e04c      	b.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80046a8:	4b95      	ldr	r3, [pc, #596]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d039      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
            frequency = HAL_RCC_GetPLL2QFreq();
 80046b4:	f7fd ff0c 	bl	80024d0 <HAL_RCC_GetPLL2QFreq>
 80046b8:	6178      	str	r0, [r7, #20]
          break;
 80046ba:	e035      	b.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80046bc:	4b90      	ldr	r3, [pc, #576]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d032      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
            frequency = HAL_RCC_GetPLL3QFreq();
 80046c8:	f7fd ff72 	bl	80025b0 <HAL_RCC_GetPLL3QFreq>
 80046cc:	6178      	str	r0, [r7, #20]
          break;
 80046ce:	e02e      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d0:	4b8b      	ldr	r3, [pc, #556]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02b      	beq.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80046dc:	4b88      	ldr	r3, [pc, #544]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d025      	beq.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046e8:	4b85      	ldr	r3, [pc, #532]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	4a84      	ldr	r2, [pc, #528]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>)
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]
          break;
 80046fa:	e01b      	b.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80046fc:	4b80      	ldr	r3, [pc, #512]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d018      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = CSI_VALUE;
 8004708:	4b7f      	ldr	r3, [pc, #508]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xefc>)
 800470a:	617b      	str	r3, [r7, #20]
          break;
 800470c:	e015      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800470e:	4b7c      	ldr	r3, [pc, #496]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d012      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
            frequency = LSE_VALUE;
 800471a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471e:	617b      	str	r3, [r7, #20]
          break;
 8004720:	e00e      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          break;
 8004722:	bf00      	nop
 8004724:	f000 bcad 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004728:	bf00      	nop
 800472a:	f000 bcaa 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800472e:	bf00      	nop
 8004730:	f000 bca7 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004734:	bf00      	nop
 8004736:	f000 bca4 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800473a:	bf00      	nop
 800473c:	f000 bca1 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004740:	bf00      	nop
      break;
 8004742:	f000 bc9e 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004746:	4b6e      	ldr	r3, [pc, #440]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8494 	beq.w	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        frequency = HAL_RCC_GetPLL3RFreq();
 8004754:	f7fd ff42 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 8004758:	6178      	str	r0, [r7, #20]
      break;
 800475a:	f000 bc8f 	b.w	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
      clocksource = __HAL_RCC_GET_PSSI_SOURCE();
 800475e:	4b68      	ldr	r3, [pc, #416]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>
          break;
 8004776:	e00e      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004778:	4b61      	ldr	r3, [pc, #388]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004784:	f7fd ff2a 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 8004788:	6178      	str	r0, [r7, #20]
          break;
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
          frequency = RCC_GetCLKPFreq();
 800478c:	f000 fc92 	bl	80050b4 <RCC_GetCLKPFreq>
 8004790:	6178      	str	r0, [r7, #20]
          break;
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          break;
 8004794:	bf00      	nop
      break;
 8004796:	f000 bc74 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_RTC_SOURCE();
 800479a:	4b59      	ldr	r3, [pc, #356]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047a6:	d107      	bne.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 80047a8:	4b55      	ldr	r3, [pc, #340]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80047b2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80047b6:	e003      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80047b8:	4b51      	ldr	r3, [pc, #324]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c8:	d014      	beq.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d0:	d81a      	bhi.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d033      	beq.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047de:	d113      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e0:	4b47      	ldr	r3, [pc, #284]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02c      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = LSE_VALUE;
 80047ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f0:	617b      	str	r3, [r7, #20]
          break;
 80047f2:	e028      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f4:	4b42      	ldr	r3, [pc, #264]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80047f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d025      	beq.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
            frequency = LSI_VALUE;
 8004800:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004804:	617b      	str	r3, [r7, #20]
          break;
 8004806:	e021      	b.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL) == RCC_BDCR_RTCSEL) /*!< HSE is the clock source for RTC */
 8004808:	4b3d      	ldr	r3, [pc, #244]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004814:	d11d      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004816:	4b3a      	ldr	r3, [pc, #232]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d017      	beq.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
              prescaler = READ_BIT(RCC->CFGR, RCC_CFGR_RTCPRE) >> RCC_CFGR_RTCPRE_Pos;
 8004822:	4b37      	ldr	r3, [pc, #220]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800482c:	60fb      	str	r3, [r7, #12]
              if (prescaler > 1U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d90e      	bls.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
                frequency = HSE_VALUE / prescaler;
 8004834:	4a35      	ldr	r2, [pc, #212]	@ (800490c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]
          break;
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
          break;
 8004840:	bf00      	nop
 8004842:	f000 bc1e 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004846:	bf00      	nop
 8004848:	f000 bc1b 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800484c:	bf00      	nop
 800484e:	f000 bc18 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004852:	bf00      	nop
      break;
 8004854:	f000 bc15 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004858:	4b29      	ldr	r3, [pc, #164]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004868:	d039      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004870:	d83d      	bhi.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004878:	d035      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeda>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004880:	d835      	bhi.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004888:	d01f      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004890:	d82d      	bhi.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
          break;
 80048a0:	e025      	b.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80048a2:	4b17      	ldr	r3, [pc, #92]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d021      	beq.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
            frequency = HAL_RCC_GetPLL1QFreq();
 80048ae:	f7fd fde3 	bl	8002478 <HAL_RCC_GetPLL1QFreq>
 80048b2:	6178      	str	r0, [r7, #20]
          break;
 80048b4:	e01d      	b.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80048b6:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d019      	beq.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
            frequency = HAL_RCC_GetPLL2PFreq();
 80048c2:	f7fd fdef 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 80048c6:	6178      	str	r0, [r7, #20]
          break;
 80048c8:	e015      	b.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80048ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d011      	beq.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
            frequency = HAL_RCC_GetPLL3PFreq();
 80048d6:	f7fd fe55 	bl	8002584 <HAL_RCC_GetPLL3PFreq>
 80048da:	6178      	str	r0, [r7, #20]
          break;
 80048dc:	e00d      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
          frequency = RCC_GetCLKPFreq();
 80048de:	f000 fbe9 	bl	80050b4 <RCC_GetCLKPFreq>
 80048e2:	6178      	str	r0, [r7, #20]
          break;
 80048e4:	e00a      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          frequency = EXTERNAL_CLOCK_VALUE;
 80048e6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80048ea:	617b      	str	r3, [r7, #20]
          break;
 80048ec:	e006      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          break;
 80048ee:	bf00      	nop
 80048f0:	e3c7      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048f2:	bf00      	nop
 80048f4:	e3c5      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048f6:	bf00      	nop
 80048f8:	e3c3      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80048fa:	bf00      	nop
      break;
 80048fc:	e3c1      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
 8004904:	03d09000 	.word	0x03d09000
 8004908:	003d0900 	.word	0x003d0900
 800490c:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_SAI2_SOURCE();
 8004910:	4b94      	ldr	r3, [pc, #592]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004914:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004920:	d049      	beq.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004928:	d847      	bhi.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004930:	d039      	beq.n	80049a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004938:	d83f      	bhi.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004940:	d035      	beq.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0xfa2>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004948:	d837      	bhi.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004950:	d01f      	beq.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004958:	d82f      	bhi.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xf72>
          break;
 8004968:	e027      	b.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800496a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d023      	beq.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004976:	f7fd fd7f 	bl	8002478 <HAL_RCC_GetPLL1QFreq>
 800497a:	6178      	str	r0, [r7, #20]
          break;
 800497c:	e01f      	b.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800497e:	4b79      	ldr	r3, [pc, #484]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
            frequency = HAL_RCC_GetPLL2PFreq();
 800498a:	f7fd fd8b 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 800498e:	6178      	str	r0, [r7, #20]
          break;
 8004990:	e017      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004992:	4b74      	ldr	r3, [pc, #464]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            frequency = HAL_RCC_GetPLL3PFreq();
 800499e:	f7fd fdf1 	bl	8002584 <HAL_RCC_GetPLL3PFreq>
 80049a2:	6178      	str	r0, [r7, #20]
          break;
 80049a4:	e00f      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
          frequency = RCC_GetCLKPFreq();
 80049a6:	f000 fb85 	bl	80050b4 <RCC_GetCLKPFreq>
 80049aa:	6178      	str	r0, [r7, #20]
          break;
 80049ac:	e00c      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          frequency = EXTERNAL_CLOCK_VALUE;
 80049ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80049b2:	617b      	str	r3, [r7, #20]
          break;
 80049b4:	e008      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          break;
 80049b6:	bf00      	nop
 80049b8:	e363      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049ba:	bf00      	nop
 80049bc:	e361      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049be:	bf00      	nop
 80049c0:	e35f      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049c2:	bf00      	nop
 80049c4:	e35d      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049c6:	bf00      	nop
      break;
 80049c8:	e35b      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SDMMC12_SOURCE();
 80049ca:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	613b      	str	r3, [r7, #16]
      if (clocksource ==
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80049da:	4b62      	ldr	r3, [pc, #392]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 834c 	beq.w	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2SFreq();
 80049e8:	f7fd fd9e 	bl	8002528 <HAL_RCC_GetPLL2SFreq>
 80049ec:	6178      	str	r0, [r7, #20]
      break;
 80049ee:	e347      	b.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 80049f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8341 	beq.w	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2TFreq();
 80049fe:	f7fd fda9 	bl	8002554 <HAL_RCC_GetPLL2TFreq>
 8004a02:	6178      	str	r0, [r7, #20]
      break;
 8004a04:	e33c      	b.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
      clocksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8004a06:	4b57      	ldr	r3, [pc, #348]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a16:	d031      	beq.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a1e:	d843      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a26:	d01f      	beq.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a2e:	d83b      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
          break;
 8004a3e:	e033      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004a40:	4b48      	ldr	r3, [pc, #288]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02f      	beq.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004a4c:	f7fd fd14 	bl	8002478 <HAL_RCC_GetPLL1QFreq>
 8004a50:	6178      	str	r0, [r7, #20]
          break;
 8004a52:	e02b      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004a54:	4b43      	ldr	r3, [pc, #268]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d027      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
            frequency = HAL_RCC_GetPLL2RFreq();
 8004a60:	f7fd fd4c 	bl	80024fc <HAL_RCC_GetPLL2RFreq>
 8004a64:	6178      	str	r0, [r7, #20]
          break;
 8004a66:	e023      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004a68:	4b3e      	ldr	r3, [pc, #248]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01f      	beq.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004a74:	f7fd fdb2 	bl	80025dc <HAL_RCC_GetPLL3RFreq>
 8004a78:	6178      	str	r0, [r7, #20]
          break;
 8004a7a:	e01b      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a7c:	4b39      	ldr	r3, [pc, #228]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d017      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004a88:	4b36      	ldr	r3, [pc, #216]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d011      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a94:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	08db      	lsrs	r3, r3, #3
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	4a32      	ldr	r2, [pc, #200]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x115c>)
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
          break;
 8004aa6:	e007      	b.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
          break;
 8004aa8:	bf00      	nop
 8004aaa:	e2ea      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004aac:	bf00      	nop
 8004aae:	e2e8      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ab0:	bf00      	nop
 8004ab2:	e2e6      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ab4:	bf00      	nop
 8004ab6:	e2e4      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ab8:	bf00      	nop
      break;
 8004aba:	e2e2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI1_SOURCE();
 8004abc:	4b29      	ldr	r3, [pc, #164]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004acc:	d039      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad4:	d83d      	bhi.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004adc:	d035      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x113e>
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ae4:	d835      	bhi.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aec:	d01f      	beq.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af4:	d82d      	bhi.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10fa>
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
          break;
 8004b04:	e025      	b.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004b06:	4b17      	ldr	r3, [pc, #92]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d021      	beq.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004b12:	f7fd fcb1 	bl	8002478 <HAL_RCC_GetPLL1QFreq>
 8004b16:	6178      	str	r0, [r7, #20]
          break;
 8004b18:	e01d      	b.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004b1a:	4b12      	ldr	r3, [pc, #72]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d019      	beq.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004b26:	f7fd fcbd 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 8004b2a:	6178      	str	r0, [r7, #20]
          break;
 8004b2c:	e015      	b.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004b3a:	f7fd fd23 	bl	8002584 <HAL_RCC_GetPLL3PFreq>
 8004b3e:	6178      	str	r0, [r7, #20]
          break;
 8004b40:	e00d      	b.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
          frequency = RCC_GetCLKPFreq();
 8004b42:	f000 fab7 	bl	80050b4 <RCC_GetCLKPFreq>
 8004b46:	6178      	str	r0, [r7, #20]
          break;
 8004b48:	e00a      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b4a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004b4e:	617b      	str	r3, [r7, #20]
          break;
 8004b50:	e006      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          break;
 8004b52:	bf00      	nop
 8004b54:	e295      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b56:	bf00      	nop
 8004b58:	e293      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b5a:	bf00      	nop
 8004b5c:	e291      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b5e:	bf00      	nop
      break;
 8004b60:	e28f      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400
 8004b68:	03d09000 	.word	0x03d09000
      clocksource = __HAL_RCC_GET_SPI23_SOURCE();
 8004b6c:	4b92      	ldr	r3, [pc, #584]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b40      	cmp	r3, #64	@ 0x40
 8004b7a:	d033      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b40      	cmp	r3, #64	@ 0x40
 8004b80:	d838      	bhi.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b30      	cmp	r3, #48	@ 0x30
 8004b86:	d031      	beq.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b30      	cmp	r3, #48	@ 0x30
 8004b8c:	d832      	bhi.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d01d      	beq.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d82c      	bhi.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
          break;
 8004ba6:	e025      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004ba8:	4b83      	ldr	r3, [pc, #524]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d021      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004bb4:	f7fd fc60 	bl	8002478 <HAL_RCC_GetPLL1QFreq>
 8004bb8:	6178      	str	r0, [r7, #20]
          break;
 8004bba:	e01d      	b.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d019      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004bc8:	f7fd fc6c 	bl	80024a4 <HAL_RCC_GetPLL2PFreq>
 8004bcc:	6178      	str	r0, [r7, #20]
          break;
 8004bce:	e015      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004bd0:	4b79      	ldr	r3, [pc, #484]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d011      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004bdc:	f7fd fcd2 	bl	8002584 <HAL_RCC_GetPLL3PFreq>
 8004be0:	6178      	str	r0, [r7, #20]
          break;
 8004be2:	e00d      	b.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
          frequency = RCC_GetCLKPFreq();
 8004be4:	f000 fa66 	bl	80050b4 <RCC_GetCLKPFreq>
 8004be8:	6178      	str	r0, [r7, #20]
          break;
 8004bea:	e00a      	b.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bec:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004bf0:	617b      	str	r3, [r7, #20]
          break;
 8004bf2:	e006      	b.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          break;
 8004bf4:	bf00      	nop
 8004bf6:	e244      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bf8:	bf00      	nop
 8004bfa:	e242      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bfc:	bf00      	nop
 8004bfe:	e240      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c00:	bf00      	nop
      break;
 8004c02:	e23e      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI45_SOURCE();
 8004c04:	4b6c      	ldr	r3, [pc, #432]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b50      	cmp	r3, #80	@ 0x50
 8004c12:	d052      	beq.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b50      	cmp	r3, #80	@ 0x50
 8004c18:	d858      	bhi.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b40      	cmp	r3, #64	@ 0x40
 8004c1e:	d043      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b40      	cmp	r3, #64	@ 0x40
 8004c24:	d852      	bhi.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b30      	cmp	r3, #48	@ 0x30
 8004c2a:	d027      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b30      	cmp	r3, #48	@ 0x30
 8004c30:	d84c      	bhi.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d017      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d846      	bhi.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d004      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
          break;
 8004c4a:	e03f      	b.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7fd fbdc 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8004c50:	6178      	str	r0, [r7, #20]
          break;
 8004c52:	e046      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004c54:	4b58      	ldr	r3, [pc, #352]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d037      	beq.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004c60:	f7fd fc36 	bl	80024d0 <HAL_RCC_GetPLL2QFreq>
 8004c64:	6178      	str	r0, [r7, #20]
          break;
 8004c66:	e033      	b.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004c68:	4b53      	ldr	r3, [pc, #332]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02f      	beq.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004c74:	f7fd fc9c 	bl	80025b0 <HAL_RCC_GetPLL3QFreq>
 8004c78:	6178      	str	r0, [r7, #20]
          break;
 8004c7a:	e02b      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d027      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004c88:	4b4b      	ldr	r3, [pc, #300]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d021      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c94:	4b48      	ldr	r3, [pc, #288]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	08db      	lsrs	r3, r3, #3
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	4a47      	ldr	r2, [pc, #284]	@ (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]
          break;
 8004ca6:	e017      	b.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004ca8:	4b43      	ldr	r3, [pc, #268]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
            frequency = CSI_VALUE;
 8004cb4:	4b42      	ldr	r3, [pc, #264]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004cb6:	617b      	str	r3, [r7, #20]
          break;
 8004cb8:	e010      	b.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cba:	4b3f      	ldr	r3, [pc, #252]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
            frequency = HSE_VALUE;
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8004cc8:	617b      	str	r3, [r7, #20]
          break;
 8004cca:	e009      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
          break;
 8004ccc:	bf00      	nop
 8004cce:	e1d8      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cd0:	bf00      	nop
 8004cd2:	e1d6      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cd4:	bf00      	nop
 8004cd6:	e1d4      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cd8:	bf00      	nop
 8004cda:	e1d2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cdc:	bf00      	nop
 8004cde:	e1d0      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ce0:	bf00      	nop
      break;
 8004ce2:	e1ce      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI6_SOURCE();
 8004ce4:	4b34      	ldr	r3, [pc, #208]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b50      	cmp	r3, #80	@ 0x50
 8004cf2:	d052      	beq.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x138e>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2b50      	cmp	r3, #80	@ 0x50
 8004cf8:	d858      	bhi.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b40      	cmp	r3, #64	@ 0x40
 8004cfe:	d043      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x137c>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d852      	bhi.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b30      	cmp	r3, #48	@ 0x30
 8004d0a:	d027      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b30      	cmp	r3, #48	@ 0x30
 8004d10:	d84c      	bhi.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d017      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d846      	bhi.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1320>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d004      	beq.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1328>
          break;
 8004d2a:	e03f      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004d2c:	f7fd fb88 	bl	8002440 <HAL_RCC_GetPCLK4Freq>
 8004d30:	6178      	str	r0, [r7, #20]
          break;
 8004d32:	e04e      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004d34:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d037      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004d40:	f7fd fbc6 	bl	80024d0 <HAL_RCC_GetPLL2QFreq>
 8004d44:	6178      	str	r0, [r7, #20]
          break;
 8004d46:	e033      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004d48:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d02f      	beq.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004d54:	f7fd fc2c 	bl	80025b0 <HAL_RCC_GetPLL3QFreq>
 8004d58:	6178      	str	r0, [r7, #20]
          break;
 8004d5a:	e02b      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d5c:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02f      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004d68:	4b13      	ldr	r3, [pc, #76]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d029      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d74:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
          break;
 8004d86:	e01f      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004d88:	4b0b      	ldr	r3, [pc, #44]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01b      	beq.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
            frequency = CSI_VALUE;
 8004d94:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004d96:	617b      	str	r3, [r7, #20]
          break;
 8004d98:	e018      	b.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d9a:	4b07      	ldr	r3, [pc, #28]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d014      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
            frequency = HSE_VALUE;
 8004da6:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8004da8:	617b      	str	r3, [r7, #20]
          break;
 8004daa:	e011      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
          break;
 8004dac:	bf00      	nop
 8004dae:	e168      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004db0:	bf00      	nop
 8004db2:	e166      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004db4:	bf00      	nop
 8004db6:	e164      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	03d09000 	.word	0x03d09000
 8004dc0:	003d0900 	.word	0x003d0900
 8004dc4:	016e3600 	.word	0x016e3600
          break;
 8004dc8:	bf00      	nop
 8004dca:	e15a      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004dcc:	bf00      	nop
 8004dce:	e158      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004dd0:	bf00      	nop
      break;
 8004dd2:	e156      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART1_SOURCE();
 8004dd4:	4b9e      	ldr	r3, [pc, #632]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d850      	bhi.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8004de4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e05 	.word	0x08004e05
 8004df0:	08004e0d 	.word	0x08004e0d
 8004df4:	08004e21 	.word	0x08004e21
 8004df8:	08004e35 	.word	0x08004e35
 8004dfc:	08004e61 	.word	0x08004e61
 8004e00:	08004e73 	.word	0x08004e73
          frequency = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7fd fb00 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8004e08:	6178      	str	r0, [r7, #20]
          break;
 8004e0a:	e047      	b.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004e0c:	4b90      	ldr	r3, [pc, #576]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d038      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004e18:	f7fd fb5a 	bl	80024d0 <HAL_RCC_GetPLL2QFreq>
 8004e1c:	6178      	str	r0, [r7, #20]
          break;
 8004e1e:	e034      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004e20:	4b8b      	ldr	r3, [pc, #556]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d030      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004e2c:	f7fd fbc0 	bl	80025b0 <HAL_RCC_GetPLL3QFreq>
 8004e30:	6178      	str	r0, [r7, #20]
          break;
 8004e32:	e02c      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e34:	4b86      	ldr	r3, [pc, #536]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d028      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004e40:	4b83      	ldr	r3, [pc, #524]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d022      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e4c:	4b80      	ldr	r3, [pc, #512]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	08db      	lsrs	r3, r3, #3
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	4a7f      	ldr	r2, [pc, #508]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]
          break;
 8004e5e:	e018      	b.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004e60:	4b7b      	ldr	r3, [pc, #492]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d014      	beq.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
            frequency = CSI_VALUE;
 8004e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8004e6e:	617b      	str	r3, [r7, #20]
          break;
 8004e70:	e011      	b.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e72:	4b77      	ldr	r3, [pc, #476]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00d      	beq.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
            frequency = LSE_VALUE;
 8004e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e82:	617b      	str	r3, [r7, #20]
          break;
 8004e84:	e009      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          break;
 8004e86:	bf00      	nop
 8004e88:	e0fb      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e8a:	bf00      	nop
 8004e8c:	e0f9      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e8e:	bf00      	nop
 8004e90:	e0f7      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e92:	bf00      	nop
 8004e94:	e0f5      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e96:	bf00      	nop
 8004e98:	e0f3      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e9a:	bf00      	nop
      break;
 8004e9c:	e0f1      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART234578_SOURCE();
 8004e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d84f      	bhi.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1542>
 8004eae:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a8>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ecd 	.word	0x08004ecd
 8004eb8:	08004ed5 	.word	0x08004ed5
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	08004efd 	.word	0x08004efd
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f3b 	.word	0x08004f3b
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f7fd fa80 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	6178      	str	r0, [r7, #20]
          break;
 8004ed2:	e047      	b.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d038      	beq.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004ee0:	f7fd faf6 	bl	80024d0 <HAL_RCC_GetPLL2QFreq>
 8004ee4:	6178      	str	r0, [r7, #20]
          break;
 8004ee6:	e034      	b.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004ee8:	4b59      	ldr	r3, [pc, #356]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d030      	beq.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004ef4:	f7fd fb5c 	bl	80025b0 <HAL_RCC_GetPLL3QFreq>
 8004ef8:	6178      	str	r0, [r7, #20]
          break;
 8004efa:	e02c      	b.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004efc:	4b54      	ldr	r3, [pc, #336]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d028      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004f08:	4b51      	ldr	r3, [pc, #324]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d022      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f14:	4b4e      	ldr	r3, [pc, #312]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	08db      	lsrs	r3, r3, #3
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
          break;
 8004f26:	e018      	b.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004f28:	4b49      	ldr	r3, [pc, #292]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d014      	beq.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
            frequency = CSI_VALUE;
 8004f34:	4b48      	ldr	r3, [pc, #288]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8004f36:	617b      	str	r3, [r7, #20]
          break;
 8004f38:	e011      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f3a:	4b45      	ldr	r3, [pc, #276]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00d      	beq.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
            frequency = LSE_VALUE;
 8004f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f4a:	617b      	str	r3, [r7, #20]
          break;
 8004f4c:	e009      	b.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
          break;
 8004f4e:	bf00      	nop
 8004f50:	e097      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f52:	bf00      	nop
 8004f54:	e095      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f56:	bf00      	nop
 8004f58:	e093      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f5a:	bf00      	nop
 8004f5c:	e091      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f5e:	bf00      	nop
 8004f60:	e08f      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f62:	bf00      	nop
      break;
 8004f64:	e08d      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBPHYC_SOURCE();
 8004f66:	4b3a      	ldr	r3, [pc, #232]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f76:	d01d      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7e:	d823      	bhi.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
          break;
 8004f8e:	e01b      	b.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f90:	4b2f      	ldr	r3, [pc, #188]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
            frequency = HSE_VALUE;
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8004f9e:	617b      	str	r3, [r7, #20]
          break;
 8004fa0:	e014      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
            frequency = (HSE_VALUE >> 1UL);
 8004fae:	4b2c      	ldr	r3, [pc, #176]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>)
 8004fb0:	617b      	str	r3, [r7, #20]
          break;
 8004fb2:	e00d      	b.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004fb4:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004fc0:	f7fd faf6 	bl	80025b0 <HAL_RCC_GetPLL3QFreq>
 8004fc4:	6178      	str	r0, [r7, #20]
          break;
 8004fc6:	e005      	b.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
          break;
 8004fc8:	bf00      	nop
 8004fca:	e05a      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004fcc:	bf00      	nop
 8004fce:	e058      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004fd0:	bf00      	nop
 8004fd2:	e056      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004fd4:	bf00      	nop
      break;
 8004fd6:	e054      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBOTGFS_SOURCE();
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8004fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fe8:	d02f      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ff0:	d83a      	bhi.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff8:	d01e      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005000:	d832      	bhi.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800500e:	d009      	beq.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
          break;
 8005010:	e02a      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
          if (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005012:	4b0f      	ldr	r3, [pc, #60]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d026      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
            frequency = HSI48_VALUE;
 800501e:	4b11      	ldr	r3, [pc, #68]	@ (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8005020:	617b      	str	r3, [r7, #20]
          break;
 8005022:	e023      	b.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005024:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01f      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            frequency = HAL_RCC_GetPLL3QFreq();
 8005030:	f7fd fabe 	bl	80025b0 <HAL_RCC_GetPLL3QFreq>
 8005034:	6178      	str	r0, [r7, #20]
          break;
 8005036:	e01b      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005038:	4b05      	ldr	r3, [pc, #20]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d017      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
            frequency = HSE_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8005046:	617b      	str	r3, [r7, #20]
          break;
 8005048:	e014      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
          break;
 800504a:	bf00      	nop
 800504c:	e019      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 800504e:	bf00      	nop
 8005050:	58024400 	.word	0x58024400
 8005054:	03d09000 	.word	0x03d09000
 8005058:	003d0900 	.word	0x003d0900
 800505c:	016e3600 	.word	0x016e3600
 8005060:	00b71b00 	.word	0x00b71b00
 8005064:	02dc6c00 	.word	0x02dc6c00
          break;
 8005068:	bf00      	nop
 800506a:	e00a      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800506c:	bf00      	nop
 800506e:	e008      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005070:	bf00      	nop
 8005072:	e006      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005074:	bf00      	nop
      break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8005078:	bf00      	nop
 800507a:	e002      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 800507c:	bf00      	nop
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8005080:	bf00      	nop
  }

  return frequency;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_RCCEx_EnableClockProtection>:
  *            @arg RCC_CLOCKPROTECT_FMC     FMC clock protection
  *            @arg RCC_CLOCKPROTECT_XSPI    XSPIs clock protection
  * @retval None
  */
void HAL_RCCEx_EnableClockProtection(uint32_t ProtectClk)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_RCC_CLOCKPROTECTION(ProtectClk));

  SET_BIT(RCC->CKPROTR, ProtectClk);
 8005094:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <HAL_RCCEx_EnableClockProtection+0x24>)
 8005096:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800509a:	4905      	ldr	r1, [pc, #20]	@ (80050b0 <HAL_RCCEx_EnableClockProtection+0x24>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	58024400 	.word	0x58024400

080050b4 <RCC_GetCLKPFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_GetCLKPFreq(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
  uint32_t ckpclocksource;

  ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050be:	4b1f      	ldr	r3, [pc, #124]	@ (800513c <RCC_GetCLKPFreq+0x88>)
 80050c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80050c6:	603b      	str	r3, [r7, #0]

  if (ckpclocksource == RCC_CLKPSOURCE_HSI)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d115      	bne.n	80050fa <RCC_GetCLKPFreq+0x46>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ce:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <RCC_GetCLKPFreq+0x88>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d028      	beq.n	800512c <RCC_GetCLKPFreq+0x78>
    {
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80050da:	4b18      	ldr	r3, [pc, #96]	@ (800513c <RCC_GetCLKPFreq+0x88>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d022      	beq.n	800512c <RCC_GetCLKPFreq+0x78>
      {
        frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050e6:	4b15      	ldr	r3, [pc, #84]	@ (800513c <RCC_GetCLKPFreq+0x88>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	4a13      	ldr	r2, [pc, #76]	@ (8005140 <RCC_GetCLKPFreq+0x8c>)
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e018      	b.n	800512c <RCC_GetCLKPFreq+0x78>
      {
        /* Can't retrieve HSIDIV value */
      }
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_CSI)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005100:	d108      	bne.n	8005114 <RCC_GetCLKPFreq+0x60>
  {
    if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005102:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <RCC_GetCLKPFreq+0x88>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00e      	beq.n	800512c <RCC_GetCLKPFreq+0x78>
    {
      frequency = CSI_VALUE;
 800510e:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <RCC_GetCLKPFreq+0x90>)
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	e00b      	b.n	800512c <RCC_GetCLKPFreq+0x78>
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_HSE)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800511a:	d107      	bne.n	800512c <RCC_GetCLKPFreq+0x78>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800511c:	4b07      	ldr	r3, [pc, #28]	@ (800513c <RCC_GetCLKPFreq+0x88>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <RCC_GetCLKPFreq+0x78>
    {
      frequency = HSE_VALUE;
 8005128:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <RCC_GetCLKPFreq+0x94>)
 800512a:	607b      	str	r3, [r7, #4]
  {
    /* Nothing to do, case the CKPER is disabled */
    /* frequency is by default set to 0          */
  }

  return frequency;
 800512c:	687b      	ldr	r3, [r7, #4]
}
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	03d09000 	.word	0x03d09000
 8005144:	003d0900 	.word	0x003d0900
 8005148:	016e3600 	.word	0x016e3600

0800514c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e02b      	b.n	80051b8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fb fd4f 	bl	8000c18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f000 ff97 	bl	80060c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	461a      	mov	r2, r3
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	f000 ffeb 	bl	8006178 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80051a2:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <HAL_SDRAM_Init+0x74>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a06      	ldr	r2, [pc, #24]	@ (80051c0 <HAL_SDRAM_Init+0x74>)
 80051a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051ac:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	52004000 	.word	0x52004000

080051c4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80051d6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d101      	bne.n	80051e2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
 80051e0:	e021      	b.n	8005226 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d002      	beq.n	80051ee <HAL_SDRAM_SendCommand+0x2a>
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d118      	bne.n	8005220 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 f824 	bl	800624c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d104      	bne.n	8005216 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2205      	movs	r2, #5
 8005210:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005214:	e006      	b.n	8005224 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800521e:	e001      	b.n	8005224 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d101      	bne.n	8005248 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
 8005246:	e016      	b.n	8005276 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10f      	bne.n	8005274 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f001 f816 	bl	8006294 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800528c:	f7fb fda8 	bl	8000de0 <HAL_GetTick>
 8005290:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
 800529c:	e0cb      	b.n	8005436 <HAL_XSPI_Init+0x1b6>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 80c4 	bne.w	8005436 <HAL_XSPI_Init+0x1b6>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fb fb62 	bl	8000978 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80052b4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fbce 	bl	8005a5a <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005440 <HAL_XSPI_Init+0x1c0>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68d1      	ldr	r1, [r2, #12]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6912      	ldr	r2, [r2, #16]
 80052d0:	0412      	lsls	r2, r2, #16
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6952      	ldr	r2, [r2, #20]
 80052d8:	3a01      	subs	r2, #1
 80052da:	0212      	lsls	r2, r2, #8
 80052dc:	4311      	orrs	r1, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	69d2      	ldr	r2, [r2, #28]
 80052e2:	4311      	orrs	r1, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1a      	ldr	r2, [r3, #32]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	041a      	lsls	r2, r3, #16
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005338:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	3b01      	subs	r3, #1
 800534a:	021a      	lsls	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2200      	movs	r2, #0
 800535e:	2120      	movs	r1, #32
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fc79 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d162      	bne.n	8005436 <HAL_XSPI_Init+0x1b6>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2e      	ldr	r2, [pc, #184]	@ (8005444 <HAL_XSPI_Init+0x1c4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_XSPI_Init+0x11a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <HAL_XSPI_Init+0x1c8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d10f      	bne.n	80053ba <HAL_XSPI_Init+0x13a>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2120      	movs	r1, #32
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fc56 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_XSPI_Init+0x13a>
          {
            return status;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	e03e      	b.n	8005438 <HAL_XSPI_Init+0x1b8>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b22      	ldr	r3, [pc, #136]	@ (800544c <HAL_XSPI_Init+0x1cc>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6891      	ldr	r1, [r2, #8]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053cc:	4311      	orrs	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	430b      	orrs	r3, r1
 80053d4:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053de:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0201 	orr.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d107      	bne.n	800541e <HAL_XSPI_Init+0x19e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0202 	orr.w	r2, r2, #2
 800541c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005426:	d103      	bne.n	8005430 <HAL_XSPI_Init+0x1b0>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54
 800542e:	e002      	b.n	8005436 <HAL_XSPI_Init+0x1b6>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	f8e0c0fc 	.word	0xf8e0c0fc
 8005444:	52005000 	.word	0x52005000
 8005448:	5200a000 	.word	0x5200a000
 800544c:	feffffbf 	.word	0xfeffffbf

08005450 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	@ 0x28
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800545c:	f7fb fcc0 	bl	8000de0 <HAL_GetTick>
 8005460:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d104      	bne.n	800547e <HAL_XSPI_Command+0x2e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800547c:	d115      	bne.n	80054aa <HAL_XSPI_Command+0x5a>
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b14      	cmp	r3, #20
 8005482:	d107      	bne.n	8005494 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d00e      	beq.n	80054aa <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8005490:	2b03      	cmp	r3, #3
 8005492:	d00a      	beq.n	80054aa <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b24      	cmp	r3, #36	@ 0x24
 8005498:	d15e      	bne.n	8005558 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d003      	beq.n	80054aa <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d156      	bne.n	8005558 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2120      	movs	r1, #32
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fbcf 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80054be:	7ffb      	ldrb	r3, [r7, #31]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d146      	bne.n	8005552 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fbf9 	bl	8005cc4 <XSPI_ConfigCmd>
 80054d2:	4603      	mov	r3, r0
 80054d4:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80054d6:	7ffb      	ldrb	r3, [r7, #31]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d143      	bne.n	8005564 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10e      	bne.n	8005502 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2201      	movs	r2, #1
 80054ec:	2102      	movs	r1, #2
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fbb2 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2202      	movs	r2, #2
 80054fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005500:	e030      	b.n	8005564 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2204      	movs	r2, #4
 800550e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005510:	e028      	b.n	8005564 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10b      	bne.n	8005532 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551e:	2b24      	cmp	r3, #36	@ 0x24
 8005520:	d103      	bne.n	800552a <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2204      	movs	r2, #4
 8005526:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005528:	e01c      	b.n	8005564 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2214      	movs	r2, #20
 800552e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005530:	e018      	b.n	8005564 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d114      	bne.n	8005564 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	2b14      	cmp	r3, #20
 8005540:	d103      	bne.n	800554a <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2204      	movs	r2, #4
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005548:	e00c      	b.n	8005564 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2224      	movs	r2, #36	@ 0x24
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005550:	e008      	b.n	8005564 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8005552:	2302      	movs	r3, #2
 8005554:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8005556:	e005      	b.n	8005564 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2210      	movs	r2, #16
 8005560:	659a      	str	r2, [r3, #88]	@ 0x58
 8005562:	e000      	b.n	8005566 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8005564:	bf00      	nop
  }

  return status;
 8005566:	7ffb      	ldrb	r3, [r7, #31]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	@ 0x28
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800557c:	f7fb fc30 	bl	8000de0 <HAL_GetTick>
 8005580:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3350      	adds	r3, #80	@ 0x50
 8005588:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2208      	movs	r2, #8
 8005598:	659a      	str	r2, [r3, #88]	@ 0x58
 800559a:	e057      	b.n	800564c <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d14e      	bne.n	8005642 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = (uint8_t *)pData;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80055cc:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2201      	movs	r2, #1
 80055d6:	2104      	movs	r1, #4
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fb3d 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005600:	1e5a      	subs	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1df      	bne.n	80055ce <HAL_XSPI_Transmit+0x5e>
 800560e:	e000      	b.n	8005612 <HAL_XSPI_Transmit+0xa2>
          break;
 8005610:	bf00      	nop

      if (status == HAL_OK)
 8005612:	7ffb      	ldrb	r3, [r7, #31]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d119      	bne.n	800564c <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2201      	movs	r2, #1
 8005620:	2102      	movs	r1, #2
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fb18 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800562c:	7ffb      	ldrb	r3, [r7, #31]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10c      	bne.n	800564c <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2202      	movs	r2, #2
 8005638:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2202      	movs	r2, #2
 800563e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005640:	e004      	b.n	800564c <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2210      	movs	r2, #16
 800564a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 800564c:	7ffb      	ldrb	r3, [r7, #31]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b08c      	sub	sp, #48	@ 0x30
 800565a:	af02      	add	r7, sp, #8
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005662:	f7fb fbbd 	bl	8000de0 <HAL_GetTick>
 8005666:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3350      	adds	r3, #80	@ 0x50
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005676:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005680:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2208      	movs	r2, #8
 8005692:	659a      	str	r2, [r3, #88]	@ 0x58
 8005694:	e07c      	b.n	8005790 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569a:	2b04      	cmp	r3, #4
 800569c:	d172      	bne.n	8005784 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = pData;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056d4:	d104      	bne.n	80056e0 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	649a      	str	r2, [r3, #72]	@ 0x48
 80056de:	e011      	b.n	8005704 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80056e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	649a      	str	r2, [r3, #72]	@ 0x48
 80056f8:	e004      	b.n	8005704 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2201      	movs	r2, #1
 800570c:	2106      	movs	r1, #6
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 faa2 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800571a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800571e:	2b00      	cmp	r3, #0
 8005720:	d114      	bne.n	800574c <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573c:	1e5a      	subs	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1dc      	bne.n	8005704 <HAL_XSPI_Receive+0xae>
 800574a:	e000      	b.n	800574e <HAL_XSPI_Receive+0xf8>
          break;
 800574c:	bf00      	nop

      if (status == HAL_OK)
 800574e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005752:	2b00      	cmp	r3, #0
 8005754:	d11c      	bne.n	8005790 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	2201      	movs	r2, #1
 800575e:	2102      	movs	r1, #2
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fa79 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800576c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10d      	bne.n	8005790 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2202      	movs	r2, #2
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2202      	movs	r2, #2
 8005780:	655a      	str	r2, [r3, #84]	@ 0x54
 8005782:	e005      	b.n	8005790 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2210      	movs	r2, #16
 800578e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8005790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005794:	4618      	mov	r0, r3
 8005796:	3728      	adds	r7, #40	@ 0x28
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	@ 0x28
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80057a8:	f7fb fb1a 	bl	8000de0 <HAL_GetTick>
 80057ac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80057be:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d167      	bne.n	8005898 <HAL_XSPI_AutoPolling+0xfc>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d0:	d162      	bne.n	8005898 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2200      	movs	r2, #0
 80057da:	2120      	movs	r1, #32
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fa3b 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d152      	bne.n	8005892 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	6912      	ldr	r2, [r2, #16]
 800580c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6899      	ldr	r1, [r3, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	430b      	orrs	r3, r1
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800582e:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005838:	d104      	bne.n	8005844 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	649a      	str	r2, [r3, #72]	@ 0x48
 8005842:	e011      	b.n	8005868 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800584c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	649a      	str	r2, [r3, #72]	@ 0x48
 800585c:	e004      	b.n	8005868 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2201      	movs	r2, #1
 8005870:	2108      	movs	r1, #8
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f9f0 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800587c:	7ffb      	ldrb	r3, [r7, #31]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d110      	bne.n	80058a4 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2208      	movs	r2, #8
 8005888:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2202      	movs	r2, #2
 800588e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005890:	e008      	b.n	80058a4 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8005892:	2302      	movs	r3, #2
 8005894:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8005896:	e005      	b.n	80058a4 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2210      	movs	r2, #16
 80058a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80058a2:	e000      	b.n	80058a6 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 80058a4:	bf00      	nop
  }

  return status;
 80058a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80058ba:	f7fb fa91 	bl	8000de0 <HAL_GetTick>
 80058be:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d134      	bne.n	8005932 <HAL_XSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2200      	movs	r2, #0
 80058d2:	2120      	movs	r1, #32
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f9bf 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d12b      	bne.n	800593c <HAL_XSPI_MemoryMapped+0x8c>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2288      	movs	r2, #136	@ 0x88
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d111      	bne.n	8005916 <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	6852      	ldr	r2, [r2, #4]
 80058fa:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2210      	movs	r2, #16
 8005904:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005914:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <HAL_XSPI_MemoryMapped+0x98>)
 800591e:	4013      	ands	r3, r2
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e004      	b.n	800593c <HAL_XSPI_MemoryMapped+0x8c>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2210      	movs	r2, #16
 800593a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	cffffff7 	.word	0xcffffff7

0800594c <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005958:	f7fb fa42 	bl	8000de0 <HAL_GetTick>
 800595c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005962:	2b00      	cmp	r3, #0
 8005964:	d06f      	beq.n	8005a46 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d021      	beq.n	80059b8 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0204 	bic.w	r2, r2, #4
 8005982:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005988:	4618      	mov	r0, r3
 800598a:	f7fb fc65 	bl	8001258 <HAL_DMA_Abort>
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2204      	movs	r2, #4
 800599c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fb fc58 	bl	8001258 <HAL_DMA_Abort>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2204      	movs	r2, #4
 80059b6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d033      	beq.n	8005a2e <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0202 	orr.w	r2, r2, #2
 80059d4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2201      	movs	r2, #1
 80059e0:	2102      	movs	r1, #2
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f938 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d12e      	bne.n	8005a50 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2202      	movs	r2, #2
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	2120      	movs	r1, #32
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f926 	bl	8005c58 <XSPI_WaitFlagStateUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d11c      	bne.n	8005a50 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005a24:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a2c:	e010      	b.n	8005a50 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005a3c:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a44:	e004      	b.n	8005a50 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08c      	sub	sp, #48	@ 0x30
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t index;
  uint8_t xspi_enabled = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	609a      	str	r2, [r3, #8]
 8005a9c:	60da      	str	r2, [r3, #12]
 8005a9e:	611a      	str	r2, [r3, #16]
 8005aa0:	615a      	str	r2, [r3, #20]
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005aa8:	e014      	b.n	8005ad4 <HAL_XSPIM_Config+0x5c>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
 8005aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b2d8      	uxtb	r0, r3
 8005ab2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005ab6:	f107 0114 	add.w	r1, r7, #20
 8005aba:	4613      	mov	r3, r2
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f000 fa97 	bl	8005ff8 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 8005aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d9e6      	bls.n	8005aaa <HAL_XSPIM_Config+0x32>
  }

  /********** Disable both XSPI to configure XSPI IO Manager **********/
  if ((XSPI1->CR & XSPI_CR_EN) != 0U)
 8005adc:	4b5b      	ldr	r3, [pc, #364]	@ (8005c4c <HAL_XSPIM_Config+0x1d4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_XSPIM_Config+0x88>
  {
    CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
 8005ae8:	4b58      	ldr	r3, [pc, #352]	@ (8005c4c <HAL_XSPIM_Config+0x1d4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a57      	ldr	r2, [pc, #348]	@ (8005c4c <HAL_XSPIM_Config+0x1d4>)
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x1U;
 8005af4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }
  if ((XSPI2->CR & XSPI_CR_EN) != 0U)
 8005b00:	4b53      	ldr	r3, [pc, #332]	@ (8005c50 <HAL_XSPIM_Config+0x1d8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_XSPIM_Config+0xac>
  {
    CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
 8005b0c:	4b50      	ldr	r3, [pc, #320]	@ (8005c50 <HAL_XSPIM_Config+0x1d8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a4f      	ldr	r2, [pc, #316]	@ (8005c50 <HAL_XSPIM_Config+0x1d8>)
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x2U;
 8005b18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b1c:	f043 0302 	orr.w	r3, r3, #2
 8005b20:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
 8005b24:	4b4b      	ldr	r3, [pc, #300]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
 8005b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	4946      	ldr	r1, [pc, #280]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a41      	ldr	r2, [pc, #260]	@ (8005c4c <HAL_XSPIM_Config+0x1d4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d110      	bne.n	8005b6c <HAL_XSPIM_Config+0xf4>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	61bb      	str	r3, [r7, #24]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d027      	beq.n	8005ba8 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8005b58:	4b3e      	ldr	r3, [pc, #248]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	493b      	ldr	r1, [pc, #236]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]
 8005b6a:	e01d      	b.n	8005ba8 <HAL_XSPIM_Config+0x130>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a37      	ldr	r2, [pc, #220]	@ (8005c50 <HAL_XSPIM_Config+0x1d8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d110      	bne.n	8005b98 <HAL_XSPIM_Config+0x120>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d011      	beq.n	8005ba8 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8005b84:	4b33      	ldr	r3, [pc, #204]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4930      	ldr	r1, [pc, #192]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]
 8005b96:	e007      	b.n	8005ba8 <HAL_XSPIM_Config+0x130>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9c:	f043 0208 	orr.w	r2, r3, #8
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	659a      	str	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e04c      	b.n	8005c42 <HAL_XSPIM_Config+0x1ca>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005bae:	e02a      	b.n	8005c06 <HAL_XSPIM_Config+0x18e>
  {
    if ((IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort))
 8005bb0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	3330      	adds	r3, #48	@ 0x30
 8005bbe:	443b      	add	r3, r7
 8005bc0:	3b18      	subs	r3, #24
 8005bc2:	6819      	ldr	r1, [r3, #0]
 8005bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	4613      	mov	r3, r2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	3330      	adds	r3, #48	@ 0x30
 8005bd4:	443b      	add	r3, r7
 8005bd6:	3b18      	subs	r3, #24
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	d105      	bne.n	8005bea <HAL_XSPIM_Config+0x172>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
 8005bde:	4b1d      	ldr	r3, [pc, #116]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d105      	bne.n	8005bfc <HAL_XSPIM_Config+0x184>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
 8005bf0:	4b18      	ldr	r3, [pc, #96]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a17      	ldr	r2, [pc, #92]	@ (8005c54 <HAL_XSPIM_Config+0x1dc>)
 8005bf6:	f043 0302 	orr.w	r3, r3, #2
 8005bfa:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 8005bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c00:	3301      	adds	r3, #1
 8005c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0d0      	beq.n	8005bb0 <HAL_XSPIM_Config+0x138>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
 8005c0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_XSPIM_Config+0x1ae>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c4c <HAL_XSPIM_Config+0x1d4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8005c4c <HAL_XSPIM_Config+0x1d4>)
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
 8005c26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_XSPIM_Config+0x1c6>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
 8005c32:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <HAL_XSPIM_Config+0x1d8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a06      	ldr	r2, [pc, #24]	@ (8005c50 <HAL_XSPIM_Config+0x1d8>)
 8005c38:	f043 0301 	orr.w	r3, r3, #1
 8005c3c:	6013      	str	r3, [r2, #0]
  }

  return status;
 8005c3e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3730      	adds	r7, #48	@ 0x30
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	52005000 	.word	0x52005000
 8005c50:	5200a000 	.word	0x5200a000
 8005c54:	5200b400 	.word	0x5200b400

08005c58 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8005c68:	e019      	b.n	8005c9e <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d015      	beq.n	8005c9e <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c72:	f7fb f8b5 	bl	8000de0 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c92:	f043 0201 	orr.w	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e00e      	b.n	8005cbc <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d1d7      	bne.n	8005c6a <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b089      	sub	sp, #36	@ 0x24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ce0:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d114      	bne.n	8005d32 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005d10:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005d1a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005d24:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e02c      	b.n	8005d8c <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d114      	bne.n	8005d64 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005d42:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005d4c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d56:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e013      	b.n	8005d8c <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005d6c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005d76:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8005d80:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d012      	beq.n	8005dc2 <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db4:	4319      	orrs	r1, r3
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 021f 	bic.w	r2, r3, #31
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d009      	beq.n	8005df0 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3a01      	subs	r2, #1
 8005dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01e      	beq.n	8005e36 <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e00:	d10a      	bne.n	8005e18 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8005e12:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8005e16:	e00e      	b.n	8005e36 <XSPI_ConfigCmd+0x172>
    }
    else if(hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e20:	d109      	bne.n	8005e36 <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005e32:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8095 	beq.w	8005f6a <XSPI_ConfigCmd+0x2a6>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d053      	beq.n	8005ef0 <XSPI_ConfigCmd+0x22c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01e      	beq.n	8005e8e <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b64      	ldr	r3, [pc, #400]	@ (8005fe8 <XSPI_ConfigCmd+0x324>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	68d1      	ldr	r1, [r2, #12]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	6952      	ldr	r2, [r2, #20]
 8005e60:	4311      	orrs	r1, r2
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	6912      	ldr	r2, [r2, #16]
 8005e66:	4311      	orrs	r1, r2
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	69d2      	ldr	r2, [r2, #28]
 8005e6c:	4311      	orrs	r1, r2
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e72:	4311      	orrs	r1, r2
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	6a12      	ldr	r2, [r2, #32]
 8005e78:	4311      	orrs	r1, r2
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e7e:	4311      	orrs	r1, r2
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005e84:	430a      	orrs	r2, r1
 8005e86:	431a      	orrs	r2, r3
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e026      	b.n	8005edc <XSPI_ConfigCmd+0x218>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b56      	ldr	r3, [pc, #344]	@ (8005fec <XSPI_ConfigCmd+0x328>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	68d1      	ldr	r1, [r2, #12]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	6952      	ldr	r2, [r2, #20]
 8005e9e:	4311      	orrs	r1, r2
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	6912      	ldr	r2, [r2, #16]
 8005ea4:	4311      	orrs	r1, r2
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	69d2      	ldr	r2, [r2, #28]
 8005eaa:	4311      	orrs	r1, r2
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eb0:	4311      	orrs	r1, r2
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	6a12      	ldr	r2, [r2, #32]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ec6:	d109      	bne.n	8005edc <XSPI_ConfigCmd+0x218>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d105      	bne.n	8005edc <XSPI_ConfigCmd+0x218>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	6992      	ldr	r2, [r2, #24]
 8005eec:	649a      	str	r2, [r3, #72]	@ 0x48
 8005eee:	e074      	b.n	8005fda <XSPI_ConfigCmd+0x316>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <XSPI_ConfigCmd+0x260>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff0 <XSPI_ConfigCmd+0x32c>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	68d1      	ldr	r1, [r2, #12]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	6952      	ldr	r2, [r2, #20]
 8005f08:	4311      	orrs	r1, r2
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	6912      	ldr	r2, [r2, #16]
 8005f0e:	4311      	orrs	r1, r2
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f14:	4311      	orrs	r1, r2
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e01d      	b.n	8005f60 <XSPI_ConfigCmd+0x29c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68d9      	ldr	r1, [r3, #12]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	4319      	orrs	r1, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f4a:	d109      	bne.n	8005f60 <XSPI_ConfigCmd+0x29c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d105      	bne.n	8005f60 <XSPI_ConfigCmd+0x29c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	e037      	b.n	8005fda <XSPI_ConfigCmd+0x316>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02e      	beq.n	8005fd0 <XSPI_ConfigCmd+0x30c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d015      	beq.n	8005fa6 <XSPI_ConfigCmd+0x2e2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff4 <XSPI_ConfigCmd+0x330>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	69d1      	ldr	r1, [r2, #28]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f8a:	4311      	orrs	r1, r2
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	6a12      	ldr	r2, [r2, #32]
 8005f90:	4311      	orrs	r1, r2
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f96:	4311      	orrs	r1, r2
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e00e      	b.n	8005fc4 <XSPI_ConfigCmd+0x300>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	69d9      	ldr	r1, [r3, #28]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	4319      	orrs	r1, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	6992      	ldr	r2, [r2, #24]
 8005fcc:	649a      	str	r2, [r3, #72]	@ 0x48
 8005fce:	e004      	b.n	8005fda <XSPI_ConfigCmd+0x316>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8005fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3724      	adds	r7, #36	@ 0x24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	f0ffc0c0 	.word	0xf0ffc0c0
 8005fec:	ffffc0c0 	.word	0xffffc0c0
 8005ff0:	f0ffffc0 	.word	0xf0ffffc0
 8005ff4:	f0ffc0ff 	.word	0xf0ffc0ff

08005ff8 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	6039      	str	r1, [r7, #0]
 8006002:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d124      	bne.n	8006054 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
 800600a:	4b2c      	ldr	r3, [pc, #176]	@ (80060bc <XSPIM_GetConfig+0xc4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2200      	movs	r2, #0
 800601a:	605a      	str	r2, [r3, #4]
 800601c:	e002      	b.n	8006024 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2201      	movs	r2, #1
 8006022:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8006024:	4b25      	ldr	r3, [pc, #148]	@ (80060bc <XSPIM_GetConfig+0xc4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b10      	cmp	r3, #16
 800602e:	d003      	beq.n	8006038 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
 8006036:	e03a      	b.n	80060ae <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
 8006038:	4b20      	ldr	r3, [pc, #128]	@ (80060bc <XSPIM_GetConfig+0xc4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b20      	cmp	r3, #32
 8006042:	d103      	bne.n	800604c <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2270      	movs	r2, #112	@ 0x70
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	e030      	b.n	80060ae <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2210      	movs	r2, #16
 8006050:	601a      	str	r2, [r3, #0]
}
 8006052:	e02c      	b.n	80060ae <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
 8006054:	4b19      	ldr	r3, [pc, #100]	@ (80060bc <XSPIM_GetConfig+0xc4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
 800605e:	4b17      	ldr	r3, [pc, #92]	@ (80060bc <XSPIM_GetConfig+0xc4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	085b      	lsrs	r3, r3, #1
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d003      	beq.n	800607a <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2200      	movs	r2, #0
 8006076:	605a      	str	r2, [r3, #4]
 8006078:	e002      	b.n	8006080 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2201      	movs	r2, #1
 800607e:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8006080:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <XSPIM_GetConfig+0xc4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b10      	cmp	r3, #16
 800608a:	d003      	beq.n	8006094 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	e00c      	b.n	80060ae <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
 8006094:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <XSPIM_GetConfig+0xc4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609c:	2b40      	cmp	r3, #64	@ 0x40
 800609e:	d103      	bne.n	80060a8 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2270      	movs	r2, #112	@ 0x70
 80060a4:	601a      	str	r2, [r3, #0]
}
 80060a6:	e002      	b.n	80060ae <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2210      	movs	r2, #16
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	5200b400 	.word	0x5200b400

080060c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d121      	bne.n	8006116 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b27      	ldr	r3, [pc, #156]	@ (8006174 <FMC_SDRAM_Init+0xb4>)
 80060d8:	4013      	ands	r3, r2
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	6851      	ldr	r1, [r2, #4]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	6892      	ldr	r2, [r2, #8]
 80060e2:	4311      	orrs	r1, r2
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	68d2      	ldr	r2, [r2, #12]
 80060e8:	4311      	orrs	r1, r2
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	6912      	ldr	r2, [r2, #16]
 80060ee:	4311      	orrs	r1, r2
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	6952      	ldr	r2, [r2, #20]
 80060f4:	4311      	orrs	r1, r2
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	6992      	ldr	r2, [r2, #24]
 80060fa:	4311      	orrs	r1, r2
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	69d2      	ldr	r2, [r2, #28]
 8006100:	4311      	orrs	r1, r2
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	6a12      	ldr	r2, [r2, #32]
 8006106:	4311      	orrs	r1, r2
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800610c:	430a      	orrs	r2, r1
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e026      	b.n	8006164 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	69d9      	ldr	r1, [r3, #28]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	4319      	orrs	r1, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	430b      	orrs	r3, r1
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	4b0e      	ldr	r3, [pc, #56]	@ (8006174 <FMC_SDRAM_Init+0xb4>)
 800613a:	4013      	ands	r3, r2
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	6851      	ldr	r1, [r2, #4]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	6892      	ldr	r2, [r2, #8]
 8006144:	4311      	orrs	r1, r2
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	68d2      	ldr	r2, [r2, #12]
 800614a:	4311      	orrs	r1, r2
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	6912      	ldr	r2, [r2, #16]
 8006150:	4311      	orrs	r1, r2
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	6952      	ldr	r2, [r2, #20]
 8006156:	4311      	orrs	r1, r2
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	6992      	ldr	r2, [r2, #24]
 800615c:	430a      	orrs	r2, r1
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	ffff8000 	.word	0xffff8000

08006178 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d128      	bne.n	80061dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	1e59      	subs	r1, r3, #1
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	4319      	orrs	r1, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	4319      	orrs	r1, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	031b      	lsls	r3, r3, #12
 80061b4:	4319      	orrs	r1, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	4319      	orrs	r1, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	051b      	lsls	r3, r3, #20
 80061c8:	4319      	orrs	r1, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	430b      	orrs	r3, r1
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	609a      	str	r2, [r3, #8]
 80061da:	e02d      	b.n	8006238 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	4b19      	ldr	r3, [pc, #100]	@ (8006248 <FMC_SDRAM_Timing_Init+0xd0>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	68d2      	ldr	r2, [r2, #12]
 80061e8:	3a01      	subs	r2, #1
 80061ea:	0311      	lsls	r1, r2, #12
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	6952      	ldr	r2, [r2, #20]
 80061f0:	3a01      	subs	r2, #1
 80061f2:	0512      	lsls	r2, r2, #20
 80061f4:	430a      	orrs	r2, r1
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	1e59      	subs	r1, r3, #1
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	3b01      	subs	r3, #1
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4319      	orrs	r1, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	3b01      	subs	r3, #1
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	4319      	orrs	r1, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	3b01      	subs	r3, #1
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	4319      	orrs	r1, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	3b01      	subs	r3, #1
 800622e:	061b      	lsls	r3, r3, #24
 8006230:	430b      	orrs	r3, r1
 8006232:	431a      	orrs	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	ff0f0fff 	.word	0xff0f0fff

0800624c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <FMC_SDRAM_SendCommand+0x44>)
 800625e:	4013      	ands	r3, r2
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	6811      	ldr	r1, [r2, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	6852      	ldr	r2, [r2, #4]
 8006268:	4311      	orrs	r1, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	6892      	ldr	r2, [r2, #8]
 800626e:	3a01      	subs	r2, #1
 8006270:	0152      	lsls	r2, r2, #5
 8006272:	4311      	orrs	r1, r2
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	68d2      	ldr	r2, [r2, #12]
 8006278:	0252      	lsls	r2, r2, #9
 800627a:	430a      	orrs	r2, r1
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	ff800000 	.word	0xff800000

08006294 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	4b07      	ldr	r3, [pc, #28]	@ (80062c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	0052      	lsls	r2, r2, #1
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	ffffc001 	.word	0xffffc001

080062c4 <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
 80062ca:	f000 f80e 	bl	80062ea <MapMemory>
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
 80062d8:	f000 f836 	bl	8006348 <JumpToApplication>
 80062dc:	4603      	mov	r3, r0
 80062de:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
 80062e0:	79fb      	ldrb	r3, [r7, #7]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 80062f4:	2300      	movs	r3, #0
 80062f6:	71bb      	strb	r3, [r7, #6]
 80062f8:	e01d      	b.n	8006336 <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
 80062fa:	79bb      	ldrb	r3, [r7, #6]
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f916 	bl	8006530 <EXTMEM_MemoryMappedMode>
 8006304:	4603      	mov	r3, r0
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d002      	beq.n	8006312 <MapMemory+0x28>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00e      	beq.n	800632e <MapMemory+0x44>
 8006310:	e00a      	b.n	8006328 <MapMemory+0x3e>
    {
      case EXTMEM_ERROR_NOTSUPPORTED :
           if (EXTMEM_MEMORY_BOOTXIP ==  index)
 8006312:	79bb      	ldrb	r3, [r7, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <MapMemory+0x34>
           {
             retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
 8006318:	2304      	movs	r3, #4
 800631a:	71fb      	strb	r3, [r7, #7]
           {
            /* We considers the memory will be not used any more */
            EXTMEM_DeInit(index);
           }
      case EXTMEM_OK:
      break;
 800631c:	e007      	b.n	800632e <MapMemory+0x44>
            EXTMEM_DeInit(index);
 800631e:	79bb      	ldrb	r3, [r7, #6]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f8d9 	bl	80064d8 <EXTMEM_DeInit>
      break;
 8006326:	e002      	b.n	800632e <MapMemory+0x44>
      default :
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
 8006328:	2303      	movs	r3, #3
 800632a:	71fb      	strb	r3, [r7, #7]
      break;
 800632c:	e000      	b.n	8006330 <MapMemory+0x46>
      break;
 800632e:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8006330:	79bb      	ldrb	r3, [r7, #6]
 8006332:	3301      	adds	r3, #1
 8006334:	71bb      	strb	r3, [r7, #6]
 8006336:	79bb      	ldrb	r3, [r7, #6]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0de      	beq.n	80062fa <MapMemory+0x10>
    }
  }
  return retr;
 800633c:	79fb      	ldrb	r3, [r7, #7]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	4619      	mov	r1, r3
 8006352:	2000      	movs	r0, #0
 8006354:	f000 f93a 	bl	80065cc <EXTMEM_GetMapAddress>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <JumpToApplication+0x1a>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
 800635e:	2304      	movs	r3, #4
 8006360:	e072      	b.n	8006448 <JumpToApplication+0x100>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
 8006362:	f7fa fd6d 	bl	8000e40 <HAL_SuspendTick>
  __ASM volatile ("dsb 0xF":::"memory");
 8006366:	f3bf 8f4f 	dsb	sy
}
 800636a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800636c:	f3bf 8f6f 	isb	sy
}
 8006370:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8006372:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <JumpToApplication+0x108>)
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	4a36      	ldr	r2, [pc, #216]	@ (8006450 <JumpToApplication+0x108>)
 8006378:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800637c:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800637e:	4b34      	ldr	r3, [pc, #208]	@ (8006450 <JumpToApplication+0x108>)
 8006380:	2200      	movs	r2, #0
 8006382:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006386:	f3bf 8f4f 	dsb	sy
}
 800638a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800638c:	f3bf 8f6f 	isb	sy
}
 8006390:	bf00      	nop
}
 8006392:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006394:	4b2e      	ldr	r3, [pc, #184]	@ (8006450 <JumpToApplication+0x108>)
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800639c:	f3bf 8f4f 	dsb	sy
}
 80063a0:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80063a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006450 <JumpToApplication+0x108>)
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006450 <JumpToApplication+0x108>)
 80063a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80063ae:	f3bf 8f4f 	dsb	sy
}
 80063b2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80063b4:	4b26      	ldr	r3, [pc, #152]	@ (8006450 <JumpToApplication+0x108>)
 80063b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ba:	613b      	str	r3, [r7, #16]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	0b5b      	lsrs	r3, r3, #13
 80063c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063c4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	08db      	lsrs	r3, r3, #3
 80063ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80063d8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80063de:	491c      	ldr	r1, [pc, #112]	@ (8006450 <JumpToApplication+0x108>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	1e5a      	subs	r2, r3, #1
 80063ea:	60ba      	str	r2, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1ef      	bne.n	80063d0 <JumpToApplication+0x88>
    } while(sets-- != 0U);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e5a      	subs	r2, r3, #1
 80063f4:	60fa      	str	r2, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e5      	bne.n	80063c6 <JumpToApplication+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80063fa:	f3bf 8f4f 	dsb	sy
}
 80063fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006400:	f3bf 8f6f 	isb	sy
}
 8006404:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8006406:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006408:	f3ef 8310 	mrs	r3, PRIMASK
 800640c:	617b      	str	r3, [r7, #20]
  return(result);
 800640e:	697b      	ldr	r3, [r7, #20]

  /* Disable D-Cache---------------------------------------------------------*/
  SCB_DisableDCache();

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8006412:	b672      	cpsid	i
}
 8006414:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	607b      	str	r3, [r7, #4]

  SCB->VTOR = (uint32_t)Application_vector;
 800641a:	4a0d      	ldr	r2, [pc, #52]	@ (8006450 <JumpToApplication+0x108>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	623b      	str	r3, [r7, #32]
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f383 8808 	msr	MSP, r3
}
 8006434:	bf00      	nop
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f383 8810 	msr	PRIMASK, r3
}
 8006440:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	4798      	blx	r3
  return BOOT_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3728      	adds	r7, #40	@ 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	e000ed00 	.word	0xe000ed00

08006454 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 800645e:	23fb      	movs	r3, #251	@ 0xfb
 8006460:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d12f      	bne.n	80064c8 <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 800646c:	4a19      	ldr	r2, [pc, #100]	@ (80064d4 <EXTMEM_Init+0x80>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	21ac      	movs	r1, #172	@ 0xac
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	4413      	add	r3, r2
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d120      	bne.n	80064c0 <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
 800647e:	4a15      	ldr	r2, [pc, #84]	@ (80064d4 <EXTMEM_Init+0x80>)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	21ac      	movs	r1, #172	@ 0xac
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	3304      	adds	r3, #4
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	4a11      	ldr	r2, [pc, #68]	@ (80064d4 <EXTMEM_Init+0x80>)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	21ac      	movs	r1, #172	@ 0xac
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	3308      	adds	r3, #8
 800649c:	7819      	ldrb	r1, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	22ac      	movs	r2, #172	@ 0xac
 80064a2:	fb02 f303 	mul.w	r3, r2, r3
 80064a6:	3308      	adds	r3, #8
 80064a8:	4a0a      	ldr	r2, [pc, #40]	@ (80064d4 <EXTMEM_Init+0x80>)
 80064aa:	4413      	add	r3, r2
 80064ac:	3304      	adds	r3, #4
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	f002 fabc 	bl	8008a2c <EXTMEM_DRIVER_NOR_SFDP_Init>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
 80064ba:	23fd      	movs	r3, #253	@ 0xfd
 80064bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064be:	e002      	b.n	80064c6 <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 80064c0:	23fe      	movs	r3, #254	@ 0xfe
 80064c2:	73fb      	strb	r3, [r7, #15]
        break;
 80064c4:	e000      	b.n	80064c8 <EXTMEM_Init+0x74>
        break;
 80064c6:	bf00      	nop
      }
    }
  }
  return retr;
 80064c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	240000c4 	.word	0x240000c4

080064d8 <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 80064e0:	23fb      	movs	r3, #251	@ 0xfb
 80064e2:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d119      	bne.n	800651e <EXTMEM_DeInit+0x46>
  {
    retr = EXTMEM_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 80064ee:	4a0f      	ldr	r2, [pc, #60]	@ (800652c <EXTMEM_DeInit+0x54>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	21ac      	movs	r1, #172	@ 0xac
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	4413      	add	r3, r2
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <EXTMEM_DeInit+0x40>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* UnInitialize the SFDP memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_NOR_SFDP_DeInit(&extmem_list_config[MemId].NorSfdpObject);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	22ac      	movs	r2, #172	@ 0xac
 8006504:	fb02 f303 	mul.w	r3, r2, r3
 8006508:	3308      	adds	r3, #8
 800650a:	4a08      	ldr	r2, [pc, #32]	@ (800652c <EXTMEM_DeInit+0x54>)
 800650c:	4413      	add	r3, r2
 800650e:	3304      	adds	r3, #4
 8006510:	4618      	mov	r0, r3
 8006512:	f002 fb45 	bl	8008ba0 <EXTMEM_DRIVER_NOR_SFDP_DeInit>
        break;
 8006516:	e002      	b.n	800651e <EXTMEM_DeInit+0x46>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8006518:	23fe      	movs	r3, #254	@ 0xfe
 800651a:	73fb      	strb	r3, [r7, #15]
        break;
 800651c:	bf00      	nop
      }
    }
  }
  return retr;
 800651e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	240000c4 	.word	0x240000c4

08006530 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 800653c:	23fb      	movs	r3, #251	@ 0xfb
 800653e:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d139      	bne.n	80065ba <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 800654a:	4a1f      	ldr	r2, [pc, #124]	@ (80065c8 <EXTMEM_MemoryMappedMode+0x98>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	21ac      	movs	r1, #172	@ 0xac
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	4413      	add	r3, r2
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <EXTMEM_MemoryMappedMode+0x32>
 800655c:	2b03      	cmp	r3, #3
 800655e:	d025      	beq.n	80065ac <EXTMEM_MemoryMappedMode+0x7c>
 8006560:	e027      	b.n	80065b2 <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d110      	bne.n	800658a <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	22ac      	movs	r2, #172	@ 0xac
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	3308      	adds	r3, #8
 8006572:	4a15      	ldr	r2, [pc, #84]	@ (80065c8 <EXTMEM_MemoryMappedMode+0x98>)
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	4618      	mov	r0, r3
 800657a:	f002 fb20 	bl	8008bbe <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
 800657e:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 8006580:	2b00      	cmp	r3, #0
 8006582:	d019      	beq.n	80065b8 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 8006584:	f06f 0302 	mvn.w	r3, #2
 8006588:	e019      	b.n	80065be <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	22ac      	movs	r2, #172	@ 0xac
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	3308      	adds	r3, #8
 8006594:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <EXTMEM_MemoryMappedMode+0x98>)
 8006596:	4413      	add	r3, r2
 8006598:	3304      	adds	r3, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f002 fb30 	bl	8008c00 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
 80065a0:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 80065a6:	f06f 0302 	mvn.w	r3, #2
 80065aa:	e008      	b.n	80065be <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
 80065ac:	23ff      	movs	r3, #255	@ 0xff
 80065ae:	73fb      	strb	r3, [r7, #15]
    break;
 80065b0:	e003      	b.n	80065ba <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 80065b2:	23fe      	movs	r3, #254	@ 0xfe
 80065b4:	73fb      	strb	r3, [r7, #15]
        break;
 80065b6:	e000      	b.n	80065ba <EXTMEM_MemoryMappedMode+0x8a>
        break;
 80065b8:	bf00      	nop
      }
    }
  }
  return retr;
 80065ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	240000c4 	.word	0x240000c4

080065cc <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 80065d6:	23fb      	movs	r3, #251	@ 0xfb
 80065d8:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d134      	bne.n	800664a <EXTMEM_GetMapAddress+0x7e>
  {
    retr = EXTMEM_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 80065e4:	4a1d      	ldr	r2, [pc, #116]	@ (800665c <EXTMEM_GetMapAddress+0x90>)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	21ac      	movs	r1, #172	@ 0xac
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
 80065ee:	4413      	add	r3, r2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <EXTMEM_GetMapAddress+0x2e>
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d124      	bne.n	8006644 <EXTMEM_GetMapAddress+0x78>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
 80065fa:	4a18      	ldr	r2, [pc, #96]	@ (800665c <EXTMEM_GetMapAddress+0x90>)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	21ac      	movs	r1, #172	@ 0xac
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	3304      	adds	r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a14      	ldr	r2, [pc, #80]	@ (8006660 <EXTMEM_GetMapAddress+0x94>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d104      	bne.n	800661c <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8006618:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
 800661a:	e016      	b.n	800664a <EXTMEM_GetMapAddress+0x7e>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
 800661c:	4a0f      	ldr	r2, [pc, #60]	@ (800665c <EXTMEM_GetMapAddress+0x90>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	21ac      	movs	r1, #172	@ 0xac
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a0d      	ldr	r2, [pc, #52]	@ (8006664 <EXTMEM_GetMapAddress+0x98>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d104      	bne.n	800663e <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800663a:	601a      	str	r2, [r3, #0]
       break;
 800663c:	e005      	b.n	800664a <EXTMEM_GetMapAddress+0x7e>
          retr = EXTMEM_ERROR_DRIVER;
 800663e:	23fd      	movs	r3, #253	@ 0xfd
 8006640:	73fb      	strb	r3, [r7, #15]
       break;
 8006642:	e002      	b.n	800664a <EXTMEM_GetMapAddress+0x7e>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8006644:	23fe      	movs	r3, #254	@ 0xfe
 8006646:	73fb      	strb	r3, [r7, #15]
        break;
 8006648:	bf00      	nop
      }
    }
  }
  return retr;
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	240000c4 	.word	0x240000c4
 8006660:	52005000 	.word	0x52005000
 8006664:	5200a000 	.word	0x5200a000

08006668 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
 8006684:	e028      	b.n	80066d8 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	fbb2 f3f3 	udiv	r3, r2, r3
 800668e:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	fbb2 f2f3 	udiv	r2, r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3301      	adds	r3, #1
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	60da      	str	r2, [r3, #12]
  }

  return retr;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b096      	sub	sp, #88	@ 0x58
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
 80066f0:	f107 030c 	add.w	r3, r7, #12
 80066f4:	224c      	movs	r2, #76	@ 0x4c
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f002 fa97 	bl	8008c2c <memset>
 80066fe:	235a      	movs	r3, #90	@ 0x5a
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	2301      	movs	r3, #1
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800670a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800670c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006712:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006716:	647b      	str	r3, [r7, #68]	@ 0x44
 8006718:	2308      	movs	r3, #8
 800671a:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	f107 010c 	add.w	r1, r7, #12
 800672a:	224c      	movs	r2, #76	@ 0x4c
 800672c:	4618      	mov	r0, r3
 800672e:	f002 faa9 	bl	8008c84 <memcpy>
  SalXspi->CommandExtension = 0;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3758      	adds	r7, #88	@ 0x58
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b098      	sub	sp, #96	@ 0x60
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	460b      	mov	r3, r1
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f107 0010 	add.w	r0, r7, #16
 8006766:	3304      	adds	r3, #4
 8006768:	224c      	movs	r2, #76	@ 0x4c
 800676a:	4619      	mov	r1, r3
 800676c:	f002 fa8a 	bl	8008c84 <memcpy>

  switch (ParmetersType) {
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	2b04      	cmp	r3, #4
 8006774:	f200 812a 	bhi.w	80069cc <SAL_XSPI_MemoryConfig+0x280>
 8006778:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <SAL_XSPI_MemoryConfig+0x34>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	08006795 	.word	0x08006795
 8006784:	080069bd 	.word	0x080069bd
 8006788:	0800698f 	.word	0x0800698f
 800678c:	080069cd 	.word	0x080069cd
 8006790:	08006997 	.word	0x08006997
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80067a4:	2b0b      	cmp	r3, #11
 80067a6:	f200 80ed 	bhi.w	8006984 <SAL_XSPI_MemoryConfig+0x238>
 80067aa:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <SAL_XSPI_MemoryConfig+0x64>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067e1 	.word	0x080067e1
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067e1 	.word	0x080067e1
 80067c0:	08006811 	.word	0x08006811
 80067c4:	08006811 	.word	0x08006811
 80067c8:	08006841 	.word	0x08006841
 80067cc:	08006875 	.word	0x08006875
 80067d0:	080068a5 	.word	0x080068a5
 80067d4:	080068db 	.word	0x080068db
 80067d8:	08006911 	.word	0x08006911
 80067dc:	0800694b 	.word	0x0800694b
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 80067e0:	2301      	movs	r3, #1
 80067e2:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80067e4:	2300      	movs	r3, #0
 80067e6:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
 80067ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80067f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067f6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
 80067fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006800:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8006802:	2300      	movs	r3, #0
 8006804:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 8006806:	2308      	movs	r3, #8
 8006808:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800680a:	2300      	movs	r3, #0
 800680c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800680e:	e0bd      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8006810:	2303      	movs	r3, #3
 8006812:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006814:	2300      	movs	r3, #0
 8006816:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006818:	2300      	movs	r3, #0
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 800681c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8006822:	2300      	movs	r3, #0
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8006826:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800682a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 800682c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006830:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8006832:	2300      	movs	r3, #0
 8006834:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 8006836:	2306      	movs	r3, #6
 8006838:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800683a:	2300      	movs	r3, #0
 800683c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800683e:	e0a5      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8006840:	2303      	movs	r3, #3
 8006842:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006844:	2300      	movs	r3, #0
 8006846:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8006848:	2308      	movs	r3, #8
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 800684c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8006852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006856:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 800685e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006862:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8006864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006868:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 800686a:	2306      	movs	r3, #6
 800686c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800686e:	2300      	movs	r3, #0
 8006870:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8006872:	e08b      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 8006874:	2301      	movs	r3, #1
 8006876:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8006878:	2300      	movs	r3, #0
 800687a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800687c:	2300      	movs	r3, #0
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 8006880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006884:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8006886:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800688a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 800688c:	2300      	movs	r3, #0
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 8006890:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006894:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8006896:	2300      	movs	r3, #0
 8006898:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 800689a:	2308      	movs	r3, #8
 800689c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800689e:	2300      	movs	r3, #0
 80068a0:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80068a2:	e073      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 80068a4:	2304      	movs	r3, #4
 80068a6:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80068a8:	2300      	movs	r3, #0
 80068aa:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 80068b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80068b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80068ba:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80068bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 80068c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80068c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 80068c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068cc:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 80068ce:	2308      	movs	r3, #8
 80068d0:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 80068d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80068d6:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80068d8:	e058      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 80068da:	2304      	movs	r3, #4
 80068dc:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
 80068de:	2310      	movs	r3, #16
 80068e0:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 80068e2:	2308      	movs	r3, #8
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 80068e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80068ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80068f0:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80068f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 80068f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80068fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 80068fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006902:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
 8006904:	2314      	movs	r3, #20
 8006906:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 8006908:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800690c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800690e:	e03d      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8006910:	2304      	movs	r3, #4
 8006912:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8006914:	2300      	movs	r3, #0
 8006916:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006918:	2300      	movs	r3, #0
 800691a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 800691c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006920:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8006922:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006926:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006928:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800692e:	2300      	movs	r3, #0
 8006930:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
 8006932:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006936:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8006938:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800693c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 800693e:	230a      	movs	r3, #10
 8006940:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8006942:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006946:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8006948:	e020      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 800694a:	2304      	movs	r3, #4
 800694c:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 800694e:	2300      	movs	r3, #0
 8006950:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8006956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800695a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 800695c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006960:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006962:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
 800696c:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 8006970:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8006972:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006976:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 8006978:	230a      	movs	r3, #10
 800697a:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 800697c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006980:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8006982:	e003      	b.n	800698c <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
 800698a:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
 800698c:	e022      	b.n	80069d4 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 800698e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006992:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
 8006994:	e01e      	b.n	80069d4 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80069aa:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80069ae:	041a      	lsls	r2, r3, #16
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	609a      	str	r2, [r3, #8]
    break;
 80069ba:	e00b      	b.n	80069d4 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
 80069c4:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80069c8:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
 80069ca:	e003      	b.n	80069d4 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
 80069d2:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3304      	adds	r3, #4
 80069d8:	f107 0110 	add.w	r1, r7, #16
 80069dc:	224c      	movs	r2, #76	@ 0x4c
 80069de:	4618      	mov	r0, r3
 80069e0:	f002 f950 	bl	8008c84 <memcpy>
  return retr;
 80069e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3760      	adds	r7, #96	@ 0x60
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b098      	sub	sp, #96	@ 0x60
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f107 0010 	add.w	r0, r7, #16
 8006a04:	3304      	adds	r3, #4
 8006a06:	224c      	movs	r2, #76	@ 0x4c
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f002 f93b 	bl	8008c84 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a14:	6a39      	ldr	r1, [r7, #32]
 8006a16:	225a      	movs	r2, #90	@ 0x5a
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fb6a 	bl	80070f2 <XSPI_FormatCommand>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a30:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a38:	d102      	bne.n	8006a40 <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8006a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8006a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a46:	d103      	bne.n	8006a50 <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
 8006a48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a4e:	e001      	b.n	8006a54 <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f107 0110 	add.w	r1, r7, #16
 8006a5c:	2264      	movs	r2, #100	@ 0x64
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fcf6 	bl	8005450 <HAL_XSPI_Command>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2264      	movs	r2, #100	@ 0x64
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fdeb 	bl	8005656 <HAL_XSPI_Receive>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006a86:	e000      	b.n	8006a8a <SAL_XSPI_GetSFDP+0x9a>
    goto error;
 8006a88:	bf00      	nop

error:
  if (retr != HAL_OK )
 8006a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe ff58 	bl	800594c <HAL_XSPI_Abort>
  }
  return retr;
 8006a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3760      	adds	r7, #96	@ 0x60
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b098      	sub	sp, #96	@ 0x60
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f107 0010 	add.w	r0, r7, #16
 8006aba:	3304      	adds	r3, #4
 8006abc:	224c      	movs	r2, #76	@ 0x4c
 8006abe:	4619      	mov	r1, r3
 8006ac0:	f002 f8e0 	bl	8008c84 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006aca:	6a39      	ldr	r1, [r7, #32]
 8006acc:	229f      	movs	r2, #159	@ 0x9f
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fb0f 	bl	80070f2 <XSPI_FormatCommand>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d105      	bne.n	8006af2 <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
 8006aea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af0:	e003      	b.n	8006afa <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
 8006af6:	2308      	movs	r3, #8
 8006af8:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f107 0110 	add.w	r1, r7, #16
 8006b02:	2264      	movs	r2, #100	@ 0x64
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe fca3 	bl	8005450 <HAL_XSPI_Command>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006b10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2264      	movs	r2, #100	@ 0x64
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fd98 	bl	8005656 <HAL_XSPI_Receive>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006b2c:	e000      	b.n	8006b30 <SAL_XSPI_GetId+0x88>
    goto error;
 8006b2e:	bf00      	nop

error:
  if (retr != HAL_OK )
 8006b30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe ff05 	bl	800594c <HAL_XSPI_Abort>
  }
  return retr;
 8006b42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3760      	adds	r7, #96	@ 0x60
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b098      	sub	sp, #96	@ 0x60
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f107 0010 	add.w	r0, r7, #16
 8006b64:	3304      	adds	r3, #4
 8006b66:	224c      	movs	r2, #76	@ 0x4c
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f002 f88b 	bl	8008c84 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b74:	6a39      	ldr	r1, [r7, #32]
 8006b76:	7afa      	ldrb	r2, [r7, #11]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 faba 	bl	80070f2 <XSPI_FormatCommand>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8006b86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b88:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	d006      	beq.n	8006ba2 <SAL_XSPI_Read+0x54>
 8006b94:	2b05      	cmp	r3, #5
 8006b96:	dc1a      	bgt.n	8006bce <SAL_XSPI_Read+0x80>
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d014      	beq.n	8006bc6 <SAL_XSPI_Read+0x78>
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d00b      	beq.n	8006bb8 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
 8006ba0:	e015      	b.n	8006bce <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8006ba2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
 8006ba8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bac:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8006bb4:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
 8006bb6:	e00b      	b.n	8006bd0 <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
 8006bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 8006bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 8006bc4:	e004      	b.n	8006bd0 <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 8006bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bca:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 8006bcc:	e000      	b.n	8006bd0 <SAL_XSPI_Read+0x82>
   break;
 8006bce:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f107 0110 	add.w	r1, r7, #16
 8006bd8:	2264      	movs	r2, #100	@ 0x64
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fc38 	bl	8005450 <HAL_XSPI_Command>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006be6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d107      	bne.n	8006bfe <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 faba 	bl	800716a <XSPI_Receive>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006bfc:	e000      	b.n	8006c00 <SAL_XSPI_Read+0xb2>
    goto error;
 8006bfe:	bf00      	nop

error:
  if (retr != HAL_OK )
 8006c00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fe9d 	bl	800594c <HAL_XSPI_Abort>
  }
  return retr;
 8006c12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3760      	adds	r7, #96	@ 0x60
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b098      	sub	sp, #96	@ 0x60
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f107 0010 	add.w	r0, r7, #16
 8006c34:	3304      	adds	r3, #4
 8006c36:	224c      	movs	r2, #76	@ 0x4c
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f002 f823 	bl	8008c84 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c44:	6a39      	ldr	r1, [r7, #32]
 8006c46:	7afa      	ldrb	r2, [r7, #11]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fa52 	bl	80070f2 <XSPI_FormatCommand>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8006c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f107 0110 	add.w	r1, r7, #16
 8006c6a:	2264      	movs	r2, #100	@ 0x64
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fbef 	bl	8005450 <HAL_XSPI_Command>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
 8006c78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fa5e 	bl	8007144 <XSPI_Transmit>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006c8e:	e000      	b.n	8006c92 <SAL_XSPI_Write+0x74>
    goto error;
 8006c90:	bf00      	nop

error:
  if (retr != HAL_OK )
 8006c92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fe54 	bl	800594c <HAL_XSPI_Abort>
  }
  return retr;
 8006ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3760      	adds	r7, #96	@ 0x60
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b098      	sub	sp, #96	@ 0x60
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	72fb      	strb	r3, [r7, #11]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f107 0010 	add.w	r0, r7, #16
 8006cca:	3304      	adds	r3, #4
 8006ccc:	224c      	movs	r2, #76	@ 0x4c
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f001 ffd8 	bl	8008c84 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cda:	6a39      	ldr	r1, [r7, #32]
 8006cdc:	7afa      	ldrb	r2, [r7, #11]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fa07 	bl	80070f2 <XSPI_FormatCommand>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8006cf0:	893b      	ldrh	r3, [r7, #8]
 8006cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 8006cf8:	893b      	ldrh	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f107 0110 	add.w	r1, r7, #16
 8006d0a:	2264      	movs	r2, #100	@ 0x64
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe fb9f 	bl	8005450 <HAL_XSPI_Command>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 8006d18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10c      	bne.n	8006d3a <SAL_XSPI_CommandSendData+0x8a>
 8006d20:	893b      	ldrh	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2264      	movs	r2, #100	@ 0x64
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fc1e 	bl	8005570 <HAL_XSPI_Transmit>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8006d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fe00 	bl	800594c <HAL_XSPI_Abort>
  }
  return retr;
 8006d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3760      	adds	r7, #96	@ 0x60
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b098      	sub	sp, #96	@ 0x60
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	461a      	mov	r2, r3
 8006d64:	460b      	mov	r3, r1
 8006d66:	72fb      	strb	r3, [r7, #11]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f107 0010 	add.w	r0, r7, #16
 8006d72:	3304      	adds	r3, #4
 8006d74:	224c      	movs	r2, #76	@ 0x4c
 8006d76:	4619      	mov	r1, r3
 8006d78:	f001 ff84 	bl	8008c84 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d82:	6a39      	ldr	r1, [r7, #32]
 8006d84:	7afa      	ldrb	r2, [r7, #11]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f9b3 	bl	80070f2 <XSPI_FormatCommand>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
 8006d94:	2300      	movs	r3, #0
 8006d96:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8006d98:	893b      	ldrh	r3, [r7, #8]
 8006d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 8006da0:	893b      	ldrh	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f107 0110 	add.w	r1, r7, #16
 8006db2:	2264      	movs	r2, #100	@ 0x64
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fb4b 	bl	8005450 <HAL_XSPI_Command>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 8006dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10c      	bne.n	8006de2 <SAL_XSPI_SendReadCommand+0x8a>
 8006dc8:	893b      	ldrh	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2264      	movs	r2, #100	@ 0x64
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fc3d 	bl	8005656 <HAL_XSPI_Receive>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8006de2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d004      	beq.n	8006df4 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fdac 	bl	800594c <HAL_XSPI_Abort>
  }
  return retr;
 8006df4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3760      	adds	r7, #96	@ 0x60
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b098      	sub	sp, #96	@ 0x60
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f107 0010 	add.w	r0, r7, #16
 8006e16:	3304      	adds	r3, #4
 8006e18:	224c      	movs	r2, #76	@ 0x4c
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	f001 ff32 	bl	8008c84 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e26:	6a39      	ldr	r1, [r7, #32]
 8006e28:	7afa      	ldrb	r2, [r7, #11]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 f961 	bl	80070f2 <XSPI_FormatCommand>
 8006e30:	4603      	mov	r3, r0
 8006e32:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e3e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8006e40:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8006e46:	2300      	movs	r3, #0
 8006e48:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f107 0110 	add.w	r1, r7, #16
 8006e52:	2264      	movs	r2, #100	@ 0x64
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fafb 	bl	8005450 <HAL_XSPI_Command>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
 8006e60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d109      	bne.n	8006e7c <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2264      	movs	r2, #100	@ 0x64
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fbf0 	bl	8005656 <HAL_XSPI_Receive>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8006e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe fd5f 	bl	800594c <HAL_XSPI_Abort>
  }
  return retr;
 8006e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3760      	adds	r7, #96	@ 0x60
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b09e      	sub	sp, #120	@ 0x78
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	72fb      	strb	r3, [r7, #11]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	224c      	movs	r2, #76	@ 0x4c
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f001 fee3 	bl	8008c84 <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
 8006ebe:	7abb      	ldrb	r3, [r7, #10]
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61fb      	str	r3, [r7, #28]
 8006ecc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006ed0:	623b      	str	r3, [r7, #32]
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006edc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ede:	7afa      	ldrb	r2, [r7, #11]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f906 	bl	80070f2 <XSPI_FormatCommand>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
 8006eea:	2301      	movs	r3, #1
 8006eec:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d106      	bne.n	8006f06 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
 8006ef8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006efc:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
 8006f02:	2300      	movs	r3, #0
 8006f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
 8006f06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f0c:	d107      	bne.n	8006f1e <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
 8006f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f12:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 8006f14:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006f18:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006f26:	2264      	movs	r2, #100	@ 0x64
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fa91 	bl	8005450 <HAL_XSPI_Command>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
 8006f34:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10b      	bne.n	8006f54 <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f107 0114 	add.w	r1, r7, #20
 8006f44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe fc27 	bl	800579c <HAL_XSPI_AutoPolling>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
 8006f54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fcf3 	bl	800594c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8006f66:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3778      	adds	r7, #120	@ 0x78
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b098      	sub	sp, #96	@ 0x60
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4603      	mov	r3, r0
 8006f82:	70fb      	strb	r3, [r7, #3]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70bb      	strb	r3, [r7, #2]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f107 0010 	add.w	r0, r7, #16
 8006f92:	3304      	adds	r3, #4
 8006f94:	224c      	movs	r2, #76	@ 0x4c
 8006f96:	4619      	mov	r1, r3
 8006f98:	f001 fe74 	bl	8008c84 <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8006f9c:	f107 0308 	add.w	r3, r7, #8
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	605a      	str	r2, [r3, #4]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fb0:	6a39      	ldr	r1, [r7, #32]
 8006fb2:	78fa      	ldrb	r2, [r7, #3]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f89c 	bl	80070f2 <XSPI_FormatCommand>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyRead;
 8006fbe:	78bb      	ldrb	r3, [r7, #2]
 8006fc0:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f107 0110 	add.w	r1, r7, #16
 8006fca:	2264      	movs	r2, #100	@ 0x64
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fa3f 	bl	8005450 <HAL_XSPI_Command>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8006fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d12d      	bne.n	800703c <SAL_XSPI_EnableMapMode+0xca>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fea:	6a39      	ldr	r1, [r7, #32]
 8006fec:	787a      	ldrb	r2, [r7, #1]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f87f 	bl	80070f2 <XSPI_FormatCommand>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyWrite;
 8006ff8:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8006ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f107 0110 	add.w	r1, r7, #16
 8007006:	2264      	movs	r2, #100	@ 0x64
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fa21 	bl	8005450 <HAL_XSPI_Command>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007014:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007018:	2b00      	cmp	r3, #0
 800701a:	d111      	bne.n	8007040 <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 800701c:	2300      	movs	r3, #0
 800701e:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
 8007020:	2350      	movs	r3, #80	@ 0x50
 8007022:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f107 0208 	add.w	r2, r7, #8
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fc3e 	bl	80058b0 <HAL_XSPI_MemoryMapped>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800703a:	e002      	b.n	8007042 <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 800703c:	bf00      	nop
 800703e:	e000      	b.n	8007042 <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 8007040:	bf00      	nop

error:
  if (retr != HAL_OK )
 8007042:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <SAL_XSPI_EnableMapMode+0xe2>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fc7c 	bl	800594c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8007054:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007058:	4618      	mov	r0, r3
 800705a:	3760      	adds	r7, #96	@ 0x60
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8007068:	f3bf 8f4f 	dsb	sy
}
 800706c:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fc6a 	bl	800594c <HAL_XSPI_Abort>
 8007078:	4603      	mov	r3, r0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800709e:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d11e      	bne.n	80070e4 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d103      	bne.n	80070b4 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
 80070ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	e008      	b.n	80070c6 <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070ba:	d102      	bne.n	80070c2 <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	e001      	b.n	80070c6 <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	430a      	orrs	r2, r1
 80070dc:	609a      	str	r2, [r3, #8]
    break;
 80070de:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	e000      	b.n	80070e6 <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	4603      	mov	r3, r0
 80070fa:	6039      	str	r1, [r7, #0]
 80070fc:	71fb      	strb	r3, [r7, #7]
 80070fe:	4613      	mov	r3, r2
 8007100:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b10      	cmp	r3, #16
 8007106:	d114      	bne.n	8007132 <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
 8007108:	79bb      	ldrb	r3, [r7, #6]
 800710a:	b29b      	uxth	r3, r3
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d107      	bne.n	8007126 <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
 8007116:	79bb      	ldrb	r3, [r7, #6]
 8007118:	43db      	mvns	r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	89fb      	ldrh	r3, [r7, #14]
 8007120:	4313      	orrs	r3, r2
 8007122:	81fb      	strh	r3, [r7, #14]
 8007124:	e007      	b.n	8007136 <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
 8007126:	79bb      	ldrb	r3, [r7, #6]
 8007128:	b29a      	uxth	r2, r3
 800712a:	89fb      	ldrh	r3, [r7, #14]
 800712c:	4313      	orrs	r3, r2
 800712e:	81fb      	strh	r3, [r7, #14]
 8007130:	e001      	b.n	8007136 <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
 8007132:	79bb      	ldrb	r3, [r7, #6]
 8007134:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
 8007136:	89fb      	ldrh	r3, [r7, #14]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <XSPI_Transmit>:


HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2264      	movs	r2, #100	@ 0x64
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fa0a 	bl	8005570 <HAL_XSPI_Transmit>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <XSPI_Receive>:
  * @param hxpsi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2264      	movs	r2, #100	@ 0x64
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fa6a 	bl	8005656 <HAL_XSPI_Receive>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);
  
  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
    
    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0008 	add.w	r0, r3, #8
 80071aa:	2308      	movs	r3, #8
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	2100      	movs	r1, #0
 80071b0:	f7ff fc1e 	bl	80069f0 <SAL_XSPI_GetSFDP>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 80071ba:	2303      	movs	r3, #3
 80071bc:	73fb      	strb	r3, [r7, #15]
      goto error;
 80071be:	e01f      	b.n	8007200 <SFDP_ReadHeader+0x70>
    }
    
    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);
    
    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fc06 	bl	80089d8 <CheckSFDP_Signature>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <SFDP_ReadHeader+0x48>
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	d005      	beq.n	80071e2 <SFDP_ReadHeader+0x52>
 80071d6:	e00a      	b.n	80071ee <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 80071dc:	2302      	movs	r3, #2
 80071de:	73bb      	strb	r3, [r7, #14]
    break;
 80071e0:	e00a      	b.n	80071f8 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 80071e2:	2304      	movs	r3, #4
 80071e4:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	3301      	adds	r3, #1
 80071ea:	73bb      	strb	r3, [r7, #14]
      break;
 80071ec:	e004      	b.n	80071f8 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 80071ee:	2304      	movs	r3, #4
 80071f0:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 80071f2:	2302      	movs	r3, #2
 80071f4:	73bb      	strb	r3, [r7, #14]
      break;
 80071f6:	bf00      	nop
    }
  } while(retry_counter < 2u);
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d9cf      	bls.n	800719e <SFDP_ReadHeader+0xe>

error:
 80071fe:	bf00      	nop
  return retr;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 800720c:	b590      	push	{r4, r7, lr}
 800720e:	b089      	sub	sp, #36	@ 0x24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8007216:	2304      	movs	r3, #4
 8007218:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
 800721a:	4b2a      	ldr	r3, [pc, #168]	@ (80072c4 <SFDP_GetHeader+0xb8>)
 800721c:	f107 040c 	add.w	r4, r7, #12
 8007220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };
  
  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
 8007226:	2300      	movs	r3, #0
 8007228:	77bb      	strb	r3, [r7, #30]
 800722a:	e040      	b.n	80072ae <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");
    
    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
 800722c:	7fbb      	ldrb	r3, [r7, #30]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	3320      	adds	r3, #32
 8007232:	443b      	add	r3, r7
 8007234:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f103 0008 	add.w	r0, r3, #8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3364      	adds	r3, #100	@ 0x64
 8007248:	461a      	mov	r2, r3
 800724a:	2100      	movs	r1, #0
 800724c:	f7ff fa7e 	bl	800674c <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
 8007250:	7fbb      	ldrb	r3, [r7, #30]
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	3320      	adds	r3, #32
 8007256:	443b      	add	r3, r7
 8007258:	f813 2c13 	ldrb.w	r2, [r3, #-19]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */    
    for (uint8_t IExt = 0u;
 8007262:	2300      	movs	r3, #0
 8007264:	777b      	strb	r3, [r7, #29]
 8007266:	e017      	b.n	8007298 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	7f7a      	ldrb	r2, [r7, #29]
 800726c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ff8c 	bl	8007190 <SFDP_ReadHeader>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
 8007282:	7fbb      	ldrb	r3, [r7, #30]
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	3320      	adds	r3, #32
 8007288:	443b      	add	r3, r7
 800728a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800728e:	2b03      	cmp	r3, #3
 8007290:	d909      	bls.n	80072a6 <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
 8007292:	7f7b      	ldrb	r3, [r7, #29]
 8007294:	3301      	adds	r3, #1
 8007296:	777b      	strb	r3, [r7, #29]
 8007298:	7f7b      	ldrb	r3, [r7, #29]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d804      	bhi.n	80072a8 <SFDP_GetHeader+0x9c>
 800729e:	7ffb      	ldrb	r3, [r7, #31]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d0e1      	beq.n	8007268 <SFDP_GetHeader+0x5c>
 80072a4:	e000      	b.n	80072a8 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
 80072a6:	bf00      	nop
           ; index++) 
 80072a8:	7fbb      	ldrb	r3, [r7, #30]
 80072aa:	3301      	adds	r3, #1
 80072ac:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
 80072ae:	7fbb      	ldrb	r3, [r7, #30]
 80072b0:	2b07      	cmp	r3, #7
 80072b2:	d802      	bhi.n	80072ba <SFDP_GetHeader+0xae>
 80072b4:	7ffb      	ldrb	r3, [r7, #31]
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d0b8      	beq.n	800722c <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
 80072ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3724      	adds	r7, #36	@ 0x24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd90      	pop	{r4, r7, pc}
 80072c4:	08008cc0 	.word	0x08008cc0

080072c8 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 80072d4:	2308      	movs	r3, #8
 80072d6:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
 80072e0:	2278      	movs	r2, #120	@ 0x78
 80072e2:	2100      	movs	r1, #0
 80072e4:	485f      	ldr	r0, [pc, #380]	@ (8007464 <SFDP_CollectData+0x19c>)
 80072e6:	f001 fca1 	bl	8008c2c <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]
 80072ee:	e027      	b.n	8007340 <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
 80072f0:	7dfa      	ldrb	r2, [r7, #23]
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4a5a      	ldr	r2, [pc, #360]	@ (8007464 <SFDP_CollectData+0x19c>)
 80072fc:	4413      	add	r3, r2
 80072fe:	461a      	mov	r2, r3
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 ffae 	bl	8008264 <sfdp_get_paraminfo>
 8007308:	4603      	mov	r3, r0
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	7ffb      	ldrb	r3, [r7, #31]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 80a2 	bne.w	8007458 <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800731a:	7dfa      	ldrb	r2, [r7, #23]
 800731c:	4851      	ldr	r0, [pc, #324]	@ (8007464 <SFDP_CollectData+0x19c>)
 800731e:	4613      	mov	r3, r2
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4403      	add	r3, r0
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	ea41 0203 	orr.w	r2, r1, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	3308      	adds	r3, #8
 8007338:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	3301      	adds	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
 8007340:	7dfa      	ldrb	r2, [r7, #23]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007348:	3301      	adds	r3, #1
 800734a:	429a      	cmp	r2, r3
 800734c:	d3d0      	bcc.n	80072f0 <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 800734e:	2300      	movs	r3, #0
 8007350:	75bb      	strb	r3, [r7, #22]
 8007352:	e075      	b.n	8007440 <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
 8007358:	7dba      	ldrb	r2, [r7, #22]
 800735a:	4942      	ldr	r1, [pc, #264]	@ (8007464 <SFDP_CollectData+0x19c>)
 800735c:	4613      	mov	r3, r2
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	3308      	adds	r3, #8
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
 800736c:	7dba      	ldrb	r2, [r7, #22]
 800736e:	493d      	ldr	r1, [pc, #244]	@ (8007464 <SFDP_CollectData+0x19c>)
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007380:	d029      	beq.n	80073d6 <SFDP_CollectData+0x10e>
 8007382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007386:	d829      	bhi.n	80073dc <SFDP_CollectData+0x114>
 8007388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800738c:	d01d      	beq.n	80073ca <SFDP_CollectData+0x102>
 800738e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007392:	d823      	bhi.n	80073dc <SFDP_CollectData+0x114>
 8007394:	2b80      	cmp	r3, #128	@ 0x80
 8007396:	d01b      	beq.n	80073d0 <SFDP_CollectData+0x108>
 8007398:	2b80      	cmp	r3, #128	@ 0x80
 800739a:	d81f      	bhi.n	80073dc <SFDP_CollectData+0x114>
 800739c:	2b08      	cmp	r3, #8
 800739e:	d002      	beq.n	80073a6 <SFDP_CollectData+0xde>
 80073a0:	2b40      	cmp	r3, #64	@ 0x40
 80073a2:	d00f      	beq.n	80073c4 <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
 80073a4:	e01a      	b.n	80073dc <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
 80073a6:	7dba      	ldrb	r2, [r7, #22]
 80073a8:	492e      	ldr	r1, [pc, #184]	@ (8007464 <SFDP_CollectData+0x19c>)
 80073aa:	4613      	mov	r3, r2
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	440b      	add	r3, r1
 80073b4:	3308      	adds	r3, #8
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007468 <SFDP_CollectData+0x1a0>)
 80073bc:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
 80073be:	4b2b      	ldr	r3, [pc, #172]	@ (800746c <SFDP_CollectData+0x1a4>)
 80073c0:	613b      	str	r3, [r7, #16]
      break;
 80073c2:	e00c      	b.n	80073de <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
 80073c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007470 <SFDP_CollectData+0x1a8>)
 80073c6:	613b      	str	r3, [r7, #16]
      break;
 80073c8:	e009      	b.n	80073de <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
 80073ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007474 <SFDP_CollectData+0x1ac>)
 80073cc:	613b      	str	r3, [r7, #16]
      break;
 80073ce:	e006      	b.n	80073de <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
 80073d0:	4b29      	ldr	r3, [pc, #164]	@ (8007478 <SFDP_CollectData+0x1b0>)
 80073d2:	613b      	str	r3, [r7, #16]
      break;
 80073d4:	e003      	b.n	80073de <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
 80073d6:	4b29      	ldr	r3, [pc, #164]	@ (800747c <SFDP_CollectData+0x1b4>)
 80073d8:	613b      	str	r3, [r7, #16]
      break;
 80073da:	e000      	b.n	80073de <SFDP_CollectData+0x116>
      break;
 80073dc:	bf00      	nop
    }
    if (ptr != NULL)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d016      	beq.n	8007412 <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f103 0008 	add.w	r0, r3, #8
 80073ea:	7dba      	ldrb	r2, [r7, #22]
 80073ec:	491d      	ldr	r1, [pc, #116]	@ (8007464 <SFDP_CollectData+0x19c>)
 80073ee:	4613      	mov	r3, r2
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3304      	adds	r3, #4
 80073fa:	6819      	ldr	r1, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	f7ff faf5 	bl	80069f0 <SAL_XSPI_GetSFDP>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address, 
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 800740c:	230c      	movs	r3, #12
 800740e:	77fb      	strb	r3, [r7, #31]
        goto error;
 8007410:	e022      	b.n	8007458 <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
 8007412:	7dba      	ldrb	r2, [r7, #22]
 8007414:	4913      	ldr	r1, [pc, #76]	@ (8007464 <SFDP_CollectData+0x19c>)
 8007416:	4613      	mov	r3, r2
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b08      	cmp	r3, #8
 8007424:	d109      	bne.n	800743a <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
 8007426:	4b10      	ldr	r3, [pc, #64]	@ (8007468 <SFDP_CollectData+0x1a0>)
 8007428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800742c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007430:	b2db      	uxtb	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 800743a:	7dbb      	ldrb	r3, [r7, #22]
 800743c:	3301      	adds	r3, #1
 800743e:	75bb      	strb	r3, [r7, #22]
 8007440:	7dba      	ldrb	r2, [r7, #22]
 8007442:	4908      	ldr	r1, [pc, #32]	@ (8007464 <SFDP_CollectData+0x19c>)
 8007444:	4613      	mov	r3, r2
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f47f af7f 	bne.w	8007354 <SFDP_CollectData+0x8c>
    }
  }

error:
 8007456:	bf00      	nop
  return retr;
 8007458:	7ffb      	ldrb	r3, [r7, #31]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3720      	adds	r7, #32
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	24000170 	.word	0x24000170
 8007468:	240001e8 	.word	0x240001e8
 800746c:	240001ec 	.word	0x240001ec
 8007470:	24000248 	.word	0x24000248
 8007474:	24000268 	.word	0x24000268
 8007478:	24000250 	.word	0x24000250
 800747c:	240002d8 	.word	0x240002d8

08007480 <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 8007488:	2307      	movs	r3, #7
 800748a:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 800748c:	2308      	movs	r3, #8
 800748e:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8007494:	2300      	movs	r3, #0
 8007496:	73bb      	strb	r3, [r7, #14]
 8007498:	e02e      	b.n	80074f8 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
 800749a:	4a64      	ldr	r2, [pc, #400]	@ (800762c <SFDP_MemoryReset+0x1ac>)
 800749c:	6939      	ldr	r1, [r7, #16]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fee0 	bl	8008264 <sfdp_get_paraminfo>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
 80074a8:	7dbb      	ldrb	r3, [r7, #22]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d118      	bne.n	80074e0 <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */        
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
 80074ae:	4b5f      	ldr	r3, [pc, #380]	@ (800762c <SFDP_MemoryReset+0x1ac>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d114      	bne.n	80074e0 <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f103 0008 	add.w	r0, r3, #8
 80074bc:	4b5b      	ldr	r3, [pc, #364]	@ (800762c <SFDP_MemoryReset+0x1ac>)
 80074be:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address, 
                                       JEDEC_Basic.Params.data_BYTE, 
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
 80074c0:	4b5a      	ldr	r3, [pc, #360]	@ (800762c <SFDP_MemoryReset+0x1ac>)
 80074c2:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4a5a      	ldr	r2, [pc, #360]	@ (8007630 <SFDP_MemoryReset+0x1b0>)
 80074c8:	f7ff fa92 	bl	80069f0 <SAL_XSPI_GetSFDP>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 80074d2:	230c      	movs	r3, #12
 80074d4:	75bb      	strb	r3, [r7, #22]
 80074d6:	e003      	b.n	80074e0 <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	75bb      	strb	r3, [r7, #22]
          find = 1u;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
 80074e0:	7dbb      	ldrb	r3, [r7, #22]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10f      	bne.n	8007506 <SFDP_MemoryReset+0x86>
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d00c      	beq.n	8007506 <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */        
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	3308      	adds	r3, #8
 80074f0:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	3301      	adds	r3, #1
 80074f6:	73bb      	strb	r3, [r7, #14]
 80074f8:	7bba      	ldrb	r2, [r7, #14]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007500:	3301      	adds	r3, #1
 8007502:	429a      	cmp	r2, r3
 8007504:	d3c9      	bcc.n	800749a <SFDP_MemoryReset+0x1a>
  }
  
  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
 8007506:	7dbb      	ldrb	r3, [r7, #22]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <SFDP_MemoryReset+0x92>
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007512:	230c      	movs	r3, #12
 8007514:	75bb      	strb	r3, [r7, #22]
    goto error;
 8007516:	e083      	b.n	8007620 <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
 8007518:	4b46      	ldr	r3, [pc, #280]	@ (8007634 <SFDP_MemoryReset+0x1b4>)
 800751a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800751e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]
 800752c:	e053      	b.n	80075d6 <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 800752e:	4b41      	ldr	r3, [pc, #260]	@ (8007634 <SFDP_MemoryReset+0x1b4>)
 8007530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007534:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
 8007548:	e045      	b.n	80075d6 <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 800754a:	4b3a      	ldr	r3, [pc, #232]	@ (8007634 <SFDP_MemoryReset+0x1b4>)
 800754c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007550:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
 8007560:	2302      	movs	r3, #2
 8007562:	75fb      	strb	r3, [r7, #23]
 8007564:	e037      	b.n	80075d6 <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8007566:	4b33      	ldr	r3, [pc, #204]	@ (8007634 <SFDP_MemoryReset+0x1b4>)
 8007568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800756c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
 800757c:	2303      	movs	r3, #3
 800757e:	75fb      	strb	r3, [r7, #23]
 8007580:	e029      	b.n	80075d6 <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8007582:	4b2c      	ldr	r3, [pc, #176]	@ (8007634 <SFDP_MemoryReset+0x1b4>)
 8007584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007588:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
 8007598:	2304      	movs	r3, #4
 800759a:	75fb      	strb	r3, [r7, #23]
 800759c:	e01b      	b.n	80075d6 <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 800759e:	4b25      	ldr	r3, [pc, #148]	@ (8007634 <SFDP_MemoryReset+0x1b4>)
 80075a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
 80075b4:	2305      	movs	r3, #5
 80075b6:	75fb      	strb	r3, [r7, #23]
 80075b8:	e00d      	b.n	80075d6 <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 80075ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007634 <SFDP_MemoryReset+0x1b4>)
 80075bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b1f      	cmp	r3, #31
 80075c8:	d902      	bls.n	80075d0 <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 80075ca:	230f      	movs	r3, #15
 80075cc:	75bb      	strb	r3, [r7, #22]
    goto error;
 80075ce:	e027      	b.n	8007620 <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80075d0:	230c      	movs	r3, #12
 80075d2:	75bb      	strb	r3, [r7, #22]
    goto error;
 80075d4:	e024      	b.n	8007620 <SFDP_MemoryReset+0x1a0>
  }
  
  switch(reset_methode)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b05      	cmp	r3, #5
 80075da:	d009      	beq.n	80075f0 <SFDP_MemoryReset+0x170>
 80075dc:	2b05      	cmp	r3, #5
 80075de:	dc1b      	bgt.n	8007618 <SFDP_MemoryReset+0x198>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01c      	beq.n	800761e <SFDP_MemoryReset+0x19e>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	db17      	blt.n	8007618 <SFDP_MemoryReset+0x198>
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d814      	bhi.n	8007618 <SFDP_MemoryReset+0x198>
 80075ee:	e010      	b.n	8007612 <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f103 0008 	add.w	r0, r3, #8
 80075f6:	2300      	movs	r3, #0
 80075f8:	2200      	movs	r2, #0
 80075fa:	2166      	movs	r1, #102	@ 0x66
 80075fc:	f7ff fb58 	bl	8006cb0 <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f103 0008 	add.w	r0, r3, #8
 8007606:	2300      	movs	r3, #0
 8007608:	2200      	movs	r2, #0
 800760a:	2199      	movs	r1, #153	@ 0x99
 800760c:	f7ff fb50 	bl	8006cb0 <SAL_XSPI_CommandSendData>
    break;
 8007610:	e006      	b.n	8007620 <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8007612:	230f      	movs	r3, #15
 8007614:	75bb      	strb	r3, [r7, #22]
    break;
 8007616:	e003      	b.n	8007620 <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
 8007618:	2301      	movs	r3, #1
 800761a:	75bb      	strb	r3, [r7, #22]
    break;
 800761c:	e000      	b.n	8007620 <SFDP_MemoryReset+0x1a0>
    break;
 800761e:	bf00      	nop
  }
error :
  return retr;
 8007620:	7dbb      	ldrb	r3, [r7, #22]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	24000170 	.word	0x24000170
 8007630:	240001ec 	.word	0x240001ec
 8007634:	240001e8 	.word	0x240001e8

08007638 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
 8007638:	b5b0      	push	{r4, r5, r7, lr}
 800763a:	b08c      	sub	sp, #48	@ 0x30
 800763c:	af02      	add	r7, sp, #8
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;
  
  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 800765c:	2307      	movs	r3, #7
 800765e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8007662:	f000 bd93 	b.w	800818c <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
 8007666:	4bba      	ldr	r3, [pc, #744]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	db13      	blt.n	8007696 <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
 800766e:	4bb8      	ldr	r3, [pc, #736]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	3301      	adds	r3, #1
 8007674:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <SFDP_BuildGenericDriver+0x48>
    return 32U;
 800767c:	2320      	movs	r3, #32
 800767e:	e003      	b.n	8007688 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	fab3 f383 	clz	r3, r3
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f1c3 031f 	rsb	r3, r3, #31
 800768c:	b2da      	uxtb	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
 8007694:	e005      	b.n	80076a2 <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
 8007696:	4bae      	ldr	r3, [pc, #696]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80076a8:	3b03      	subs	r3, #3
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3308      	adds	r3, #8
 80076c2:	f107 0213 	add.w	r2, r7, #19
 80076c6:	2104      	movs	r1, #4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff f83f 	bl	800674c <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
 80076ce:	4ba0      	ldr	r3, [pc, #640]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80076d0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80076d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	2301      	movs	r3, #1
 80076de:	fa03 f202 	lsl.w	r2, r3, r2
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2202      	movs	r2, #2
 80076ea:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
 80076ee:	4b98      	ldr	r3, [pc, #608]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80076f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
 80076fa:	4b95      	ldr	r3, [pc, #596]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80076fc:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
 8007706:	4b92      	ldr	r3, [pc, #584]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007708:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
 8007712:	4b8f      	ldr	r3, [pc, #572]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007714:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
 800771e:	4b8c      	ldr	r3, [pc, #560]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007720:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
 800772a:	4b89      	ldr	r3, [pc, #548]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800772c:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
 8007736:	4b86      	ldr	r3, [pc, #536]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007738:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
 8007742:	4b83      	ldr	r3, [pc, #524]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007744:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01d      	beq.n	8007794 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
 8007758:	4b7d      	ldr	r3, [pc, #500]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800775a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800775e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007762:	b2db      	uxtb	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	4b7a      	ldr	r3, [pc, #488]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800776e:	b2db      	uxtb	r3, r3
 8007770:	3301      	adds	r3, #1
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	4a76      	ldr	r2, [pc, #472]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007778:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 800777c:	f3c2 0241 	ubfx	r2, r2, #1, #2
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	4611      	mov	r1, r2
 8007784:	4a73      	ldr	r2, [pc, #460]	@ (8007954 <SFDP_BuildGenericDriver+0x31c>)
 8007786:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800778a:	fb03 f202 	mul.w	r2, r3, r2
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800779a:	2b00      	cmp	r3, #0
 800779c:	d01e      	beq.n	80077dc <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
 800779e:	4b6c      	ldr	r3, [pc, #432]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80077a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	4b68      	ldr	r3, [pc, #416]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80077ae:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80077b2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	3301      	adds	r3, #1
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	4a64      	ldr	r2, [pc, #400]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80077c0:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80077c4:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	4611      	mov	r1, r2
 80077cc:	4a61      	ldr	r2, [pc, #388]	@ (8007954 <SFDP_BuildGenericDriver+0x31c>)
 80077ce:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80077d2:	fb03 f202 	mul.w	r2, r3, r2
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01d      	beq.n	8007822 <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
 80077e6:	4b5a      	ldr	r3, [pc, #360]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80077e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	4b56      	ldr	r3, [pc, #344]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80077f6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80077fa:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	3301      	adds	r3, #1
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	4a52      	ldr	r2, [pc, #328]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007808:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800780a:	f3c2 12c1 	ubfx	r2, r2, #7, #2
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	4611      	mov	r1, r2
 8007812:	4a50      	ldr	r2, [pc, #320]	@ (8007954 <SFDP_BuildGenericDriver+0x31c>)
 8007814:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007818:	fb03 f202 	mul.w	r2, r3, r2
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01e      	beq.n	800786a <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
 800782c:	4b48      	ldr	r3, [pc, #288]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800782e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007832:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	4b45      	ldr	r3, [pc, #276]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800783c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8007840:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8007844:	b2db      	uxtb	r3, r3
 8007846:	3301      	adds	r3, #1
 8007848:	fb02 f303 	mul.w	r3, r2, r3
 800784c:	4a40      	ldr	r2, [pc, #256]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800784e:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007852:	f3c2 1281 	ubfx	r2, r2, #6, #2
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	4611      	mov	r1, r2
 800785a:	4a3e      	ldr	r2, [pc, #248]	@ (8007954 <SFDP_BuildGenericDriver+0x31c>)
 800785c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007860:	fb03 f202 	mul.w	r2, r3, r2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
 800786a:	4b39      	ldr	r3, [pc, #228]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800786c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007870:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	4b35      	ldr	r3, [pc, #212]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800787a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800787e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007882:	b2db      	uxtb	r3, r3
 8007884:	3301      	adds	r3, #1
 8007886:	fb02 f303 	mul.w	r3, r2, r3
 800788a:	4a31      	ldr	r2, [pc, #196]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 800788c:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007890:	f3c2 1241 	ubfx	r2, r2, #5, #2
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	4611      	mov	r1, r2
 8007898:	4a2f      	ldr	r2, [pc, #188]	@ (8007958 <SFDP_BuildGenericDriver+0x320>)
 800789a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800789e:	fb03 f202 	mul.w	r2, r3, r2
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2205      	movs	r2, #5
 80078ac:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2205      	movs	r2, #5
 80078b4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
 80078b8:	4b25      	ldr	r3, [pc, #148]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80078ba:	791b      	ldrb	r3, [r3, #4]
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2250      	movs	r2, #80	@ 0x50
 80078ca:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80078ce:	e003      	b.n	80078d8 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2206      	movs	r2, #6
 80078d4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
 80078d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80078da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078de:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2206      	movs	r2, #6
 80078f0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80078f4:	e046      	b.n	8007984 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
 80078f6:	4b16      	ldr	r3, [pc, #88]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 80078f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078fc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007900:	b2db      	uxtb	r3, r3
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2206      	movs	r2, #6
 800790e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8007912:	e037      	b.n	8007984 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
 8007914:	4b0e      	ldr	r3, [pc, #56]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800791a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800791e:	b2db      	uxtb	r3, r3
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2250      	movs	r2, #80	@ 0x50
 800792c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8007930:	e028      	b.n	8007984 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
 8007932:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <SFDP_BuildGenericDriver+0x318>)
 8007934:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007938:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2206      	movs	r2, #6
 800794a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800794e:	e019      	b.n	8007984 <SFDP_BuildGenericDriver+0x34c>
 8007950:	240001e8 	.word	0x240001e8
 8007954:	08008cec 	.word	0x08008cec
 8007958:	08008cf4 	.word	0x08008cf4
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
 800795c:	4b66      	ldr	r3, [pc, #408]	@ (8007af8 <SFDP_BuildGenericDriver+0x4c0>)
 800795e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007962:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2206      	movs	r2, #6
 8007974:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8007978:	e004      	b.n	8007984 <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
 800797a:	230a      	movs	r3, #10
 800797c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8007980:	f000 bc04 	b.w	800818c <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800798a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800798e:	2b00      	cmp	r3, #0
 8007990:	d078      	beq.n	8007a84 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
 8007992:	4b5a      	ldr	r3, [pc, #360]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007994:	7cdb      	ldrb	r3, [r3, #19]
 8007996:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d034      	beq.n	8007a0a <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
 80079a0:	4b56      	ldr	r3, [pc, #344]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 80079a2:	7c5a      	ldrb	r2, [r3, #17]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 80079aa:	4b54      	ldr	r3, [pc, #336]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 80079ac:	7cdb      	ldrb	r3, [r3, #19]
 80079ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
 80079bc:	4b4f      	ldr	r3, [pc, #316]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 80079be:	7cdb      	ldrb	r3, [r3, #19]
 80079c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 80079ce:	4b4b      	ldr	r3, [pc, #300]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 80079d0:	7cdb      	ldrb	r3, [r3, #19]
 80079d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      
      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 80079e0:	4b46      	ldr	r3, [pc, #280]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 80079e2:	7cdb      	ldrb	r3, [r3, #19]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
 80079ee:	4b43      	ldr	r3, [pc, #268]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 80079f0:	7cdb      	ldrb	r3, [r3, #19]
 80079f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	461a      	mov	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
 8007a00:	e003      	b.n	8007a0a <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	22ff      	movs	r2, #255	@ 0xff
 8007a06:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
 8007a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007a0c:	7ddb      	ldrb	r3, [r3, #23]
 8007a0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d073      	beq.n	8007b00 <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
 8007a18:	4b38      	ldr	r3, [pc, #224]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007a1a:	7d5a      	ldrb	r2, [r3, #21]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 8007a22:	4b36      	ldr	r3, [pc, #216]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007a24:	7ddb      	ldrb	r3, [r3, #23]
 8007a26:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
 8007a34:	4b31      	ldr	r3, [pc, #196]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007a36:	7ddb      	ldrb	r3, [r3, #23]
 8007a38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 8007a46:	4b2d      	ldr	r3, [pc, #180]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007a48:	7ddb      	ldrb	r3, [r3, #23]
 8007a4a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 8007a58:	4b28      	ldr	r3, [pc, #160]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007a5a:	7cdb      	ldrb	r3, [r3, #19]
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
 8007a66:	4b25      	ldr	r3, [pc, #148]	@ (8007afc <SFDP_BuildGenericDriver+0x4c4>)
 8007a68:	7ddb      	ldrb	r3, [r3, #23]
 8007a6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8007a78:	e042      	b.n	8007b00 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	22ff      	movs	r2, #255	@ 0xff
 8007a7e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8007a82:	e03d      	b.n	8007b00 <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
 8007a94:	4b18      	ldr	r3, [pc, #96]	@ (8007af8 <SFDP_BuildGenericDriver+0x4c0>)
 8007a96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a9a:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2205      	movs	r2, #5
 8007aac:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8007ac0:	e01e      	b.n	8007b00 <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8007af8 <SFDP_BuildGenericDriver+0x4c0>)
 8007ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ac8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2270      	movs	r2, #112	@ 0x70
 8007ada:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8007aee:	e007      	b.n	8007b00 <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
 8007af0:	2309      	movs	r3, #9
 8007af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8007af6:	e349      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
 8007af8:	240001e8 	.word	0x240001e8
 8007afc:	24000268 	.word	0x24000268
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2203      	movs	r2, #3
 8007b04:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) 
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	f040 80a9 	bne.w	8007c66 <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d04c      	beq.n	8007bc4 <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
 8007b2a:	4bb4      	ldr	r3, [pc, #720]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b2c:	7c5b      	ldrb	r3, [r3, #17]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d015      	beq.n	8007b5e <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
 8007b32:	4bb2      	ldr	r3, [pc, #712]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b34:	7c1b      	ldrb	r3, [r3, #16]
 8007b36:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4baf      	ldr	r3, [pc, #700]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b40:	7c1b      	ldrb	r3, [r3, #16]
 8007b42:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	4413      	add	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
 8007b4c:	4bab      	ldr	r3, [pc, #684]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b4e:	7c5a      	ldrb	r2, [r3, #17]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
 8007b5e:	4ba7      	ldr	r3, [pc, #668]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b60:	7cdb      	ldrb	r3, [r3, #19]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d015      	beq.n	8007b92 <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
 8007b66:	4ba5      	ldr	r3, [pc, #660]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b68:	7c9b      	ldrb	r3, [r3, #18]
 8007b6a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	4ba2      	ldr	r3, [pc, #648]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b74:	7c9b      	ldrb	r3, [r3, #18]
 8007b76:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	4413      	add	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
 8007b80:	4b9e      	ldr	r3, [pc, #632]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b82:	7cda      	ldrb	r2, [r3, #19]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
 8007b92:	4b9a      	ldr	r3, [pc, #616]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007b94:	7d1b      	ldrb	r3, [r3, #20]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d011      	beq.n	8007bc4 <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
 8007ba0:	4b96      	ldr	r3, [pc, #600]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007ba2:	7e9b      	ldrb	r3, [r3, #26]
 8007ba4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	4b93      	ldr	r3, [pc, #588]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007bae:	7e9b      	ldrb	r3, [r3, #26]
 8007bb0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
 8007bba:	4b90      	ldr	r3, [pc, #576]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007bbc:	7eda      	ldrb	r2, [r3, #27]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d92c      	bls.n	8007c28 <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
 8007bce:	4b8b      	ldr	r3, [pc, #556]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007bd0:	7d1b      	ldrb	r3, [r3, #20]
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d020      	beq.n	8007c1e <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
 8007bdc:	4b87      	ldr	r3, [pc, #540]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007bde:	7f9b      	ldrb	r3, [r3, #30]
 8007be0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	4b84      	ldr	r3, [pc, #528]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007bea:	7f9b      	ldrb	r3, [r3, #30]
 8007bec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
 8007bf6:	4b81      	ldr	r3, [pc, #516]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007bf8:	7fda      	ldrb	r2, [r3, #31]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2204      	movs	r2, #4
 8007c04:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fea7 	bl	800895c <JEDEC_Basic_Manage4S4S4SEnableSequence>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
 8007c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f040 82b4 	bne.w	8008186 <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f103 0008 	add.w	r0, r3, #8
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3364      	adds	r3, #100	@ 0x64
 8007c32:	461a      	mov	r2, r3
 8007c34:	2100      	movs	r1, #0
 8007c36:	f7fe fd89 	bl	800674c <SAL_XSPI_MemoryConfig>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007c40:	230c      	movs	r3, #12
 8007c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007c46:	e2a1      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	f107 0214 	add.w	r2, r7, #20
 8007c50:	2101      	movs	r1, #1
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fd7a 	bl	800674c <SAL_XSPI_MemoryConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007c5e:	230c      	movs	r3, #12
 8007c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8007c64:	e292      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR)) 
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d069      	beq.n	8007d48 <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d164      	bne.n	8007d48 <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007c84:	2b09      	cmp	r3, #9
 8007c86:	d103      	bne.n	8007c90 <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c8e:	e03a      	b.n	8007d06 <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fbdb 	bl	800844c <sfpd_enter_octal_mode>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d134      	bne.n	8007d06 <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2209      	movs	r2, #9
 8007ca6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f103 0008 	add.w	r0, r3, #8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3364      	adds	r3, #100	@ 0x64
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f7fe fd48 	bl	800674c <SAL_XSPI_MemoryConfig>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8007cc8:	e260      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
        }
        
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007cd0:	2bfd      	cmp	r3, #253	@ 0xfd
 8007cd2:	d109      	bne.n	8007ce8 <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
 8007cd4:	2314      	movs	r3, #20
 8007cd6:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	f107 0214 	add.w	r2, r7, #20
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fd32 	bl	800674c <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007cee:	2bfe      	cmp	r3, #254	@ 0xfe
 8007cf0:	d109      	bne.n	8007d06 <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	f107 0214 	add.w	r2, r7, #20
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fd23 	bl	800674c <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d019      	beq.n	8007d48 <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
 8007d14:	4b39      	ldr	r3, [pc, #228]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d915      	bls.n	8007d48 <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
 8007d1c:	4b37      	ldr	r3, [pc, #220]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007d1e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8007d22:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d903      	bls.n	8007d34 <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8007d2c:	230f      	movs	r3, #15
 8007d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8007d32:	e22b      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
 8007d34:	4b31      	ldr	r3, [pc, #196]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007d36:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8007d3a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 813c 	beq.w	8007fd0 <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
 8007d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 809e 	bne.w	8007e9e <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
 8007d62:	4b26      	ldr	r3, [pc, #152]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007d64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01c      	beq.n	8007daa <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f103 0008 	add.w	r0, r3, #8
 8007d76:	2300      	movs	r3, #0
 8007d78:	2200      	movs	r2, #0
 8007d7a:	21b7      	movs	r1, #183	@ 0xb7
 8007d7c:	f7fe ff98 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007d86:	230c      	movs	r3, #12
 8007d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007d8c:	e1fe      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3308      	adds	r3, #8
 8007d92:	2200      	movs	r2, #0
 8007d94:	2102      	movs	r1, #2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe fcd8 	bl	800674c <SAL_XSPI_MemoryConfig>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d06b      	beq.n	8007e7a <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007da2:	230c      	movs	r3, #12
 8007da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007da8:	e1f0      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
 8007daa:	4b14      	ldr	r3, [pc, #80]	@ (8007dfc <SFDP_BuildGenericDriver+0x7c4>)
 8007dac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d04e      	beq.n	8007e56 <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f103 0008 	add.w	r0, r3, #8
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f7fe ff72 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007dd2:	230c      	movs	r3, #12
 8007dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007dd8:	e1d8      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f103 0008 	add.w	r0, r3, #8
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007dec:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d103      	bne.n	8007e00 <SFDP_BuildGenericDriver+0x7c8>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e002      	b.n	8007e02 <SFDP_BuildGenericDriver+0x7ca>
 8007dfc:	240001e8 	.word	0x240001e8
 8007e00:	2300      	movs	r3, #0
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8007e08:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007e0a:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007e12:	461c      	mov	r4, r3
 8007e14:	2301      	movs	r3, #1
 8007e16:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8007e1e:	9401      	str	r4, [sp, #4]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	4613      	mov	r3, r2
 8007e24:	462a      	mov	r2, r5
 8007e26:	f7ff f838 	bl	8006e9a <SAL_XSPI_CheckStatusRegister>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007e30:	230c      	movs	r3, #12
 8007e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8007e36:	e1a9      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f103 0008 	add.w	r0, r3, #8
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2200      	movs	r2, #0
 8007e42:	21b7      	movs	r1, #183	@ 0xb7
 8007e44:	f7fe ff34 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d015      	beq.n	8007e7a <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007e4e:	230c      	movs	r3, #12
 8007e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8007e54:	e19a      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
 8007e56:	4ba3      	ldr	r3, [pc, #652]	@ (80080e4 <SFDP_BuildGenericDriver+0xaac>)
 8007e58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
 8007e64:	4b9f      	ldr	r3, [pc, #636]	@ (80080e4 <SFDP_BuildGenericDriver+0xaac>)
 8007e66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d103      	bne.n	8007e7a <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8007e72:	230f      	movs	r3, #15
 8007e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8007e78:	e188      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2102      	movs	r1, #2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fc62 	bl	800674c <SAL_XSPI_MemoryConfig>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007e8e:	230c      	movs	r3, #12
 8007e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8007e94:	e17a      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
      }
      
      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2213      	movs	r2, #19
 8007e9a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d12e      	bne.n	8007f06 <SFDP_BuildGenericDriver+0x8ce>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d129      	bne.n	8007f06 <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
 8007eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007eb4:	789b      	ldrb	r3, [r3, #2]
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d022      	beq.n	8007f06 <SFDP_BuildGenericDriver+0x8ce>
 8007ec0:	4b89      	ldr	r3, [pc, #548]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007ec2:	78db      	ldrb	r3, [r3, #3]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01b      	beq.n	8007f06 <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2207      	movs	r2, #7
 8007ed2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f103 0008 	add.w	r0, r3, #8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3364      	adds	r3, #100	@ 0x64
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	f7fe fc32 	bl	800674c <SAL_XSPI_MemoryConfig>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8007eee:	230c      	movs	r3, #12
 8007ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8007ef4:	e14a      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	22cc      	movs	r2, #204	@ 0xcc
 8007efa:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	228e      	movs	r2, #142	@ 0x8e
 8007f02:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	d004      	beq.n	8007f1a <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d120      	bne.n	8007f5c <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
 8007f1a:	4b73      	ldr	r3, [pc, #460]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <SFDP_BuildGenericDriver+0x8f8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2212      	movs	r2, #18
 8007f2c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
 8007f30:	4b6d      	ldr	r3, [pc, #436]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <SFDP_BuildGenericDriver+0x90e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2213      	movs	r2, #19
 8007f42:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
 8007f46:	4b68      	ldr	r3, [pc, #416]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <SFDP_BuildGenericDriver+0x924>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	220c      	movs	r2, #12
 8007f58:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D) 
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d120      	bne.n	8007fa8 <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
 8007f66:	4b60      	ldr	r3, [pc, #384]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007f68:	78db      	ldrb	r3, [r3, #3]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <SFDP_BuildGenericDriver+0x944>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
 8007f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007f7e:	789b      	ldrb	r3, [r3, #2]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <SFDP_BuildGenericDriver+0x95a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	22cc      	movs	r2, #204	@ 0xcc
 8007f8e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
 8007f92:	4b55      	ldr	r3, [pc, #340]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007f94:	789b      	ldrb	r3, [r3, #2]
 8007f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <SFDP_BuildGenericDriver+0x970>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	22fd      	movs	r2, #253	@ 0xfd
 8007fa4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
 8007fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007faa:	791a      	ldrb	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
 8007fb2:	4b4d      	ldr	r3, [pc, #308]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007fb4:	795a      	ldrb	r2, [r3, #5]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
 8007fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007fbe:	799a      	ldrb	r2, [r3, #6]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
 8007fc6:	4b48      	ldr	r3, [pc, #288]	@ (80080e8 <SFDP_BuildGenericDriver+0xab0>)
 8007fc8:	79da      	ldrb	r2, [r3, #7]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 80d5 	beq.w	800818a <SFDP_BuildGenericDriver+0xb52>
      && 
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      && 
 8007fe6:	2b09      	cmp	r3, #9
 8007fe8:	d005      	beq.n	8007ff6 <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	f040 80ca 	bne.w	800818a <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
 8007ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
 8008002:	4b3a      	ldr	r3, [pc, #232]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 8008004:	785a      	ldrb	r2, [r3, #1]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
 800800c:	4b37      	ldr	r3, [pc, #220]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 800800e:	7d1b      	ldrb	r3, [r3, #20]
 8008010:	f003 031f 	and.w	r3, r3, #31
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
 800801a:	4b34      	ldr	r3, [pc, #208]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 800801c:	7d1b      	ldrb	r3, [r3, #20]
 800801e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008022:	b2db      	uxtb	r3, r3
 8008024:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3308      	adds	r3, #8
 800802a:	f107 0214 	add.w	r2, r7, #20
 800802e:	2101      	movs	r1, #1
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe fb8b 	bl	800674c <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
 8008036:	4b2b      	ldr	r3, [pc, #172]	@ (80080e4 <SFDP_BuildGenericDriver+0xaac>)
 8008038:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800803c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008040:	b2db      	uxtb	r3, r3
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f8e8 	bl	8008218 <sfdp_getfrequencevalue>
 8008048:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	429a      	cmp	r2, r3
 8008052:	d902      	bls.n	800805a <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */ 
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008058:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f103 0008 	add.w	r0, r3, #8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8008064:	f107 030c 	add.w	r3, r7, #12
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	f7fe fafd 	bl	8006668 <SAL_XSPI_SetClock>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
 8008074:	230d      	movs	r3, #13
 8008076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 800807a:	e087      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2201      	movs	r2, #1
 8008080:	701a      	strb	r2, [r3, #0]
    
    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4a1a      	ldr	r2, [pc, #104]	@ (80080f0 <SFDP_BuildGenericDriver+0xab8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d913      	bls.n	80080b2 <SFDP_BuildGenericDriver+0xa7a>
 800808a:	4b18      	ldr	r3, [pc, #96]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 800808c:	899b      	ldrh	r3, [r3, #12]
 800808e:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
 8008098:	4b14      	ldr	r3, [pc, #80]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 800809a:	899b      	ldrh	r3, [r3, #12]
 800809c:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
 80080a4:	4b11      	ldr	r3, [pc, #68]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 80080a6:	7b1b      	ldrb	r3, [r3, #12]
 80080a8:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	623b      	str	r3, [r7, #32]
 80080b0:	e046      	b.n	8008140 <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4a0f      	ldr	r2, [pc, #60]	@ (80080f4 <SFDP_BuildGenericDriver+0xabc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d91e      	bls.n	80080f8 <SFDP_BuildGenericDriver+0xac0>
 80080ba:	4b0c      	ldr	r3, [pc, #48]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 80080bc:	7cdb      	ldrb	r3, [r3, #19]
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d017      	beq.n	80080f8 <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
 80080c8:	4b08      	ldr	r3, [pc, #32]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 80080ca:	7cdb      	ldrb	r3, [r3, #19]
 80080cc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
 80080d4:	4b05      	ldr	r3, [pc, #20]	@ (80080ec <SFDP_BuildGenericDriver+0xab4>)
 80080d6:	8a5b      	ldrh	r3, [r3, #18]
 80080d8:	f3c3 1384 	ubfx	r3, r3, #6, #5
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	623b      	str	r3, [r7, #32]
 80080e0:	e02e      	b.n	8008140 <SFDP_BuildGenericDriver+0xb08>
 80080e2:	bf00      	nop
 80080e4:	240001e8 	.word	0x240001e8
 80080e8:	24000248 	.word	0x24000248
 80080ec:	24000250 	.word	0x24000250
 80080f0:	0bebc1ff 	.word	0x0bebc1ff
 80080f4:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a27      	ldr	r2, [pc, #156]	@ (8008198 <SFDP_BuildGenericDriver+0xb60>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d913      	bls.n	8008128 <SFDP_BuildGenericDriver+0xaf0>
 8008100:	4b26      	ldr	r3, [pc, #152]	@ (800819c <SFDP_BuildGenericDriver+0xb64>)
 8008102:	7c9b      	ldrb	r3, [r3, #18]
 8008104:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00c      	beq.n	8008128 <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
 800810e:	4b23      	ldr	r3, [pc, #140]	@ (800819c <SFDP_BuildGenericDriver+0xb64>)
 8008110:	7c9b      	ldrb	r3, [r3, #18]
 8008112:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008116:	b2db      	uxtb	r3, r3
 8008118:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
 800811a:	4b20      	ldr	r3, [pc, #128]	@ (800819c <SFDP_BuildGenericDriver+0xb64>)
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f3c3 3304 	ubfx	r3, r3, #12, #5
 8008122:	b2db      	uxtb	r3, r3
 8008124:	623b      	str	r3, [r7, #32]
 8008126:	e00b      	b.n	8008140 <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
 8008128:	4b1c      	ldr	r3, [pc, #112]	@ (800819c <SFDP_BuildGenericDriver+0xb64>)
 800812a:	8a1b      	ldrh	r3, [r3, #16]
 800812c:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8008130:	b2db      	uxtb	r3, r3
 8008132:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
 8008134:	4b19      	ldr	r3, [pc, #100]	@ (800819c <SFDP_BuildGenericDriver+0xb64>)
 8008136:	7c1b      	ldrb	r3, [r3, #16]
 8008138:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800813c:	b2db      	uxtb	r3, r3
 800813e:	623b      	str	r3, [r7, #32]
    }
    
    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800814a:	2b00      	cmp	r3, #0
 800814c:	d017      	beq.n	800817e <SFDP_BuildGenericDriver+0xb46>
	  && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
 800814e:	4b14      	ldr	r3, [pc, #80]	@ (80081a0 <SFDP_BuildGenericDriver+0xb68>)
 8008150:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008154:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00f      	beq.n	800817e <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 800815e:	6a39      	ldr	r1, [r7, #32]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fa5d 	bl	8008620 <sfpd_set_dummycycle>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10f      	bne.n	800818c <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3308      	adds	r3, #8
 8008170:	f107 0214 	add.w	r2, r7, #20
 8008174:	2101      	movs	r1, #1
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fae8 	bl	800674c <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 800817c:	e006      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
 800817e:	230e      	movs	r3, #14
 8008180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8008184:	e002      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
          goto error;
 8008186:	bf00      	nop
 8008188:	e000      	b.n	800818c <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
 800818a:	bf00      	nop
  return retr;
 800818c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008190:	4618      	mov	r0, r3
 8008192:	3728      	adds	r7, #40	@ 0x28
 8008194:	46bd      	mov	sp, r7
 8008196:	bdb0      	pop	{r4, r5, r7, pc}
 8008198:	07ed6b3f 	.word	0x07ed6b3f
 800819c:	24000250 	.word	0x24000250
 80081a0:	24000268 	.word	0x24000268

080081a4 <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
 80081a4:	b5b0      	push	{r4, r5, r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
 80081ae:	23fb      	movs	r3, #251	@ 0xfb
 80081b0:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d026      	beq.n	800820a <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f103 0008 	add.w	r0, r3, #8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 80081ce:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 80081e2:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 80081ea:	461a      	mov	r2, r3
 80081ec:	2301      	movs	r3, #1
 80081ee:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	9201      	str	r2, [sp, #4]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4623      	mov	r3, r4
 80081fa:	462a      	mov	r2, r5
 80081fc:	f7fe fe4d 	bl	8006e9a <SAL_XSPI_CheckStatusRegister>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
 800820a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008218 <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
 8008218:	b4b0      	push	{r4, r5, r7}
 800821a:	b08b      	sub	sp, #44	@ 0x2c
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
 8008220:	4b0e      	ldr	r3, [pc, #56]	@ (800825c <sfdp_getfrequencevalue+0x44>)
 8008222:	f107 040c 	add.w	r4, r7, #12
 8008226:	461d      	mov	r5, r3
 8008228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800822a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800822c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008230:	c403      	stmia	r4!, {r0, r1}
 8008232:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b09      	cmp	r3, #9
 8008238:	d80a      	bhi.n	8008250 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	3328      	adds	r3, #40	@ 0x28
 8008240:	443b      	add	r3, r7
 8008242:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8008246:	461a      	mov	r2, r3
 8008248:	4b05      	ldr	r3, [pc, #20]	@ (8008260 <sfdp_getfrequencevalue+0x48>)
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	e000      	b.n	8008252 <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	372c      	adds	r7, #44	@ 0x2c
 8008256:	46bd      	mov	sp, r7
 8008258:	bcb0      	pop	{r4, r5, r7}
 800825a:	4770      	bx	lr
 800825c:	08008cd0 	.word	0x08008cd0
 8008260:	000f4240 	.word	0x000f4240

08008264 <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
 8008274:	f107 0314 	add.w	r3, r7, #20
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress, 
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f103 0008 	add.w	r0, r3, #8
 8008284:	f107 0214 	add.w	r2, r7, #20
 8008288:	2308      	movs	r3, #8
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	f7fe fbb0 	bl	80069f0 <SAL_XSPI_GetSFDP>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8008296:	2303      	movs	r3, #3
 8008298:	77fb      	strb	r3, [r7, #31]
    goto error;
 800829a:	e0d1      	b.n	8008440 <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
 80082a2:	7dfa      	ldrb	r2, [r7, #23]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 80082a8:	7ebb      	ldrb	r3, [r7, #26]
 80082aa:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
 80082ac:	7e7b      	ldrb	r3, [r7, #25]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
 80082b2:	7e3a      	ldrb	r2, [r7, #24]
 80082b4:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
 80082ba:	7efb      	ldrb	r3, [r7, #27]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d010      	beq.n	80082e2 <sfdp_get_paraminfo+0x7e>
 80082c0:	7efb      	ldrb	r3, [r7, #27]
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	db0c      	blt.n	80082e2 <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 80082c8:	7efb      	ldrb	r3, [r7, #27]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 80082d8:	e0b2      	b.n	8008440 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2202      	movs	r2, #2
 80082de:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 80082e0:	e0ae      	b.n	8008440 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
 80082e2:	7d3b      	ldrb	r3, [r7, #20]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2204      	movs	r2, #4
 80082f0:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
 80082f2:	7efb      	ldrb	r3, [r7, #27]
 80082f4:	2bff      	cmp	r3, #255	@ 0xff
 80082f6:	f040 80a2 	bne.w	800843e <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
 80082fa:	7d3b      	ldrb	r3, [r7, #20]
 80082fc:	2b0f      	cmp	r3, #15
 80082fe:	dc4b      	bgt.n	8008398 <sfdp_get_paraminfo+0x134>
 8008300:	2b00      	cmp	r3, #0
 8008302:	da23      	bge.n	800834c <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
 8008304:	e09a      	b.n	800843c <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
 8008306:	3b81      	subs	r3, #129	@ 0x81
 8008308:	2b0d      	cmp	r3, #13
 800830a:	f200 8097 	bhi.w	800843c <sfdp_get_paraminfo+0x1d8>
 800830e:	a201      	add	r2, pc, #4	@ (adr r2, 8008314 <sfdp_get_paraminfo+0xb0>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	080083b9 	.word	0x080083b9
 8008318:	0800843d 	.word	0x0800843d
 800831c:	0800843d 	.word	0x0800843d
 8008320:	080083c9 	.word	0x080083c9
 8008324:	0800843d 	.word	0x0800843d
 8008328:	0800843d 	.word	0x0800843d
 800832c:	080083e3 	.word	0x080083e3
 8008330:	080083ed 	.word	0x080083ed
 8008334:	0800843d 	.word	0x0800843d
 8008338:	0800843d 	.word	0x0800843d
 800833c:	0800840b 	.word	0x0800840b
 8008340:	0800843d 	.word	0x0800843d
 8008344:	0800841f 	.word	0x0800841f
 8008348:	08008429 	.word	0x08008429
 800834c:	2b0f      	cmp	r3, #15
 800834e:	d875      	bhi.n	800843c <sfdp_get_paraminfo+0x1d8>
 8008350:	a201      	add	r2, pc, #4	@ (adr r2, 8008358 <sfdp_get_paraminfo+0xf4>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	080083a3 	.word	0x080083a3
 800835c:	0800843d 	.word	0x0800843d
 8008360:	0800843d 	.word	0x0800843d
 8008364:	080083c1 	.word	0x080083c1
 8008368:	0800843d 	.word	0x0800843d
 800836c:	080083d1 	.word	0x080083d1
 8008370:	080083d9 	.word	0x080083d9
 8008374:	0800843d 	.word	0x0800843d
 8008378:	0800843d 	.word	0x0800843d
 800837c:	080083f7 	.word	0x080083f7
 8008380:	08008401 	.word	0x08008401
 8008384:	0800843d 	.word	0x0800843d
 8008388:	08008415 	.word	0x08008415
 800838c:	0800843d 	.word	0x0800843d
 8008390:	0800843d 	.word	0x0800843d
 8008394:	08008433 	.word	0x08008433
 8008398:	2b8e      	cmp	r3, #142	@ 0x8e
 800839a:	dc4f      	bgt.n	800843c <sfdp_get_paraminfo+0x1d8>
 800839c:	2b81      	cmp	r3, #129	@ 0x81
 800839e:	dab2      	bge.n	8008306 <sfdp_get_paraminfo+0xa2>
        break;
 80083a0:	e04c      	b.n	800843c <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2208      	movs	r2, #8
 80083a6:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	2b10      	cmp	r3, #16
 80083ac:	bf38      	it	cc
 80083ae:	2310      	movcc	r3, #16
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	721a      	strb	r2, [r3, #8]
        break;
 80083b6:	e042      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2210      	movs	r2, #16
 80083bc:	601a      	str	r2, [r3, #0]
        break;
 80083be:	e03e      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	601a      	str	r2, [r3, #0]
        break;
 80083c6:	e03a      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2240      	movs	r2, #64	@ 0x40
 80083cc:	601a      	str	r2, [r3, #0]
        break;
 80083ce:	e036      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2280      	movs	r2, #128	@ 0x80
 80083d4:	601a      	str	r2, [r3, #0]
        break;
 80083d6:	e032      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083de:	601a      	str	r2, [r3, #0]
        break;
 80083e0:	e02d      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083e8:	601a      	str	r2, [r3, #0]
        break;
 80083ea:	e028      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80083f2:	601a      	str	r2, [r3, #0]
        break;
 80083f4:	e023      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083fc:	601a      	str	r2, [r3, #0]
        break;
 80083fe:	e01e      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008406:	601a      	str	r2, [r3, #0]
        break;
 8008408:	e019      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008410:	601a      	str	r2, [r3, #0]
        break;
 8008412:	e014      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800841a:	601a      	str	r2, [r3, #0]
        break;
 800841c:	e00f      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008424:	601a      	str	r2, [r3, #0]
        break;
 8008426:	e00a      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800842e:	601a      	str	r2, [r3, #0]
        break;
 8008430:	e005      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008438:	601a      	str	r2, [r3, #0]
        break;
 800843a:	e000      	b.n	800843e <sfdp_get_paraminfo+0x1da>
        break;
 800843c:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }
  
error:
 800843e:	bf00      	nop
  return retr;
 8008440:	7ffb      	ldrb	r3, [r7, #31]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop

0800844c <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 800844c:	b590      	push	{r4, r7, lr}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
 8008458:	4b70      	ldr	r3, [pc, #448]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 800845a:	78db      	ldrb	r3, [r3, #3]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d032      	beq.n	80084c6 <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
 8008460:	4b6e      	ldr	r3, [pc, #440]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008462:	789b      	ldrb	r3, [r3, #2]
 8008464:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
 8008466:	4b6d      	ldr	r3, [pc, #436]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
 800846c:	4b6b      	ldr	r3, [pc, #428]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
 8008472:	4b6a      	ldr	r3, [pc, #424]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008474:	79db      	ldrb	r3, [r3, #7]
 8008476:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
 8008478:	4b68      	ldr	r3, [pc, #416]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 800847a:	799b      	ldrb	r3, [r3, #6]
 800847c:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
 800847e:	4b67      	ldr	r3, [pc, #412]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008480:	795b      	ldrb	r3, [r3, #5]
 8008482:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
 8008484:	4b65      	ldr	r3, [pc, #404]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008486:	791b      	ldrb	r3, [r3, #4]
 8008488:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f103 0008 	add.w	r0, r3, #8
 8008490:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
 8008492:	4b62      	ldr	r3, [pc, #392]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008494:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8008496:	3b01      	subs	r3, #1
 8008498:	b29c      	uxth	r4, r3
 800849a:	f107 0308 	add.w	r3, r7, #8
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	4623      	mov	r3, r4
 80084a2:	f7fe fc05 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 80084ac:	230b      	movs	r3, #11
 80084ae:	73fb      	strb	r3, [r7, #15]
       goto error;
 80084b0:	e0af      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
     }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80084b2:	2164      	movs	r1, #100	@ 0x64
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff fe75 	bl	80081a4 <driver_check_FlagBUSY>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <sfpd_enter_octal_mode+0x7a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80084c0:	230c      	movs	r3, #12
 80084c2:	73fb      	strb	r3, [r7, #15]
      goto error;
 80084c4:	e0a5      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
    }
  }
  
  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
 80084c6:	4b55      	ldr	r3, [pc, #340]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084c8:	7adb      	ldrb	r3, [r3, #11]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d032      	beq.n	8008534 <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
 80084ce:	4b53      	ldr	r3, [pc, #332]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084d0:	7a9b      	ldrb	r3, [r3, #10]
 80084d2:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
 80084d4:	4b51      	ldr	r3, [pc, #324]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084d6:	7a5b      	ldrb	r3, [r3, #9]
 80084d8:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
 80084da:	4b50      	ldr	r3, [pc, #320]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084dc:	7a1b      	ldrb	r3, [r3, #8]
 80084de:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
 80084e0:	4b4e      	ldr	r3, [pc, #312]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084e2:	7bdb      	ldrb	r3, [r3, #15]
 80084e4:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
 80084e6:	4b4d      	ldr	r3, [pc, #308]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084e8:	7b9b      	ldrb	r3, [r3, #14]
 80084ea:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
 80084ec:	4b4b      	ldr	r3, [pc, #300]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084ee:	7b5b      	ldrb	r3, [r3, #13]
 80084f0:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
 80084f2:	4b4a      	ldr	r3, [pc, #296]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80084f4:	7b1b      	ldrb	r3, [r3, #12]
 80084f6:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f103 0008 	add.w	r0, r3, #8
 80084fe:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
 8008500:	4b46      	ldr	r3, [pc, #280]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008502:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8008504:	3b01      	subs	r3, #1
 8008506:	b29c      	uxth	r4, r3
 8008508:	f107 0308 	add.w	r3, r7, #8
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	4623      	mov	r3, r4
 8008510:	f7fe fbce 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 800851a:	230b      	movs	r3, #11
 800851c:	73fb      	strb	r3, [r7, #15]
       goto error;
 800851e:	e078      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
     }
     
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8008520:	2164      	movs	r1, #100	@ 0x64
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fe3e 	bl	80081a4 <driver_check_FlagBUSY>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <sfpd_enter_octal_mode+0xe8>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800852e:	230c      	movs	r3, #12
 8008530:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008532:	e06e      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
 8008534:	4b39      	ldr	r3, [pc, #228]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008536:	7cdb      	ldrb	r3, [r3, #19]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d032      	beq.n	80085a2 <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
 800853c:	4b37      	ldr	r3, [pc, #220]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 800853e:	7c9b      	ldrb	r3, [r3, #18]
 8008540:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
 8008542:	4b36      	ldr	r3, [pc, #216]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008544:	7c5b      	ldrb	r3, [r3, #17]
 8008546:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
 8008548:	4b34      	ldr	r3, [pc, #208]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 800854a:	7c1b      	ldrb	r3, [r3, #16]
 800854c:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
 800854e:	4b33      	ldr	r3, [pc, #204]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008550:	7ddb      	ldrb	r3, [r3, #23]
 8008552:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
 8008554:	4b31      	ldr	r3, [pc, #196]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008556:	7d9b      	ldrb	r3, [r3, #22]
 8008558:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
 800855a:	4b30      	ldr	r3, [pc, #192]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 800855c:	7d5b      	ldrb	r3, [r3, #21]
 800855e:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
 8008560:	4b2e      	ldr	r3, [pc, #184]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008562:	7d1b      	ldrb	r3, [r3, #20]
 8008564:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f103 0008 	add.w	r0, r3, #8
 800856c:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
 800856e:	4b2b      	ldr	r3, [pc, #172]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 8008570:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8008572:	3b01      	subs	r3, #1
 8008574:	b29c      	uxth	r4, r3
 8008576:	f107 0308 	add.w	r3, r7, #8
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	4623      	mov	r3, r4
 800857e:	f7fe fb97 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8008588:	230b      	movs	r3, #11
 800858a:	73fb      	strb	r3, [r7, #15]
      goto error;
 800858c:	e041      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 800858e:	2164      	movs	r1, #100	@ 0x64
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff fe07 	bl	80081a4 <driver_check_FlagBUSY>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800859c:	230c      	movs	r3, #12
 800859e:	73fb      	strb	r3, [r7, #15]
      goto error;
 80085a0:	e037      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
 80085a2:	4b1e      	ldr	r3, [pc, #120]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085a4:	7edb      	ldrb	r3, [r3, #27]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d032      	beq.n	8008610 <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
 80085aa:	4b1c      	ldr	r3, [pc, #112]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085ac:	7e9b      	ldrb	r3, [r3, #26]
 80085ae:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
 80085b0:	4b1a      	ldr	r3, [pc, #104]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085b2:	7e5b      	ldrb	r3, [r3, #25]
 80085b4:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
 80085b6:	4b19      	ldr	r3, [pc, #100]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085b8:	7e1b      	ldrb	r3, [r3, #24]
 80085ba:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
 80085bc:	4b17      	ldr	r3, [pc, #92]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085be:	7fdb      	ldrb	r3, [r3, #31]
 80085c0:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
 80085c2:	4b16      	ldr	r3, [pc, #88]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085c4:	7f9b      	ldrb	r3, [r3, #30]
 80085c6:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
 80085c8:	4b14      	ldr	r3, [pc, #80]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085ca:	7f5b      	ldrb	r3, [r3, #29]
 80085cc:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
 80085ce:	4b13      	ldr	r3, [pc, #76]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085d0:	7f1b      	ldrb	r3, [r3, #28]
 80085d2:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f103 0008 	add.w	r0, r3, #8
 80085da:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
 80085dc:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <sfpd_enter_octal_mode+0x1d0>)
 80085de:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80085e0:	3b01      	subs	r3, #1
 80085e2:	b29c      	uxth	r4, r3
 80085e4:	f107 0308 	add.w	r3, r7, #8
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	4623      	mov	r3, r4
 80085ec:	f7fe fb60 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 80085f6:	230b      	movs	r3, #11
 80085f8:	73fb      	strb	r3, [r7, #15]
      goto error;
 80085fa:	e00a      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80085fc:	2164      	movs	r1, #100	@ 0x64
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff fdd0 	bl	80081a4 <driver_check_FlagBUSY>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800860a:	230c      	movs	r3, #12
 800860c:	73fb      	strb	r3, [r7, #15]
      goto error;
 800860e:	e000      	b.n	8008612 <sfpd_enter_octal_mode+0x1c6>
    }
  }

error:
 8008610:	bf00      	nop
  return retr;
 8008612:	7bfb      	ldrb	r3, [r7, #15]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	bd90      	pop	{r4, r7, pc}
 800861c:	240002d8 	.word	0x240002d8

08008620 <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
 8008620:	b5b0      	push	{r4, r5, r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af02      	add	r7, sp, #8
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
 800862a:	4b6d      	ldr	r3, [pc, #436]	@ (80087e0 <sfpd_set_dummycycle+0x1c0>)
 800862c:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
 8008632:	2300      	movs	r3, #0
 8008634:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 8008636:	4b6b      	ldr	r3, [pc, #428]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 8008638:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10a      	bne.n	800865c <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
 8008646:	4b67      	ldr	r3, [pc, #412]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 8008648:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800864c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008650:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008656:	230c      	movs	r3, #12
 8008658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800865a:	e0bb      	b.n	80087d4 <sfpd_set_dummycycle+0x1b4>
  }
  
  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
 800865c:	4b61      	ldr	r3, [pc, #388]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 800865e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <sfpd_set_dummycycle+0x58>
  { 
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
 800866c:	4b5d      	ldr	r3, [pc, #372]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 800866e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	613b      	str	r3, [r7, #16]
 8008676:	e001      	b.n	800867c <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1; 
 8008678:	2301      	movs	r3, #1
 800867a:	613b      	str	r3, [r7, #16]
  }
    
  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject, 
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f103 0008 	add.w	r0, r3, #8
 8008682:	4b58      	ldr	r3, [pc, #352]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 8008684:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 8008688:	f107 0308 	add.w	r3, r7, #8
 800868c:	2202      	movs	r2, #2
 800868e:	9200      	str	r2, [sp, #0]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	f7fe fbb5 	bl	8006e00 <SAL_XSPI_CommandSendReadAddress>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, 
                   Address, 
                   (uint8_t *)localValue, 
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 800869c:	230c      	movs	r3, #12
 800869e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086a0:	e098      	b.n	80087d4 <sfpd_set_dummycycle+0x1b4>
  }
      
  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f103 0008 	add.w	r0, r3, #8
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80086ae:	2300      	movs	r3, #0
 80086b0:	2200      	movs	r2, #0
 80086b2:	f7fe fafd 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80086bc:	230c      	movs	r3, #12
 80086be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086c0:	e088      	b.n	80087d4 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f103 0008 	add.w	r0, r3, #8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80086d4:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <sfpd_set_dummycycle+0xc4>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e000      	b.n	80086e6 <sfpd_set_dummycycle+0xc6>
 80086e4:	2300      	movs	r3, #0
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 80086ec:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80086ee:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80086f6:	461c      	mov	r4, r3
 80086f8:	2301      	movs	r3, #1
 80086fa:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8008702:	9401      	str	r4, [sp, #4]
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	4613      	mov	r3, r2
 8008708:	462a      	mov	r2, r5
 800870a:	f7fe fbc6 	bl	8006e9a <SAL_XSPI_CheckStatusRegister>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008714:	230c      	movs	r3, #12
 8008716:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008718:	e05c      	b.n	80087d4 <sfpd_set_dummycycle+0x1b4>
  }
    
  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 800871a:	7a3b      	ldrb	r3, [r7, #8]
 800871c:	b25a      	sxtb	r2, r3
 800871e:	4b31      	ldr	r3, [pc, #196]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 8008720:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008724:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008728:	b2db      	uxtb	r3, r3
 800872a:	3318      	adds	r3, #24
 800872c:	443b      	add	r3, r7
 800872e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008732:	4619      	mov	r1, r3
 8008734:	4b2b      	ldr	r3, [pc, #172]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 8008736:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800873a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800873e:	b2db      	uxtb	r3, r3
 8008740:	fa01 f303 	lsl.w	r3, r1, r3
 8008744:	b25b      	sxtb	r3, r3
 8008746:	43db      	mvns	r3, r3
 8008748:	b25b      	sxtb	r3, r3
 800874a:	4013      	ands	r3, r2
 800874c:	b25b      	sxtb	r3, r3
 800874e:	b2db      	uxtb	r3, r3
 8008750:	723b      	strb	r3, [r7, #8]
                                    
  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 8008752:	7a3a      	ldrb	r2, [r7, #8]
 8008754:	4b23      	ldr	r3, [pc, #140]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 8008756:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800875a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800875e:	b2db      	uxtb	r3, r3
 8008760:	4619      	mov	r1, r3
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	408b      	lsls	r3, r1
 8008766:	b2db      	uxtb	r3, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	b2db      	uxtb	r3, r3
 800876c:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
 800876e:	7a3b      	ldrb	r3, [r7, #8]
 8008770:	727b      	strb	r3, [r7, #9]
     
  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f103 0008 	add.w	r0, r3, #8
 8008778:	4b1a      	ldr	r3, [pc, #104]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 800877a:	f893 1020 	ldrb.w	r1, [r3, #32]
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	2202      	movs	r2, #2
 8008784:	9200      	str	r2, [sp, #0]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	f7fe fa49 	bl	8006c1e <SAL_XSPI_Write>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008792:	230c      	movs	r3, #12
 8008794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008796:	e01d      	b.n	80087d4 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8008798:	2164      	movs	r1, #100	@ 0x64
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff fd02 	bl	80081a4 <driver_check_FlagBUSY>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80087a6:	230c      	movs	r3, #12
 80087a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087aa:	e013      	b.n	80087d4 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 0008 	add.w	r0, r3, #8
 80087b2:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <sfpd_set_dummycycle+0x1c4>)
 80087b4:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 80087b8:	f107 0308 	add.w	r3, r7, #8
 80087bc:	2202      	movs	r2, #2
 80087be:	9200      	str	r2, [sp, #0]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	f7fe f9c4 	bl	8006b4e <SAL_XSPI_Read>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80087cc:	230c      	movs	r3, #12
 80087ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087d0:	e000      	b.n	80087d4 <sfpd_set_dummycycle+0x1b4>
  }	
  
error :
 80087d2:	bf00      	nop
  return retr;  
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bdb0      	pop	{r4, r5, r7, pc}
 80087de:	bf00      	nop
 80087e0:	1f0f0703 	.word	0x1f0f0703
 80087e4:	24000268 	.word	0x24000268

080087e8 <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 80087f0:	230f      	movs	r3, #15
 80087f2:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];  
  
  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
 80087f4:	4b58      	ldr	r3, [pc, #352]	@ (8008958 <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
 80087f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b07      	cmp	r3, #7
 8008802:	f200 80a1 	bhi.w	8008948 <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
 8008806:	a201      	add	r2, pc, #4	@ (adr r2, 800880c <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
 8008808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880c:	08008949 	.word	0x08008949
 8008810:	08008949 	.word	0x08008949
 8008814:	0800882d 	.word	0x0800882d
 8008818:	08008949 	.word	0x08008949
 800881c:	080088ad 	.word	0x080088ad
 8008820:	08008949 	.word	0x08008949
 8008824:	08008949 	.word	0x08008949
 8008828:	08008949 	.word	0x08008949
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one. 
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f103 0008 	add.w	r0, r3, #8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8008838:	2300      	movs	r3, #0
 800883a:	2200      	movs	r2, #0
 800883c:	f7fe fa8c 	bl	8006d58 <SAL_XSPI_SendReadCommand>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008846:	230c      	movs	r3, #12
 8008848:	73fb      	strb	r3, [r7, #15]
      goto error;
 800884a:	e080      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f103 0008 	add.w	r0, r3, #8
 8008852:	f107 020c 	add.w	r2, r7, #12
 8008856:	2301      	movs	r3, #1
 8008858:	2105      	movs	r1, #5
 800885a:	f7fe fa7d 	bl	8006d58 <SAL_XSPI_SendReadCommand>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008864:	230c      	movs	r3, #12
 8008866:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008868:	e071      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
 800886a:	7b3b      	ldrb	r3, [r7, #12]
 800886c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008870:	b2db      	uxtb	r3, r3
 8008872:	733b      	strb	r3, [r7, #12]
    
    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f103 0008 	add.w	r0, r3, #8
 800887a:	f107 020c 	add.w	r2, r7, #12
 800887e:	2301      	movs	r3, #1
 8008880:	2101      	movs	r1, #1
 8008882:	f7fe fa15 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800888c:	230c      	movs	r3, #12
 800888e:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008890:	e05d      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 8008892:	2164      	movs	r1, #100	@ 0x64
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fc85 	bl	80081a4 <driver_check_FlagBUSY>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80088a0:	230c      	movs	r3, #12
 80088a2:	73fb      	strb	r3, [r7, #15]
      goto error;
 80088a4:	e053      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]
    break;
 80088aa:	e050      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one. 
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero. 
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/
   
    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f103 0008 	add.w	r0, r3, #8
 80088b2:	f107 020c 	add.w	r2, r7, #12
 80088b6:	2302      	movs	r3, #2
 80088b8:	2105      	movs	r1, #5
 80088ba:	f7fe fa4d 	bl	8006d58 <SAL_XSPI_SendReadCommand>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80088c4:	230c      	movs	r3, #12
 80088c6:	73fb      	strb	r3, [r7, #15]
      goto error;
 80088c8:	e041      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* update the status register */
    localValue[1] |= 2u;
 80088ca:	7b7b      	ldrb	r3, [r7, #13]
 80088cc:	f043 0302 	orr.w	r3, r3, #2
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	737b      	strb	r3, [r7, #13]
    
    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f103 0008 	add.w	r0, r3, #8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80088e0:	2300      	movs	r3, #0
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7fe fa38 	bl	8006d58 <SAL_XSPI_SendReadCommand>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80088ee:	230c      	movs	r3, #12
 80088f0:	73fb      	strb	r3, [r7, #15]
      goto error;
 80088f2:	e02c      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f103 0008 	add.w	r0, r3, #8
 80088fa:	f107 020c 	add.w	r2, r7, #12
 80088fe:	2302      	movs	r3, #2
 8008900:	2101      	movs	r1, #1
 8008902:	f7fe f9d5 	bl	8006cb0 <SAL_XSPI_CommandSendData>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800890c:	230c      	movs	r3, #12
 800890e:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008910:	e01d      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 8008912:	2164      	movs	r1, #100	@ 0x64
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff fc45 	bl	80081a4 <driver_check_FlagBUSY>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008920:	230c      	movs	r3, #12
 8008922:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008924:	e013      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
 8008926:	23ff      	movs	r3, #255	@ 0xff
 8008928:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f103 0008 	add.w	r0, r3, #8
 8008930:	f107 020c 	add.w	r2, r7, #12
 8008934:	2302      	movs	r3, #2
 8008936:	2105      	movs	r1, #5
 8008938:	f7fe fa0e 	bl	8006d58 <SAL_XSPI_SendReadCommand>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008942:	230c      	movs	r3, #12
 8008944:	73fb      	strb	r3, [r7, #15]
      goto error;
 8008946:	e002      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
 8008948:	bf00      	nop
 800894a:	e000      	b.n	800894e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
 800894c:	bf00      	nop
  }
error :  
  return retr;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	240001e8 	.word	0x240001e8

0800895c <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008964:	230f      	movs	r3, #15
 8008966:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
 8008968:	2300      	movs	r3, #0
 800896a:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
 800896c:	4b19      	ldr	r3, [pc, #100]	@ (80089d4 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 800896e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008970:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008974:	b2db      	uxtb	r3, r3
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff ff32 	bl	80087e8 <JEDEC_Basic_ManageQuadEnableRequierement>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
 8008988:	2338      	movs	r3, #56	@ 0x38
 800898a:	73bb      	strb	r3, [r7, #14]
 800898c:	e00c      	b.n	80089a8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
 800898e:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 8008990:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008992:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
 80089a4:	2335      	movs	r3, #53	@ 0x35
 80089a6:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10c      	bne.n	80089c8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f103 0008 	add.w	r0, r3, #8
 80089ba:	7bb9      	ldrb	r1, [r7, #14]
 80089bc:	2300      	movs	r3, #0
 80089be:	2200      	movs	r2, #0
 80089c0:	f7fe f9ca 	bl	8006d58 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
    
    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.
  
  return retr;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	240001e8 	.word	0x240001e8

080089d8 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 80089e2:	2304      	movs	r3, #4
 80089e4:	73fb      	strb	r3, [r7, #15]
  
  /* check the magic number */
  switch(Signature)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008a24 <CheckSFDP_Signature+0x4c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d006      	beq.n	80089fc <CheckSFDP_Signature+0x24>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008a28 <CheckSFDP_Signature+0x50>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d10e      	bne.n	8008a14 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
    break;
 80089fa:	e00e      	b.n	8008a1a <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3308      	adds	r3, #8
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe fb3d 	bl	8007082 <SAL_XSPI_UpdateMemoryType>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
 8008a0e:	2305      	movs	r3, #5
 8008a10:	73fb      	strb	r3, [r7, #15]
    }
    break;
 8008a12:	e001      	b.n	8008a18 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
 8008a14:	bf00      	nop
 8008a16:	e000      	b.n	8008a1a <CheckSFDP_Signature+0x42>
    break;
 8008a18:	bf00      	nop
  }
  return retr;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	44505346 	.word	0x44505346
 8008a28:	50444653 	.word	0x50444653

08008a2c <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	@ 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	607a      	str	r2, [r7, #4]
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
 8008a42:	2300      	movs	r3, #0
 8008a44:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	2298      	movs	r2, #152	@ 0x98
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 f8ec 	bl	8008c2c <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	7afa      	ldrb	r2, [r7, #11]
 8008a58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	3308      	adds	r3, #8
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fd fe34 	bl	80066e6 <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f103 0008 	add.w	r0, r3, #8
 8008a84:	f107 0310 	add.w	r3, r7, #16
 8008a88:	4a44      	ldr	r2, [pc, #272]	@ (8008b9c <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	f7fd fdec 	bl	8006668 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fae3 	bl	8007060 <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 8008a9a:	f107 031c 	add.w	r3, r7, #28
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6838      	ldr	r0, [r7, #0]
 8008aa2:	f7fe fbb3 	bl	800720c <SFDP_GetHeader>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 8008aac:	23ff      	movs	r3, #255	@ 0xff
 8008aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008ab2:	e06c      	b.n	8008b8e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
 8008ab4:	6838      	ldr	r0, [r7, #0]
 8008ab6:	f7fe fce3 	bl	8007480 <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
 8008aba:	200a      	movs	r0, #10
 8008abc:	f7f8 f99c 	bl	8000df8 <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 8008ac0:	f107 031c 	add.w	r3, r7, #28
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6838      	ldr	r0, [r7, #0]
 8008ac8:	f7fe fba0 	bl	800720c <SFDP_GetHeader>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 8008ad2:	23ff      	movs	r3, #255	@ 0xff
 8008ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008ad8:	e059      	b.n	8008b8e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
 8008ada:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
 8008ae4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	3308      	adds	r3, #8
 8008af2:	f107 0114 	add.w	r1, r7, #20
 8008af6:	2204      	movs	r2, #4
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fd ffd5 	bl	8006aa8 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
 8008afe:	7d3a      	ldrb	r2, [r7, #20]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
 8008b06:	6838      	ldr	r0, [r7, #0]
 8008b08:	f7fe fbde 	bl	80072c8 <SFDP_CollectData>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 8008b12:	23ff      	movs	r3, #255	@ 0xff
 8008b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008b18:	e039      	b.n	8008b8e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
 8008b1a:	f107 031b 	add.w	r3, r7, #27
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6838      	ldr	r0, [r7, #0]
 8008b22:	f7fe fd89 	bl	8007638 <SFDP_BuildGenericDriver>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
 8008b2c:	23fd      	movs	r3, #253	@ 0xfd
 8008b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008b32:	e02c      	b.n	8008b8e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
 8008b34:	7efb      	ldrb	r3, [r7, #27]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10d      	bne.n	8008b56 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d009      	beq.n	8008b56 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	f103 0008 	add.w	r0, r3, #8
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	f107 0310 	add.w	r3, r7, #16
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	f7fd fd89 	bl	8006668 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
 8008b56:	f107 031c 	add.w	r3, r7, #28
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6838      	ldr	r0, [r7, #0]
 8008b5e:	f7fe fb17 	bl	8007190 <SFDP_ReadHeader>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
 8008b68:	23f2      	movs	r3, #242	@ 0xf2
 8008b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008b6e:	e00e      	b.n	8008b8e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
 8008b70:	f107 0314 	add.w	r3, r7, #20
 8008b74:	2206      	movs	r2, #6
 8008b76:	21aa      	movs	r1, #170	@ 0xaa
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f857 	bl	8008c2c <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	f107 0114 	add.w	r1, r7, #20
 8008b86:	2204      	movs	r2, #4
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fd ff8d 	bl	8006aa8 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
 8008b8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3728      	adds	r7, #40	@ 0x28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	02faf080 	.word	0x02faf080

08008ba0 <EXTMEM_DRIVER_NOR_SFDP_DeInit>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_DeInit(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  SFDPObject->sfpd_private.FlashSize = 0;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  return EXTMEM_DRIVER_NOR_SFDP_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8008bbe:	b590      	push	{r4, r7, lr}
 8008bc0:	b087      	sub	sp, #28
 8008bc2:	af02      	add	r7, sp, #8
 8008bc4:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f103 0008 	add.w	r0, r3, #8
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8008be2:	2400      	movs	r4, #0
 8008be4:	9400      	str	r4, [sp, #0]
 8008be6:	f7fe f9c4 	bl	8006f72 <SAL_XSPI_EnableMapMode>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 8008bf0:	23f3      	movs	r3, #243	@ 0xf3
 8008bf2:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 8008bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd90      	pop	{r4, r7, pc}

08008c00 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3308      	adds	r3, #8
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe fa25 	bl	8007060 <SAL_XSPI_DisableMapMode>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 8008c1c:	23f3      	movs	r3, #243	@ 0xf3
 8008c1e:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 8008c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <memset>:
 8008c2c:	4402      	add	r2, r0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d100      	bne.n	8008c36 <memset+0xa>
 8008c34:	4770      	bx	lr
 8008c36:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3a:	e7f9      	b.n	8008c30 <memset+0x4>

08008c3c <__libc_init_array>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c74 <__libc_init_array+0x38>)
 8008c40:	4c0d      	ldr	r4, [pc, #52]	@ (8008c78 <__libc_init_array+0x3c>)
 8008c42:	1b64      	subs	r4, r4, r5
 8008c44:	10a4      	asrs	r4, r4, #2
 8008c46:	2600      	movs	r6, #0
 8008c48:	42a6      	cmp	r6, r4
 8008c4a:	d109      	bne.n	8008c60 <__libc_init_array+0x24>
 8008c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c7c <__libc_init_array+0x40>)
 8008c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8008c80 <__libc_init_array+0x44>)
 8008c50:	f000 f826 	bl	8008ca0 <_init>
 8008c54:	1b64      	subs	r4, r4, r5
 8008c56:	10a4      	asrs	r4, r4, #2
 8008c58:	2600      	movs	r6, #0
 8008c5a:	42a6      	cmp	r6, r4
 8008c5c:	d105      	bne.n	8008c6a <__libc_init_array+0x2e>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c64:	4798      	blx	r3
 8008c66:	3601      	adds	r6, #1
 8008c68:	e7ee      	b.n	8008c48 <__libc_init_array+0xc>
 8008c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6e:	4798      	blx	r3
 8008c70:	3601      	adds	r6, #1
 8008c72:	e7f2      	b.n	8008c5a <__libc_init_array+0x1e>
 8008c74:	08008d04 	.word	0x08008d04
 8008c78:	08008d04 	.word	0x08008d04
 8008c7c:	08008d04 	.word	0x08008d04
 8008c80:	08008d08 	.word	0x08008d08

08008c84 <memcpy>:
 8008c84:	440a      	add	r2, r1
 8008c86:	4291      	cmp	r1, r2
 8008c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c8c:	d100      	bne.n	8008c90 <memcpy+0xc>
 8008c8e:	4770      	bx	lr
 8008c90:	b510      	push	{r4, lr}
 8008c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c9a:	4291      	cmp	r1, r2
 8008c9c:	d1f9      	bne.n	8008c92 <memcpy+0xe>
 8008c9e:	bd10      	pop	{r4, pc}

08008ca0 <_init>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr

08008cac <_fini>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	bf00      	nop
 8008cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb2:	bc08      	pop	{r3}
 8008cb4:	469e      	mov	lr, r3
 8008cb6:	4770      	bx	lr
